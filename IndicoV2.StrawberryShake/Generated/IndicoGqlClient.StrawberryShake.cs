// <auto-generated/>
#nullable enable

namespace IndicoV2.StrawberryShake
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtractionResult : global::System.IEquatable<DocumentExtractionResult>, IDocumentExtractionResult
    {
        public DocumentExtractionResult(global::IndicoV2.StrawberryShake.IDocumentExtraction_DocumentExtraction? documentExtraction)
        {
            DocumentExtraction = documentExtraction;
        }

        /// <summary>
        /// Extract text from a document using one of our OCR engine providers.
        /// Returns: List of ids of the document processing jobs kicked off by this mutation. Can be used to query for status and results.
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDocumentExtraction_DocumentExtraction? DocumentExtraction
        {
            get;
        }

        public virtual global::System.Boolean Equals(DocumentExtractionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DocumentExtraction is null && other.DocumentExtraction is null) || DocumentExtraction != null && DocumentExtraction.Equals(other.DocumentExtraction)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DocumentExtractionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DocumentExtraction != null)
                {
                    hash ^= 397 * DocumentExtraction.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Extract text from a document using one of our OCR engine providers.
    /// Returns: List of ids of the document processing jobs kicked off by this mutation. Can be used to query for status and results.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtraction_DocumentExtraction_DocumentExtraction : global::System.IEquatable<DocumentExtraction_DocumentExtraction_DocumentExtraction>, IDocumentExtraction_DocumentExtraction_DocumentExtraction
    {
        public DocumentExtraction_DocumentExtraction_DocumentExtraction(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? jobIds)
        {
            JobIds = jobIds;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }

        public virtual global::System.Boolean Equals(DocumentExtraction_DocumentExtraction_DocumentExtraction? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(JobIds, other.JobIds));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DocumentExtraction_DocumentExtraction_DocumentExtraction)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobIds != null)
                {
                    foreach (var JobIds_elm in JobIds)
                    {
                        if (JobIds_elm != null)
                        {
                            hash ^= 397 * JobIds_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDocumentExtractionResult
    {
        /// <summary>
        /// Extract text from a document using one of our OCR engine providers.
        /// Returns: List of ids of the document processing jobs kicked off by this mutation. Can be used to query for status and results.
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDocumentExtraction_DocumentExtraction? DocumentExtraction
        {
            get;
        }
    }

    /// <summary>
    /// Extract text from a document using one of our OCR engine providers.
    /// Returns: List of ids of the document processing jobs kicked off by this mutation. Can be used to query for status and results.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDocumentExtraction_DocumentExtraction
    {
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }
    }

    /// <summary>
    /// Extract text from a document using one of our OCR engine providers.
    /// Returns: List of ids of the document processing jobs kicked off by this mutation. Can be used to query for status and results.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDocumentExtraction_DocumentExtraction_DocumentExtraction : IDocumentExtraction_DocumentExtraction
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatusResult : global::System.IEquatable<WorkflowGetStatusResult>, IWorkflowGetStatusResult
    {
        public WorkflowGetStatusResult(global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows? workflows)
        {
            Workflows = workflows;
        }

        public global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows? Workflows
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowGetStatusResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Workflows is null && other.Workflows is null) || Workflows != null && Workflows.Equals(other.Workflows)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowGetStatusResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Workflows != null)
                {
                    hash ^= 397 * Workflows.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatus_Workflows_WorkflowPage : global::System.IEquatable<WorkflowGetStatus_Workflows_WorkflowPage>, IWorkflowGetStatus_Workflows_WorkflowPage
    {
        public WorkflowGetStatus_Workflows_WorkflowPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows_Workflows?>? workflows)
        {
            Workflows = workflows;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows_Workflows?>? Workflows
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowGetStatus_Workflows_WorkflowPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Workflows, other.Workflows));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowGetStatus_Workflows_WorkflowPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Workflows != null)
                {
                    foreach (var Workflows_elm in Workflows)
                    {
                        if (Workflows_elm != null)
                        {
                            hash ^= 397 * Workflows_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatus_Workflows_Workflows_Workflow : global::System.IEquatable<WorkflowGetStatus_Workflows_Workflows_Workflow>, IWorkflowGetStatus_Workflows_Workflows_Workflow
    {
        public WorkflowGetStatus_Workflows_Workflows_Workflow(global::IndicoV2.StrawberryShake.WorkflowStatus? status)
        {
            Status = status;
        }

        /// <summary>
        /// Current status of the workflow
        /// </summary>
        public global::IndicoV2.StrawberryShake.WorkflowStatus? Status
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowGetStatus_Workflows_Workflows_Workflow? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowGetStatus_Workflows_Workflows_Workflow)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowGetStatusResult
    {
        public global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows? Workflows
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowGetStatus_Workflows
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows_Workflows?>? Workflows
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowGetStatus_Workflows_WorkflowPage : IWorkflowGetStatus_Workflows
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowGetStatus_Workflows_Workflows
    {
        /// <summary>
        /// Current status of the workflow
        /// </summary>
        public global::IndicoV2.StrawberryShake.WorkflowStatus? Status
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowGetStatus_Workflows_Workflows_Workflow : IWorkflowGetStatus_Workflows_Workflows
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddDataResult : global::System.IEquatable<WorkflowAddDataResult>, IWorkflowAddDataResult
    {
        public WorkflowAddDataResult(global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow? addDataToWorkflow)
        {
            AddDataToWorkflow = addDataToWorkflow;
        }

        public global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow? AddDataToWorkflow
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowAddDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddDataToWorkflow is null && other.AddDataToWorkflow is null) || AddDataToWorkflow != null && AddDataToWorkflow.Equals(other.AddDataToWorkflow)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowAddDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddDataToWorkflow != null)
                {
                    hash ^= 397 * AddDataToWorkflow.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddData_AddDataToWorkflow_AddDataToWorkflow : global::System.IEquatable<WorkflowAddData_AddDataToWorkflow_AddDataToWorkflow>, IWorkflowAddData_AddDataToWorkflow_AddDataToWorkflow
    {
        public WorkflowAddData_AddDataToWorkflow_AddDataToWorkflow(global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow_Workflow? workflow)
        {
            Workflow = workflow;
        }

        public global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow_Workflow? Workflow
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowAddData_AddDataToWorkflow_AddDataToWorkflow? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Workflow is null && other.Workflow is null) || Workflow != null && Workflow.Equals(other.Workflow)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowAddData_AddDataToWorkflow_AddDataToWorkflow)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Workflow != null)
                {
                    hash ^= 397 * Workflow.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddData_AddDataToWorkflow_Workflow_Workflow : global::System.IEquatable<WorkflowAddData_AddDataToWorkflow_Workflow_Workflow>, IWorkflowAddData_AddDataToWorkflow_Workflow_Workflow
    {
        public WorkflowAddData_AddDataToWorkflow_Workflow_Workflow(global::System.Int32? id, global::System.String? name, global::IndicoV2.StrawberryShake.WorkflowStatus? status)
        {
            Id = id;
            Name = name;
            Status = status;
        }

        /// <summary>
        /// Unique ID of the workflow
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Workflow name
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// Current status of the workflow
        /// </summary>
        public global::IndicoV2.StrawberryShake.WorkflowStatus? Status
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowAddData_AddDataToWorkflow_Workflow_Workflow? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowAddData_AddDataToWorkflow_Workflow_Workflow)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowAddDataResult
    {
        public global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow? AddDataToWorkflow
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowAddData_AddDataToWorkflow
    {
        public global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow_Workflow? Workflow
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowAddData_AddDataToWorkflow_AddDataToWorkflow : IWorkflowAddData_AddDataToWorkflow
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowAddData_AddDataToWorkflow_Workflow
    {
        /// <summary>
        /// Unique ID of the workflow
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Workflow name
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// Current status of the workflow
        /// </summary>
        public global::IndicoV2.StrawberryShake.WorkflowStatus? Status
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowAddData_AddDataToWorkflow_Workflow_Workflow : IWorkflowAddData_AddDataToWorkflow_Workflow
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflowsResult : global::System.IEquatable<ListWorkflowsResult>, IListWorkflowsResult
    {
        public ListWorkflowsResult(global::IndicoV2.StrawberryShake.IListWorkflows_Workflows? workflows)
        {
            Workflows = workflows;
        }

        public global::IndicoV2.StrawberryShake.IListWorkflows_Workflows? Workflows
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListWorkflowsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Workflows is null && other.Workflows is null) || Workflows != null && Workflows.Equals(other.Workflows)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListWorkflowsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Workflows != null)
                {
                    hash ^= 397 * Workflows.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflows_Workflows_WorkflowPage : global::System.IEquatable<ListWorkflows_Workflows_WorkflowPage>, IListWorkflows_Workflows_WorkflowPage
    {
        public ListWorkflows_Workflows_WorkflowPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListWorkflows_Workflows_Workflows?>? workflows)
        {
            Workflows = workflows;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListWorkflows_Workflows_Workflows?>? Workflows
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListWorkflows_Workflows_WorkflowPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Workflows, other.Workflows));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListWorkflows_Workflows_WorkflowPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Workflows != null)
                {
                    foreach (var Workflows_elm in Workflows)
                    {
                        if (Workflows_elm != null)
                        {
                            hash ^= 397 * Workflows_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflows_Workflows_Workflows_Workflow : global::System.IEquatable<ListWorkflows_Workflows_Workflows_Workflow>, IListWorkflows_Workflows_Workflows_Workflow
    {
        public ListWorkflows_Workflows_Workflows_Workflow(global::System.Int32? id, global::System.String? name, global::System.Boolean? reviewEnabled)
        {
            Id = id;
            Name = name;
            ReviewEnabled = reviewEnabled;
        }

        /// <summary>
        /// Unique ID of the workflow
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Workflow name
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// DEPRECATED: Status of the Review queue
        /// </summary>
        public global::System.Boolean? ReviewEnabled
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListWorkflows_Workflows_Workflows_Workflow? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ReviewEnabled == other.ReviewEnabled;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListWorkflows_Workflows_Workflows_Workflow)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (ReviewEnabled != null)
                {
                    hash ^= 397 * ReviewEnabled.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListWorkflowsResult
    {
        public global::IndicoV2.StrawberryShake.IListWorkflows_Workflows? Workflows
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListWorkflows_Workflows
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListWorkflows_Workflows_Workflows?>? Workflows
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListWorkflows_Workflows_WorkflowPage : IListWorkflows_Workflows
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListWorkflows_Workflows_Workflows
    {
        /// <summary>
        /// Unique ID of the workflow
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Workflow name
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// DEPRECATED: Status of the Review queue
        /// </summary>
        public global::System.Boolean? ReviewEnabled
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListWorkflows_Workflows_Workflows_Workflow : IListWorkflows_Workflows_Workflows
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowSubmissionResult : global::System.IEquatable<WorkflowSubmissionResult>, IWorkflowSubmissionResult
    {
        public WorkflowSubmissionResult(global::IndicoV2.StrawberryShake.IWorkflowSubmission_WorkflowSubmission? workflowSubmission)
        {
            WorkflowSubmission = workflowSubmission;
        }

        /// <summary>
        /// Submit files to a workflow for processing
        /// Returns: SubmissionResult object which contains ids that can be queried for status and results.
        /// </summary>
        public global::IndicoV2.StrawberryShake.IWorkflowSubmission_WorkflowSubmission? WorkflowSubmission
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowSubmissionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((WorkflowSubmission is null && other.WorkflowSubmission is null) || WorkflowSubmission != null && WorkflowSubmission.Equals(other.WorkflowSubmission)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowSubmissionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (WorkflowSubmission != null)
                {
                    hash ^= 397 * WorkflowSubmission.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Server response object when submitting to a workflow containing ids
    /// to track the submissions and the submissions themselves if requested
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowSubmission_WorkflowSubmission_SubmissionResult : global::System.IEquatable<WorkflowSubmission_WorkflowSubmission_SubmissionResult>, IWorkflowSubmission_WorkflowSubmission_SubmissionResult
    {
        public WorkflowSubmission_WorkflowSubmission_SubmissionResult(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? jobIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds)
        {
            JobIds = jobIds;
            SubmissionIds = submissionIds;
        }

        /// <summary>
        /// Returned if submissions are not recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }

        /// <summary>
        /// Returned if submissions are recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? SubmissionIds
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowSubmission_WorkflowSubmission_SubmissionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(JobIds, other.JobIds)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(SubmissionIds, other.SubmissionIds);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowSubmission_WorkflowSubmission_SubmissionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobIds != null)
                {
                    foreach (var JobIds_elm in JobIds)
                    {
                        if (JobIds_elm != null)
                        {
                            hash ^= 397 * JobIds_elm.GetHashCode();
                        }
                    }
                }

                if (SubmissionIds != null)
                {
                    foreach (var SubmissionIds_elm in SubmissionIds)
                    {
                        if (SubmissionIds_elm != null)
                        {
                            hash ^= 397 * SubmissionIds_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowSubmissionResult
    {
        /// <summary>
        /// Submit files to a workflow for processing
        /// Returns: SubmissionResult object which contains ids that can be queried for status and results.
        /// </summary>
        public global::IndicoV2.StrawberryShake.IWorkflowSubmission_WorkflowSubmission? WorkflowSubmission
        {
            get;
        }
    }

    /// <summary>
    /// Server response object when submitting to a workflow containing ids
    /// to track the submissions and the submissions themselves if requested
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowSubmission_WorkflowSubmission
    {
        /// <summary>
        /// Returned if submissions are not recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }

        /// <summary>
        /// Returned if submissions are recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? SubmissionIds
        {
            get;
        }
    }

    /// <summary>
    /// Server response object when submitting to a workflow containing ids
    /// to track the submissions and the submissions themselves if requested
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowSubmission_WorkflowSubmission_SubmissionResult : IWorkflowSubmission_WorkflowSubmission
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowUrlSubmissionResult : global::System.IEquatable<WorkflowUrlSubmissionResult>, IWorkflowUrlSubmissionResult
    {
        public WorkflowUrlSubmissionResult(global::IndicoV2.StrawberryShake.IWorkflowUrlSubmission_WorkflowUrlSubmission? workflowUrlSubmission)
        {
            WorkflowUrlSubmission = workflowUrlSubmission;
        }

        public global::IndicoV2.StrawberryShake.IWorkflowUrlSubmission_WorkflowUrlSubmission? WorkflowUrlSubmission
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowUrlSubmissionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((WorkflowUrlSubmission is null && other.WorkflowUrlSubmission is null) || WorkflowUrlSubmission != null && WorkflowUrlSubmission.Equals(other.WorkflowUrlSubmission)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowUrlSubmissionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (WorkflowUrlSubmission != null)
                {
                    hash ^= 397 * WorkflowUrlSubmission.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Server response object when submitting to a workflow containing ids
    /// to track the submissions and the submissions themselves if requested
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult : global::System.IEquatable<WorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult>, IWorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult
    {
        public WorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? jobIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds)
        {
            JobIds = jobIds;
            SubmissionIds = submissionIds;
        }

        /// <summary>
        /// Returned if submissions are not recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }

        /// <summary>
        /// Returned if submissions are recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? SubmissionIds
        {
            get;
        }

        public virtual global::System.Boolean Equals(WorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(JobIds, other.JobIds)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(SubmissionIds, other.SubmissionIds);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((WorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobIds != null)
                {
                    foreach (var JobIds_elm in JobIds)
                    {
                        if (JobIds_elm != null)
                        {
                            hash ^= 397 * JobIds_elm.GetHashCode();
                        }
                    }
                }

                if (SubmissionIds != null)
                {
                    foreach (var SubmissionIds_elm in SubmissionIds)
                    {
                        if (SubmissionIds_elm != null)
                        {
                            hash ^= 397 * SubmissionIds_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowUrlSubmissionResult
    {
        public global::IndicoV2.StrawberryShake.IWorkflowUrlSubmission_WorkflowUrlSubmission? WorkflowUrlSubmission
        {
            get;
        }
    }

    /// <summary>
    /// Server response object when submitting to a workflow containing ids
    /// to track the submissions and the submissions themselves if requested
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowUrlSubmission_WorkflowUrlSubmission
    {
        /// <summary>
        /// Returned if submissions are not recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }

        /// <summary>
        /// Returned if submissions are recorded
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? SubmissionIds
        {
            get;
        }
    }

    /// <summary>
    /// Server response object when submitting to a workflow containing ids
    /// to track the submissions and the submissions themselves if requested
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult : IWorkflowUrlSubmission_WorkflowUrlSubmission
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissionsResult : global::System.IEquatable<ListSubmissionsResult>, IListSubmissionsResult
    {
        public ListSubmissionsResult(global::IndicoV2.StrawberryShake.IListSubmissions_Submissions? submissions)
        {
            Submissions = submissions;
        }

        public global::IndicoV2.StrawberryShake.IListSubmissions_Submissions? Submissions
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Submissions is null && other.Submissions is null) || Submissions != null && Submissions.Equals(other.Submissions)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Submissions != null)
                {
                    hash ^= 397 * Submissions.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_SubmissionPage : global::System.IEquatable<ListSubmissions_Submissions_SubmissionPage>, IListSubmissions_Submissions_SubmissionPage
    {
        public ListSubmissions_Submissions_SubmissionPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions?>? submissions, global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_PageInfo? pageInfo)
        {
            Submissions = submissions;
            PageInfo = pageInfo;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions?>? Submissions
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_PageInfo? PageInfo
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_SubmissionPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Submissions, other.Submissions)) && ((PageInfo is null && other.PageInfo is null) || PageInfo != null && PageInfo.Equals(other.PageInfo));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_SubmissionPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Submissions != null)
                {
                    foreach (var Submissions_elm in Submissions)
                    {
                        if (Submissions_elm != null)
                        {
                            hash ^= 397 * Submissions_elm.GetHashCode();
                        }
                    }
                }

                if (PageInfo != null)
                {
                    hash ^= 397 * PageInfo.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_Submission : global::System.IEquatable<ListSubmissions_Submissions_Submissions_Submission>, IListSubmissions_Submissions_Submissions_Submission
    {
        public ListSubmissions_Submissions_Submissions_Submission(global::System.Int32? id, global::System.Int32? datasetId, global::System.Int32? workflowId, global::IndicoV2.StrawberryShake.SubmissionStatus? status, global::System.DateTimeOffset? createdAt, global::System.DateTimeOffset? updatedAt, global::System.Int32? createdBy, global::System.Int32? updatedBy, global::System.DateTimeOffset? completedAt, global::System.String? errors, global::System.Boolean? filesDeleted, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles?>? inputFiles, global::System.String? inputFile, global::System.String? inputFilename, global::System.String? resultFile, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles?>? outputFiles, global::System.Boolean? retrieved, global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_AutoReview? autoReview, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries?>? retries, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews?>? reviews, global::System.Boolean? reviewInProgress)
        {
            Id = id;
            DatasetId = datasetId;
            WorkflowId = workflowId;
            Status = status;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            CreatedBy = createdBy;
            UpdatedBy = updatedBy;
            CompletedAt = completedAt;
            Errors = errors;
            FilesDeleted = filesDeleted;
            InputFiles = inputFiles;
            InputFile = inputFile;
            InputFilename = inputFilename;
            ResultFile = resultFile;
            OutputFiles = outputFiles;
            Retrieved = retrieved;
            AutoReview = autoReview;
            Retries = retries;
            Reviews = reviews;
            ReviewInProgress = reviewInProgress;
        }

        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// ID of the dataset associated with the submission
        /// </summary>
        public global::System.Int32? DatasetId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow associated with the submission
        /// </summary>
        public global::System.Int32? WorkflowId
        {
            get;
        }

        /// <summary>
        /// Current status of the submission process
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was updated
        /// </summary>
        public global::System.DateTimeOffset? UpdatedAt
        {
            get;
        }

        /// <summary>
        /// ID of the user who created the submission
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// ID of the user who updated the submission
        /// </summary>
        public global::System.Int32? UpdatedBy
        {
            get;
        }

        /// <summary>
        /// Datetime the submission reached a completed state
        /// </summary>
        public global::System.DateTimeOffset? CompletedAt
        {
            get;
        }

        /// <summary>
        /// Errors occurred during this submission
        /// </summary>
        public global::System.String? Errors
        {
            get;
        }

        /// <summary>
        /// Submission files have been deleted from file store
        /// </summary>
        public global::System.Boolean? FilesDeleted
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles?>? InputFiles
        {
            get;
        }

        /// <summary>
        /// Local URL to first stored input
        /// </summary>
        public global::System.String? InputFile
        {
            get;
        }

        /// <summary>
        /// Original name of first file
        /// </summary>
        public global::System.String? InputFilename
        {
            get;
        }

        /// <summary>
        /// Local URL to most recently stored output
        /// </summary>
        public global::System.String? ResultFile
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles?>? OutputFiles
        {
            get;
        }

        /// <summary>
        /// Submission has been marked as having been retrieved
        /// </summary>
        public global::System.Boolean? Retrieved
        {
            get;
        }

        /// <summary>
        /// Latest auto review for submission
        /// </summary>
        public global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_AutoReview? AutoReview
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries?>? Retries
        {
            get;
        }

        /// <summary>
        /// completed reviews of this submission, without changes
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews?>? Reviews
        {
            get;
        }

        /// <summary>
        /// True if the submission is being actively reviewed
        /// </summary>
        public global::System.Boolean? ReviewInProgress
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_Submissions_Submission? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && DatasetId == other.DatasetId && WorkflowId == other.WorkflowId && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && ((UpdatedAt is null && other.UpdatedAt is null) || UpdatedAt != null && UpdatedAt.Equals(other.UpdatedAt)) && CreatedBy == other.CreatedBy && UpdatedBy == other.UpdatedBy && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && ((Errors is null && other.Errors is null) || Errors != null && Errors.Equals(other.Errors)) && FilesDeleted == other.FilesDeleted && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(InputFiles, other.InputFiles) && ((InputFile is null && other.InputFile is null) || InputFile != null && InputFile.Equals(other.InputFile)) && ((InputFilename is null && other.InputFilename is null) || InputFilename != null && InputFilename.Equals(other.InputFilename)) && ((ResultFile is null && other.ResultFile is null) || ResultFile != null && ResultFile.Equals(other.ResultFile)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(OutputFiles, other.OutputFiles) && Retrieved == other.Retrieved && ((AutoReview is null && other.AutoReview is null) || AutoReview != null && AutoReview.Equals(other.AutoReview)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Retries, other.Retries) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Reviews, other.Reviews) && ReviewInProgress == other.ReviewInProgress;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_Submissions_Submission)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (DatasetId != null)
                {
                    hash ^= 397 * DatasetId.GetHashCode();
                }

                if (WorkflowId != null)
                {
                    hash ^= 397 * WorkflowId.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (UpdatedAt != null)
                {
                    hash ^= 397 * UpdatedAt.GetHashCode();
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (UpdatedBy != null)
                {
                    hash ^= 397 * UpdatedBy.GetHashCode();
                }

                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                if (Errors != null)
                {
                    hash ^= 397 * Errors.GetHashCode();
                }

                if (FilesDeleted != null)
                {
                    hash ^= 397 * FilesDeleted.GetHashCode();
                }

                if (InputFiles != null)
                {
                    foreach (var InputFiles_elm in InputFiles)
                    {
                        if (InputFiles_elm != null)
                        {
                            hash ^= 397 * InputFiles_elm.GetHashCode();
                        }
                    }
                }

                if (InputFile != null)
                {
                    hash ^= 397 * InputFile.GetHashCode();
                }

                if (InputFilename != null)
                {
                    hash ^= 397 * InputFilename.GetHashCode();
                }

                if (ResultFile != null)
                {
                    hash ^= 397 * ResultFile.GetHashCode();
                }

                if (OutputFiles != null)
                {
                    foreach (var OutputFiles_elm in OutputFiles)
                    {
                        if (OutputFiles_elm != null)
                        {
                            hash ^= 397 * OutputFiles_elm.GetHashCode();
                        }
                    }
                }

                if (Retrieved != null)
                {
                    hash ^= 397 * Retrieved.GetHashCode();
                }

                if (AutoReview != null)
                {
                    hash ^= 397 * AutoReview.GetHashCode();
                }

                if (Retries != null)
                {
                    foreach (var Retries_elm in Retries)
                    {
                        if (Retries_elm != null)
                        {
                            hash ^= 397 * Retries_elm.GetHashCode();
                        }
                    }
                }

                if (Reviews != null)
                {
                    foreach (var Reviews_elm in Reviews)
                    {
                        if (Reviews_elm != null)
                        {
                            hash ^= 397 * Reviews_elm.GetHashCode();
                        }
                    }
                }

                if (ReviewInProgress != null)
                {
                    hash ^= 397 * ReviewInProgress.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_PageInfo_PageInfo : global::System.IEquatable<ListSubmissions_Submissions_PageInfo_PageInfo>, IListSubmissions_Submissions_PageInfo_PageInfo
    {
        public ListSubmissions_Submissions_PageInfo_PageInfo(global::System.Int32? startCursor, global::System.Int32? endCursor, global::System.Boolean? hasNextPage, global::System.Int32? aggregateCount)
        {
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            AggregateCount = aggregateCount;
        }

        /// <summary>
        /// Cursor on the first result - from which the previous page can be acquired
        /// </summary>
        public global::System.Int32? StartCursor
        {
            get;
        }

        /// <summary>
        /// Cursor on the last result - from which the next page can be acquired
        /// </summary>
        public global::System.Int32? EndCursor
        {
            get;
        }

        /// <summary>
        /// Another page is available
        /// </summary>
        public global::System.Boolean? HasNextPage
        {
            get;
        }

        /// <summary>
        /// Total number of results for this query
        /// </summary>
        public global::System.Int32? AggregateCount
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (StartCursor == other.StartCursor) && EndCursor == other.EndCursor && HasNextPage == other.HasNextPage && AggregateCount == other.AggregateCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                if (HasNextPage != null)
                {
                    hash ^= 397 * HasNextPage.GetHashCode();
                }

                if (AggregateCount != null)
                {
                    hash ^= 397 * AggregateCount.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Each submission can have 1 or more (bundled) files associated with it
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile : global::System.IEquatable<ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile>, IListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile
    {
        public ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile(global::System.Int32? id, global::System.String? filepath, global::System.String? filename, global::IndicoV2.StrawberryShake.FileType? filetype, global::System.Int32? submissionId, global::System.Int32? fileSize, global::System.Int32? numPages)
        {
            Id = id;
            Filepath = filepath;
            Filename = filename;
            Filetype = filetype;
            SubmissionId = submissionId;
            FileSize = fileSize;
            NumPages = numPages;
        }

        /// <summary>
        /// Unique ID of this file
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// Name of original file
        /// </summary>
        public global::System.String? Filename
        {
            get;
        }

        /// <summary>
        /// Type of file
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileType? Filetype
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Size of file in bytes
        /// </summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        /// <summary>
        /// Number of pages in file
        /// </summary>
        public global::System.Int32? NumPages
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Filepath is null && other.Filepath is null) || Filepath != null && Filepath.Equals(other.Filepath)) && ((Filename is null && other.Filename is null) || Filename != null && Filename.Equals(other.Filename)) && ((Filetype is null && other.Filetype is null) || Filetype != null && Filetype.Equals(other.Filetype)) && SubmissionId == other.SubmissionId && FileSize == other.FileSize && NumPages == other.NumPages;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Filepath != null)
                {
                    hash ^= 397 * Filepath.GetHashCode();
                }

                if (Filename != null)
                {
                    hash ^= 397 * Filename.GetHashCode();
                }

                if (Filetype != null)
                {
                    hash ^= 397 * Filetype.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (FileSize != null)
                {
                    hash ^= 397 * FileSize.GetHashCode();
                }

                if (NumPages != null)
                {
                    hash ^= 397 * NumPages.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Each submission can have 1 or more output files created during the workflow
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput : global::System.IEquatable<ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput>, IListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput
    {
        public ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput(global::System.Int32? id, global::System.String? filepath, global::System.Int32? submissionId, global::System.Int32? componentId, global::System.DateTimeOffset? createdAt)
        {
            Id = id;
            Filepath = filepath;
            SubmissionId = submissionId;
            ComponentId = componentId;
            CreatedAt = createdAt;
        }

        /// <summary>
        /// Unique ID of this output
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow component that made this file
        /// </summary>
        public global::System.Int32? ComponentId
        {
            get;
        }

        /// <summary>
        /// Datetime the output file was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Filepath is null && other.Filepath is null) || Filepath != null && Filepath.Equals(other.Filepath)) && SubmissionId == other.SubmissionId && ComponentId == other.ComponentId && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Filepath != null)
                {
                    hash ^= 397 * Filepath.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (ComponentId != null)
                {
                    hash ^= 397 * ComponentId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_AutoReview_Review : global::System.IEquatable<ListSubmissions_Submissions_Submissions_AutoReview_Review>, IListSubmissions_Submissions_Submissions_AutoReview_Review
    {
        public ListSubmissions_Submissions_Submissions_AutoReview_Review(global::System.Int32? id, global::System.Int32? submissionId, global::System.String? createdAt, global::System.Int32? createdBy, global::System.String? startedAt, global::System.String? completedAt, global::System.Boolean? rejected, global::IndicoV2.StrawberryShake.ReviewType? reviewType, global::System.String? notes)
        {
            Id = id;
            SubmissionId = submissionId;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Rejected = rejected;
            ReviewType = reviewType;
            Notes = notes;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_Submissions_AutoReview_Review? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && SubmissionId == other.SubmissionId && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreatedBy == other.CreatedBy && ((StartedAt is null && other.StartedAt is null) || StartedAt != null && StartedAt.Equals(other.StartedAt)) && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && Rejected == other.Rejected && ((ReviewType is null && other.ReviewType is null) || ReviewType != null && ReviewType.Equals(other.ReviewType)) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_Submissions_AutoReview_Review)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (StartedAt != null)
                {
                    hash ^= 397 * StartedAt.GetHashCode();
                }

                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                if (Rejected != null)
                {
                    hash ^= 397 * Rejected.GetHashCode();
                }

                if (ReviewType != null)
                {
                    hash ^= 397 * ReviewType.GetHashCode();
                }

                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry : global::System.IEquatable<ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry>, IListSubmissions_Submissions_Submissions_Retries_SubmissionRetry
    {
        public ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry(global::System.Int32? id, global::System.Int32? submissionId, global::System.String? previousErrors, global::IndicoV2.StrawberryShake.SubmissionStatus? previousStatus, global::System.String? retryErrors)
        {
            Id = id;
            SubmissionId = submissionId;
            PreviousErrors = previousErrors;
            PreviousStatus = previousStatus;
            RetryErrors = retryErrors;
        }

        /// <summary>
        /// Unique ID of the submission retry
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Unique ID of the associated submission
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Errors from previous submission
        /// </summary>
        public global::System.String? PreviousErrors
        {
            get;
        }

        /// <summary>
        /// Status of submission before it was retried
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? PreviousStatus
        {
            get;
        }

        /// <summary>
        /// Errors that occurred during the retrying of this submission
        /// </summary>
        public global::System.String? RetryErrors
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && SubmissionId == other.SubmissionId && ((PreviousErrors is null && other.PreviousErrors is null) || PreviousErrors != null && PreviousErrors.Equals(other.PreviousErrors)) && ((PreviousStatus is null && other.PreviousStatus is null) || PreviousStatus != null && PreviousStatus.Equals(other.PreviousStatus)) && ((RetryErrors is null && other.RetryErrors is null) || RetryErrors != null && RetryErrors.Equals(other.RetryErrors));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (PreviousErrors != null)
                {
                    hash ^= 397 * PreviousErrors.GetHashCode();
                }

                if (PreviousStatus != null)
                {
                    hash ^= 397 * PreviousStatus.GetHashCode();
                }

                if (RetryErrors != null)
                {
                    hash ^= 397 * RetryErrors.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_Reviews_Review : global::System.IEquatable<ListSubmissions_Submissions_Submissions_Reviews_Review>, IListSubmissions_Submissions_Submissions_Reviews_Review
    {
        public ListSubmissions_Submissions_Submissions_Reviews_Review(global::System.Int32? id, global::System.Int32? submissionId, global::System.String? createdAt, global::System.Int32? createdBy, global::System.String? startedAt, global::System.String? completedAt, global::System.Boolean? rejected, global::IndicoV2.StrawberryShake.ReviewType? reviewType, global::System.String? notes)
        {
            Id = id;
            SubmissionId = submissionId;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Rejected = rejected;
            ReviewType = reviewType;
            Notes = notes;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }

        public virtual global::System.Boolean Equals(ListSubmissions_Submissions_Submissions_Reviews_Review? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && SubmissionId == other.SubmissionId && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreatedBy == other.CreatedBy && ((StartedAt is null && other.StartedAt is null) || StartedAt != null && StartedAt.Equals(other.StartedAt)) && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && Rejected == other.Rejected && ((ReviewType is null && other.ReviewType is null) || ReviewType != null && ReviewType.Equals(other.ReviewType)) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ListSubmissions_Submissions_Submissions_Reviews_Review)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (StartedAt != null)
                {
                    hash ^= 397 * StartedAt.GetHashCode();
                }

                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                if (Rejected != null)
                {
                    hash ^= 397 * Rejected.GetHashCode();
                }

                if (ReviewType != null)
                {
                    hash ^= 397 * ReviewType.GetHashCode();
                }

                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissionsResult
    {
        public global::IndicoV2.StrawberryShake.IListSubmissions_Submissions? Submissions
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions?>? Submissions
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_PageInfo? PageInfo
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_SubmissionPage : IListSubmissions_Submissions
    {
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions
    {
        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// ID of the dataset associated with the submission
        /// </summary>
        public global::System.Int32? DatasetId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow associated with the submission
        /// </summary>
        public global::System.Int32? WorkflowId
        {
            get;
        }

        /// <summary>
        /// Current status of the submission process
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was updated
        /// </summary>
        public global::System.DateTimeOffset? UpdatedAt
        {
            get;
        }

        /// <summary>
        /// ID of the user who created the submission
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// ID of the user who updated the submission
        /// </summary>
        public global::System.Int32? UpdatedBy
        {
            get;
        }

        /// <summary>
        /// Datetime the submission reached a completed state
        /// </summary>
        public global::System.DateTimeOffset? CompletedAt
        {
            get;
        }

        /// <summary>
        /// Errors occurred during this submission
        /// </summary>
        public global::System.String? Errors
        {
            get;
        }

        /// <summary>
        /// Submission files have been deleted from file store
        /// </summary>
        public global::System.Boolean? FilesDeleted
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles?>? InputFiles
        {
            get;
        }

        /// <summary>
        /// Local URL to first stored input
        /// </summary>
        public global::System.String? InputFile
        {
            get;
        }

        /// <summary>
        /// Original name of first file
        /// </summary>
        public global::System.String? InputFilename
        {
            get;
        }

        /// <summary>
        /// Local URL to most recently stored output
        /// </summary>
        public global::System.String? ResultFile
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles?>? OutputFiles
        {
            get;
        }

        /// <summary>
        /// Submission has been marked as having been retrieved
        /// </summary>
        public global::System.Boolean? Retrieved
        {
            get;
        }

        /// <summary>
        /// Latest auto review for submission
        /// </summary>
        public global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_AutoReview? AutoReview
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries?>? Retries
        {
            get;
        }

        /// <summary>
        /// completed reviews of this submission, without changes
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews?>? Reviews
        {
            get;
        }

        /// <summary>
        /// True if the submission is being actively reviewed
        /// </summary>
        public global::System.Boolean? ReviewInProgress
        {
            get;
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_Submission : IListSubmissions_Submissions_Submissions
    {
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_PageInfo
    {
        /// <summary>
        /// Cursor on the first result - from which the previous page can be acquired
        /// </summary>
        public global::System.Int32? StartCursor
        {
            get;
        }

        /// <summary>
        /// Cursor on the last result - from which the next page can be acquired
        /// </summary>
        public global::System.Int32? EndCursor
        {
            get;
        }

        /// <summary>
        /// Another page is available
        /// </summary>
        public global::System.Boolean? HasNextPage
        {
            get;
        }

        /// <summary>
        /// Total number of results for this query
        /// </summary>
        public global::System.Int32? AggregateCount
        {
            get;
        }
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_PageInfo_PageInfo : IListSubmissions_Submissions_PageInfo
    {
    }

    /// <summary>
    /// Each submission can have 1 or more (bundled) files associated with it
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_InputFiles
    {
        /// <summary>
        /// Unique ID of this file
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// Name of original file
        /// </summary>
        public global::System.String? Filename
        {
            get;
        }

        /// <summary>
        /// Type of file
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileType? Filetype
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Size of file in bytes
        /// </summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        /// <summary>
        /// Number of pages in file
        /// </summary>
        public global::System.Int32? NumPages
        {
            get;
        }
    }

    /// <summary>
    /// Each submission can have 1 or more (bundled) files associated with it
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile : IListSubmissions_Submissions_Submissions_InputFiles
    {
    }

    /// <summary>
    /// Each submission can have 1 or more output files created during the workflow
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_OutputFiles
    {
        /// <summary>
        /// Unique ID of this output
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow component that made this file
        /// </summary>
        public global::System.Int32? ComponentId
        {
            get;
        }

        /// <summary>
        /// Datetime the output file was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }
    }

    /// <summary>
    /// Each submission can have 1 or more output files created during the workflow
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput : IListSubmissions_Submissions_Submissions_OutputFiles
    {
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_AutoReview
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_AutoReview_Review : IListSubmissions_Submissions_Submissions_AutoReview
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_Retries
    {
        /// <summary>
        /// Unique ID of the submission retry
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Unique ID of the associated submission
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Errors from previous submission
        /// </summary>
        public global::System.String? PreviousErrors
        {
            get;
        }

        /// <summary>
        /// Status of submission before it was retried
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? PreviousStatus
        {
            get;
        }

        /// <summary>
        /// Errors that occurred during the retrying of this submission
        /// </summary>
        public global::System.String? RetryErrors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_Retries_SubmissionRetry : IListSubmissions_Submissions_Submissions_Retries
    {
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_Reviews
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissions_Submissions_Submissions_Reviews_Review : IListSubmissions_Submissions_Submissions_Reviews
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmissionResult : global::System.IEquatable<UpdateSubmissionResult>, IUpdateSubmissionResult
    {
        public UpdateSubmissionResult(global::IndicoV2.StrawberryShake.IUpdateSubmission_UpdateSubmission? updateSubmission)
        {
            UpdateSubmission = updateSubmission;
        }

        public global::IndicoV2.StrawberryShake.IUpdateSubmission_UpdateSubmission? UpdateSubmission
        {
            get;
        }

        public virtual global::System.Boolean Equals(UpdateSubmissionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UpdateSubmission is null && other.UpdateSubmission is null) || UpdateSubmission != null && UpdateSubmission.Equals(other.UpdateSubmission)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateSubmissionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UpdateSubmission != null)
                {
                    hash ^= 397 * UpdateSubmission.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmission_UpdateSubmission_Submission : global::System.IEquatable<UpdateSubmission_UpdateSubmission_Submission>, IUpdateSubmission_UpdateSubmission_Submission
    {
        public UpdateSubmission_UpdateSubmission_Submission(global::System.Int32? id, global::System.Int32? datasetId, global::System.Int32? workflowId, global::IndicoV2.StrawberryShake.SubmissionStatus? status, global::System.String? inputFile, global::System.String? inputFilename, global::System.String? resultFile, global::System.Boolean? retrieved)
        {
            Id = id;
            DatasetId = datasetId;
            WorkflowId = workflowId;
            Status = status;
            InputFile = inputFile;
            InputFilename = inputFilename;
            ResultFile = resultFile;
            Retrieved = retrieved;
        }

        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// ID of the dataset associated with the submission
        /// </summary>
        public global::System.Int32? DatasetId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow associated with the submission
        /// </summary>
        public global::System.Int32? WorkflowId
        {
            get;
        }

        /// <summary>
        /// Current status of the submission process
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get;
        }

        /// <summary>
        /// Local URL to first stored input
        /// </summary>
        public global::System.String? InputFile
        {
            get;
        }

        /// <summary>
        /// Original name of first file
        /// </summary>
        public global::System.String? InputFilename
        {
            get;
        }

        /// <summary>
        /// Local URL to most recently stored output
        /// </summary>
        public global::System.String? ResultFile
        {
            get;
        }

        /// <summary>
        /// Submission has been marked as having been retrieved
        /// </summary>
        public global::System.Boolean? Retrieved
        {
            get;
        }

        public virtual global::System.Boolean Equals(UpdateSubmission_UpdateSubmission_Submission? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && DatasetId == other.DatasetId && WorkflowId == other.WorkflowId && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((InputFile is null && other.InputFile is null) || InputFile != null && InputFile.Equals(other.InputFile)) && ((InputFilename is null && other.InputFilename is null) || InputFilename != null && InputFilename.Equals(other.InputFilename)) && ((ResultFile is null && other.ResultFile is null) || ResultFile != null && ResultFile.Equals(other.ResultFile)) && Retrieved == other.Retrieved;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateSubmission_UpdateSubmission_Submission)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (DatasetId != null)
                {
                    hash ^= 397 * DatasetId.GetHashCode();
                }

                if (WorkflowId != null)
                {
                    hash ^= 397 * WorkflowId.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (InputFile != null)
                {
                    hash ^= 397 * InputFile.GetHashCode();
                }

                if (InputFilename != null)
                {
                    hash ^= 397 * InputFilename.GetHashCode();
                }

                if (ResultFile != null)
                {
                    hash ^= 397 * ResultFile.GetHashCode();
                }

                if (Retrieved != null)
                {
                    hash ^= 397 * Retrieved.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUpdateSubmissionResult
    {
        public global::IndicoV2.StrawberryShake.IUpdateSubmission_UpdateSubmission? UpdateSubmission
        {
            get;
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUpdateSubmission_UpdateSubmission
    {
        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// ID of the dataset associated with the submission
        /// </summary>
        public global::System.Int32? DatasetId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow associated with the submission
        /// </summary>
        public global::System.Int32? WorkflowId
        {
            get;
        }

        /// <summary>
        /// Current status of the submission process
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get;
        }

        /// <summary>
        /// Local URL to first stored input
        /// </summary>
        public global::System.String? InputFile
        {
            get;
        }

        /// <summary>
        /// Original name of first file
        /// </summary>
        public global::System.String? InputFilename
        {
            get;
        }

        /// <summary>
        /// Local URL to most recently stored output
        /// </summary>
        public global::System.String? ResultFile
        {
            get;
        }

        /// <summary>
        /// Submission has been marked as having been retrieved
        /// </summary>
        public global::System.Boolean? Retrieved
        {
            get;
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUpdateSubmission_UpdateSubmission_Submission : IUpdateSubmission_UpdateSubmission
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmissionResult : global::System.IEquatable<GetSubmissionResult>, IGetSubmissionResult
    {
        public GetSubmissionResult(global::IndicoV2.StrawberryShake.IGetSubmission_Submission? submission)
        {
            Submission = submission;
        }

        public global::IndicoV2.StrawberryShake.IGetSubmission_Submission? Submission
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSubmissionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Submission is null && other.Submission is null) || Submission != null && Submission.Equals(other.Submission)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubmissionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Submission != null)
                {
                    hash ^= 397 * Submission.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_Submission : global::System.IEquatable<GetSubmission_Submission_Submission>, IGetSubmission_Submission_Submission
    {
        public GetSubmission_Submission_Submission(global::System.Int32? id, global::System.Int32? datasetId, global::System.Int32? workflowId, global::IndicoV2.StrawberryShake.SubmissionStatus? status, global::System.DateTimeOffset? createdAt, global::System.DateTimeOffset? updatedAt, global::System.Int32? createdBy, global::System.Int32? updatedBy, global::System.DateTimeOffset? completedAt, global::System.String? errors, global::System.Boolean? filesDeleted, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_InputFiles?>? inputFiles, global::System.String? inputFile, global::System.String? inputFilename, global::System.String? resultFile, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_OutputFiles?>? outputFiles, global::System.Boolean? retrieved, global::IndicoV2.StrawberryShake.IGetSubmission_Submission_AutoReview? autoReview, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Retries?>? retries, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Reviews?>? reviews, global::System.Boolean? reviewInProgress)
        {
            Id = id;
            DatasetId = datasetId;
            WorkflowId = workflowId;
            Status = status;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            CreatedBy = createdBy;
            UpdatedBy = updatedBy;
            CompletedAt = completedAt;
            Errors = errors;
            FilesDeleted = filesDeleted;
            InputFiles = inputFiles;
            InputFile = inputFile;
            InputFilename = inputFilename;
            ResultFile = resultFile;
            OutputFiles = outputFiles;
            Retrieved = retrieved;
            AutoReview = autoReview;
            Retries = retries;
            Reviews = reviews;
            ReviewInProgress = reviewInProgress;
        }

        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// ID of the dataset associated with the submission
        /// </summary>
        public global::System.Int32? DatasetId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow associated with the submission
        /// </summary>
        public global::System.Int32? WorkflowId
        {
            get;
        }

        /// <summary>
        /// Current status of the submission process
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was updated
        /// </summary>
        public global::System.DateTimeOffset? UpdatedAt
        {
            get;
        }

        /// <summary>
        /// ID of the user who created the submission
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// ID of the user who updated the submission
        /// </summary>
        public global::System.Int32? UpdatedBy
        {
            get;
        }

        /// <summary>
        /// Datetime the submission reached a completed state
        /// </summary>
        public global::System.DateTimeOffset? CompletedAt
        {
            get;
        }

        /// <summary>
        /// Errors occurred during this submission
        /// </summary>
        public global::System.String? Errors
        {
            get;
        }

        /// <summary>
        /// Submission files have been deleted from file store
        /// </summary>
        public global::System.Boolean? FilesDeleted
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_InputFiles?>? InputFiles
        {
            get;
        }

        /// <summary>
        /// Local URL to first stored input
        /// </summary>
        public global::System.String? InputFile
        {
            get;
        }

        /// <summary>
        /// Original name of first file
        /// </summary>
        public global::System.String? InputFilename
        {
            get;
        }

        /// <summary>
        /// Local URL to most recently stored output
        /// </summary>
        public global::System.String? ResultFile
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_OutputFiles?>? OutputFiles
        {
            get;
        }

        /// <summary>
        /// Submission has been marked as having been retrieved
        /// </summary>
        public global::System.Boolean? Retrieved
        {
            get;
        }

        /// <summary>
        /// Latest auto review for submission
        /// </summary>
        public global::IndicoV2.StrawberryShake.IGetSubmission_Submission_AutoReview? AutoReview
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Retries?>? Retries
        {
            get;
        }

        /// <summary>
        /// completed reviews of this submission, without changes
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Reviews?>? Reviews
        {
            get;
        }

        /// <summary>
        /// True if the submission is being actively reviewed
        /// </summary>
        public global::System.Boolean? ReviewInProgress
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSubmission_Submission_Submission? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && DatasetId == other.DatasetId && WorkflowId == other.WorkflowId && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && ((UpdatedAt is null && other.UpdatedAt is null) || UpdatedAt != null && UpdatedAt.Equals(other.UpdatedAt)) && CreatedBy == other.CreatedBy && UpdatedBy == other.UpdatedBy && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && ((Errors is null && other.Errors is null) || Errors != null && Errors.Equals(other.Errors)) && FilesDeleted == other.FilesDeleted && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(InputFiles, other.InputFiles) && ((InputFile is null && other.InputFile is null) || InputFile != null && InputFile.Equals(other.InputFile)) && ((InputFilename is null && other.InputFilename is null) || InputFilename != null && InputFilename.Equals(other.InputFilename)) && ((ResultFile is null && other.ResultFile is null) || ResultFile != null && ResultFile.Equals(other.ResultFile)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(OutputFiles, other.OutputFiles) && Retrieved == other.Retrieved && ((AutoReview is null && other.AutoReview is null) || AutoReview != null && AutoReview.Equals(other.AutoReview)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Retries, other.Retries) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Reviews, other.Reviews) && ReviewInProgress == other.ReviewInProgress;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubmission_Submission_Submission)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (DatasetId != null)
                {
                    hash ^= 397 * DatasetId.GetHashCode();
                }

                if (WorkflowId != null)
                {
                    hash ^= 397 * WorkflowId.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (UpdatedAt != null)
                {
                    hash ^= 397 * UpdatedAt.GetHashCode();
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (UpdatedBy != null)
                {
                    hash ^= 397 * UpdatedBy.GetHashCode();
                }

                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                if (Errors != null)
                {
                    hash ^= 397 * Errors.GetHashCode();
                }

                if (FilesDeleted != null)
                {
                    hash ^= 397 * FilesDeleted.GetHashCode();
                }

                if (InputFiles != null)
                {
                    foreach (var InputFiles_elm in InputFiles)
                    {
                        if (InputFiles_elm != null)
                        {
                            hash ^= 397 * InputFiles_elm.GetHashCode();
                        }
                    }
                }

                if (InputFile != null)
                {
                    hash ^= 397 * InputFile.GetHashCode();
                }

                if (InputFilename != null)
                {
                    hash ^= 397 * InputFilename.GetHashCode();
                }

                if (ResultFile != null)
                {
                    hash ^= 397 * ResultFile.GetHashCode();
                }

                if (OutputFiles != null)
                {
                    foreach (var OutputFiles_elm in OutputFiles)
                    {
                        if (OutputFiles_elm != null)
                        {
                            hash ^= 397 * OutputFiles_elm.GetHashCode();
                        }
                    }
                }

                if (Retrieved != null)
                {
                    hash ^= 397 * Retrieved.GetHashCode();
                }

                if (AutoReview != null)
                {
                    hash ^= 397 * AutoReview.GetHashCode();
                }

                if (Retries != null)
                {
                    foreach (var Retries_elm in Retries)
                    {
                        if (Retries_elm != null)
                        {
                            hash ^= 397 * Retries_elm.GetHashCode();
                        }
                    }
                }

                if (Reviews != null)
                {
                    foreach (var Reviews_elm in Reviews)
                    {
                        if (Reviews_elm != null)
                        {
                            hash ^= 397 * Reviews_elm.GetHashCode();
                        }
                    }
                }

                if (ReviewInProgress != null)
                {
                    hash ^= 397 * ReviewInProgress.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Each submission can have 1 or more (bundled) files associated with it
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_InputFiles_SubmissionFile : global::System.IEquatable<GetSubmission_Submission_InputFiles_SubmissionFile>, IGetSubmission_Submission_InputFiles_SubmissionFile
    {
        public GetSubmission_Submission_InputFiles_SubmissionFile(global::System.Int32? id, global::System.String? filepath, global::System.String? filename, global::IndicoV2.StrawberryShake.FileType? filetype, global::System.Int32? submissionId, global::System.Int32? fileSize, global::System.Int32? numPages)
        {
            Id = id;
            Filepath = filepath;
            Filename = filename;
            Filetype = filetype;
            SubmissionId = submissionId;
            FileSize = fileSize;
            NumPages = numPages;
        }

        /// <summary>
        /// Unique ID of this file
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// Name of original file
        /// </summary>
        public global::System.String? Filename
        {
            get;
        }

        /// <summary>
        /// Type of file
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileType? Filetype
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Size of file in bytes
        /// </summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        /// <summary>
        /// Number of pages in file
        /// </summary>
        public global::System.Int32? NumPages
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSubmission_Submission_InputFiles_SubmissionFile? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Filepath is null && other.Filepath is null) || Filepath != null && Filepath.Equals(other.Filepath)) && ((Filename is null && other.Filename is null) || Filename != null && Filename.Equals(other.Filename)) && ((Filetype is null && other.Filetype is null) || Filetype != null && Filetype.Equals(other.Filetype)) && SubmissionId == other.SubmissionId && FileSize == other.FileSize && NumPages == other.NumPages;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubmission_Submission_InputFiles_SubmissionFile)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Filepath != null)
                {
                    hash ^= 397 * Filepath.GetHashCode();
                }

                if (Filename != null)
                {
                    hash ^= 397 * Filename.GetHashCode();
                }

                if (Filetype != null)
                {
                    hash ^= 397 * Filetype.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (FileSize != null)
                {
                    hash ^= 397 * FileSize.GetHashCode();
                }

                if (NumPages != null)
                {
                    hash ^= 397 * NumPages.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Each submission can have 1 or more output files created during the workflow
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_OutputFiles_SubmissionOutput : global::System.IEquatable<GetSubmission_Submission_OutputFiles_SubmissionOutput>, IGetSubmission_Submission_OutputFiles_SubmissionOutput
    {
        public GetSubmission_Submission_OutputFiles_SubmissionOutput(global::System.Int32? id, global::System.String? filepath, global::System.Int32? submissionId, global::System.Int32? componentId, global::System.DateTimeOffset? createdAt)
        {
            Id = id;
            Filepath = filepath;
            SubmissionId = submissionId;
            ComponentId = componentId;
            CreatedAt = createdAt;
        }

        /// <summary>
        /// Unique ID of this output
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow component that made this file
        /// </summary>
        public global::System.Int32? ComponentId
        {
            get;
        }

        /// <summary>
        /// Datetime the output file was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSubmission_Submission_OutputFiles_SubmissionOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Filepath is null && other.Filepath is null) || Filepath != null && Filepath.Equals(other.Filepath)) && SubmissionId == other.SubmissionId && ComponentId == other.ComponentId && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubmission_Submission_OutputFiles_SubmissionOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Filepath != null)
                {
                    hash ^= 397 * Filepath.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (ComponentId != null)
                {
                    hash ^= 397 * ComponentId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_AutoReview_Review : global::System.IEquatable<GetSubmission_Submission_AutoReview_Review>, IGetSubmission_Submission_AutoReview_Review
    {
        public GetSubmission_Submission_AutoReview_Review(global::System.Int32? id, global::System.Int32? submissionId, global::System.String? createdAt, global::System.Int32? createdBy, global::System.String? startedAt, global::System.String? completedAt, global::System.Boolean? rejected, global::IndicoV2.StrawberryShake.ReviewType? reviewType, global::System.String? notes)
        {
            Id = id;
            SubmissionId = submissionId;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Rejected = rejected;
            ReviewType = reviewType;
            Notes = notes;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSubmission_Submission_AutoReview_Review? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && SubmissionId == other.SubmissionId && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreatedBy == other.CreatedBy && ((StartedAt is null && other.StartedAt is null) || StartedAt != null && StartedAt.Equals(other.StartedAt)) && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && Rejected == other.Rejected && ((ReviewType is null && other.ReviewType is null) || ReviewType != null && ReviewType.Equals(other.ReviewType)) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubmission_Submission_AutoReview_Review)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (StartedAt != null)
                {
                    hash ^= 397 * StartedAt.GetHashCode();
                }

                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                if (Rejected != null)
                {
                    hash ^= 397 * Rejected.GetHashCode();
                }

                if (ReviewType != null)
                {
                    hash ^= 397 * ReviewType.GetHashCode();
                }

                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_Retries_SubmissionRetry : global::System.IEquatable<GetSubmission_Submission_Retries_SubmissionRetry>, IGetSubmission_Submission_Retries_SubmissionRetry
    {
        public GetSubmission_Submission_Retries_SubmissionRetry(global::System.Int32? id, global::System.Int32? submissionId, global::System.String? previousErrors, global::IndicoV2.StrawberryShake.SubmissionStatus? previousStatus, global::System.String? retryErrors)
        {
            Id = id;
            SubmissionId = submissionId;
            PreviousErrors = previousErrors;
            PreviousStatus = previousStatus;
            RetryErrors = retryErrors;
        }

        /// <summary>
        /// Unique ID of the submission retry
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Unique ID of the associated submission
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Errors from previous submission
        /// </summary>
        public global::System.String? PreviousErrors
        {
            get;
        }

        /// <summary>
        /// Status of submission before it was retried
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? PreviousStatus
        {
            get;
        }

        /// <summary>
        /// Errors that occurred during the retrying of this submission
        /// </summary>
        public global::System.String? RetryErrors
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSubmission_Submission_Retries_SubmissionRetry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && SubmissionId == other.SubmissionId && ((PreviousErrors is null && other.PreviousErrors is null) || PreviousErrors != null && PreviousErrors.Equals(other.PreviousErrors)) && ((PreviousStatus is null && other.PreviousStatus is null) || PreviousStatus != null && PreviousStatus.Equals(other.PreviousStatus)) && ((RetryErrors is null && other.RetryErrors is null) || RetryErrors != null && RetryErrors.Equals(other.RetryErrors));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubmission_Submission_Retries_SubmissionRetry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (PreviousErrors != null)
                {
                    hash ^= 397 * PreviousErrors.GetHashCode();
                }

                if (PreviousStatus != null)
                {
                    hash ^= 397 * PreviousStatus.GetHashCode();
                }

                if (RetryErrors != null)
                {
                    hash ^= 397 * RetryErrors.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_Reviews_Review : global::System.IEquatable<GetSubmission_Submission_Reviews_Review>, IGetSubmission_Submission_Reviews_Review
    {
        public GetSubmission_Submission_Reviews_Review(global::System.Int32? id, global::System.Int32? submissionId, global::System.String? createdAt, global::System.Int32? createdBy, global::System.String? startedAt, global::System.String? completedAt, global::System.Boolean? rejected, global::IndicoV2.StrawberryShake.ReviewType? reviewType, global::System.String? notes)
        {
            Id = id;
            SubmissionId = submissionId;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Rejected = rejected;
            ReviewType = reviewType;
            Notes = notes;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetSubmission_Submission_Reviews_Review? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && SubmissionId == other.SubmissionId && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreatedBy == other.CreatedBy && ((StartedAt is null && other.StartedAt is null) || StartedAt != null && StartedAt.Equals(other.StartedAt)) && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && Rejected == other.Rejected && ((ReviewType is null && other.ReviewType is null) || ReviewType != null && ReviewType.Equals(other.ReviewType)) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSubmission_Submission_Reviews_Review)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (StartedAt != null)
                {
                    hash ^= 397 * StartedAt.GetHashCode();
                }

                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                if (Rejected != null)
                {
                    hash ^= 397 * Rejected.GetHashCode();
                }

                if (ReviewType != null)
                {
                    hash ^= 397 * ReviewType.GetHashCode();
                }

                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmissionResult
    {
        public global::IndicoV2.StrawberryShake.IGetSubmission_Submission? Submission
        {
            get;
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission
    {
        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// ID of the dataset associated with the submission
        /// </summary>
        public global::System.Int32? DatasetId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow associated with the submission
        /// </summary>
        public global::System.Int32? WorkflowId
        {
            get;
        }

        /// <summary>
        /// Current status of the submission process
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Datetime the submission was updated
        /// </summary>
        public global::System.DateTimeOffset? UpdatedAt
        {
            get;
        }

        /// <summary>
        /// ID of the user who created the submission
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// ID of the user who updated the submission
        /// </summary>
        public global::System.Int32? UpdatedBy
        {
            get;
        }

        /// <summary>
        /// Datetime the submission reached a completed state
        /// </summary>
        public global::System.DateTimeOffset? CompletedAt
        {
            get;
        }

        /// <summary>
        /// Errors occurred during this submission
        /// </summary>
        public global::System.String? Errors
        {
            get;
        }

        /// <summary>
        /// Submission files have been deleted from file store
        /// </summary>
        public global::System.Boolean? FilesDeleted
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_InputFiles?>? InputFiles
        {
            get;
        }

        /// <summary>
        /// Local URL to first stored input
        /// </summary>
        public global::System.String? InputFile
        {
            get;
        }

        /// <summary>
        /// Original name of first file
        /// </summary>
        public global::System.String? InputFilename
        {
            get;
        }

        /// <summary>
        /// Local URL to most recently stored output
        /// </summary>
        public global::System.String? ResultFile
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_OutputFiles?>? OutputFiles
        {
            get;
        }

        /// <summary>
        /// Submission has been marked as having been retrieved
        /// </summary>
        public global::System.Boolean? Retrieved
        {
            get;
        }

        /// <summary>
        /// Latest auto review for submission
        /// </summary>
        public global::IndicoV2.StrawberryShake.IGetSubmission_Submission_AutoReview? AutoReview
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Retries?>? Retries
        {
            get;
        }

        /// <summary>
        /// completed reviews of this submission, without changes
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Reviews?>? Reviews
        {
            get;
        }

        /// <summary>
        /// True if the submission is being actively reviewed
        /// </summary>
        public global::System.Boolean? ReviewInProgress
        {
            get;
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_Submission : IGetSubmission_Submission
    {
    }

    /// <summary>
    /// Each submission can have 1 or more (bundled) files associated with it
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_InputFiles
    {
        /// <summary>
        /// Unique ID of this file
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// Name of original file
        /// </summary>
        public global::System.String? Filename
        {
            get;
        }

        /// <summary>
        /// Type of file
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileType? Filetype
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Size of file in bytes
        /// </summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        /// <summary>
        /// Number of pages in file
        /// </summary>
        public global::System.Int32? NumPages
        {
            get;
        }
    }

    /// <summary>
    /// Each submission can have 1 or more (bundled) files associated with it
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_InputFiles_SubmissionFile : IGetSubmission_Submission_InputFiles
    {
    }

    /// <summary>
    /// Each submission can have 1 or more output files created during the workflow
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_OutputFiles
    {
        /// <summary>
        /// Unique ID of this output
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Local URL to stored input
        /// </summary>
        public global::System.String? Filepath
        {
            get;
        }

        /// <summary>
        /// ID of the submission this file is associated with
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// ID of the workflow component that made this file
        /// </summary>
        public global::System.Int32? ComponentId
        {
            get;
        }

        /// <summary>
        /// Datetime the output file was created
        /// </summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }
    }

    /// <summary>
    /// Each submission can have 1 or more output files created during the workflow
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_OutputFiles_SubmissionOutput : IGetSubmission_Submission_OutputFiles
    {
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_AutoReview
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_AutoReview_Review : IGetSubmission_Submission_AutoReview
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_Retries
    {
        /// <summary>
        /// Unique ID of the submission retry
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Unique ID of the associated submission
        /// </summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// Errors from previous submission
        /// </summary>
        public global::System.String? PreviousErrors
        {
            get;
        }

        /// <summary>
        /// Status of submission before it was retried
        /// </summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? PreviousStatus
        {
            get;
        }

        /// <summary>
        /// Errors that occurred during the retrying of this submission
        /// </summary>
        public global::System.String? RetryErrors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_Retries_SubmissionRetry : IGetSubmission_Submission_Retries
    {
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_Reviews
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmission_Submission_Reviews_Review : IGetSubmission_Submission_Reviews
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CreateSubmissionResultsResult : global::System.IEquatable<CreateSubmissionResultsResult>, ICreateSubmissionResultsResult
    {
        public CreateSubmissionResultsResult(global::IndicoV2.StrawberryShake.ICreateSubmissionResults_SubmissionResults? submissionResults)
        {
            SubmissionResults = submissionResults;
        }

        public global::IndicoV2.StrawberryShake.ICreateSubmissionResults_SubmissionResults? SubmissionResults
        {
            get;
        }

        public virtual global::System.Boolean Equals(CreateSubmissionResultsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SubmissionResults is null && other.SubmissionResults is null) || SubmissionResults != null && SubmissionResults.Equals(other.SubmissionResults)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateSubmissionResultsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SubmissionResults != null)
                {
                    hash ^= 397 * SubmissionResults.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CreateSubmissionResults_SubmissionResults_SubmissionResults : global::System.IEquatable<CreateSubmissionResults_SubmissionResults_SubmissionResults>, ICreateSubmissionResults_SubmissionResults_SubmissionResults
    {
        public CreateSubmissionResults_SubmissionResults_SubmissionResults(global::System.String? jobId)
        {
            JobId = jobId;
        }

        public global::System.String? JobId
        {
            get;
        }

        public virtual global::System.Boolean Equals(CreateSubmissionResults_SubmissionResults_SubmissionResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((JobId is null && other.JobId is null) || JobId != null && JobId.Equals(other.JobId)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateSubmissionResults_SubmissionResults_SubmissionResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobId != null)
                {
                    hash ^= 397 * JobId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ICreateSubmissionResultsResult
    {
        public global::IndicoV2.StrawberryShake.ICreateSubmissionResults_SubmissionResults? SubmissionResults
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ICreateSubmissionResults_SubmissionResults
    {
        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ICreateSubmissionResults_SubmissionResults_SubmissionResults : ICreateSubmissionResults_SubmissionResults
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatus_1Result : global::System.IEquatable<JobStatus_1Result>, IJobStatusResult
    {
        public JobStatus_1Result(global::IndicoV2.StrawberryShake.IJobStatus_Job? job)
        {
            Job = job;
        }

        public global::IndicoV2.StrawberryShake.IJobStatus_Job? Job
        {
            get;
        }

        public virtual global::System.Boolean Equals(JobStatus_1Result? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Job is null && other.Job is null) || Job != null && Job.Equals(other.Job)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((JobStatus_1Result)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Job != null)
                {
                    hash ^= 397 * Job.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatus_Job_Job : global::System.IEquatable<JobStatus_Job_Job>, IJobStatus_Job_Job
    {
        public JobStatus_Job_Job(global::System.String? id, global::System.Boolean? ready, global::IndicoV2.StrawberryShake.JobStatus? status, global::System.String? result)
        {
            Id = id;
            Ready = ready;
            Status = status;
            Result = result;
        }

        public global::System.String? Id
        {
            get;
        }

        public global::System.Boolean? Ready
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.JobStatus? Status
        {
            get;
        }

        public global::System.String? Result
        {
            get;
        }

        public virtual global::System.Boolean Equals(JobStatus_Job_Job? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && Ready == other.Ready && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((Result is null && other.Result is null) || Result != null && Result.Equals(other.Result));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((JobStatus_Job_Job)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Ready != null)
                {
                    hash ^= 397 * Ready.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (Result != null)
                {
                    hash ^= 397 * Result.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IJobStatusResult
    {
        public global::IndicoV2.StrawberryShake.IJobStatus_Job? Job
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IJobStatus_Job
    {
        public global::System.String? Id
        {
            get;
        }

        public global::System.Boolean? Ready
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.JobStatus? Status
        {
            get;
        }

        public global::System.String? Result
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IJobStatus_Job_Job : IJobStatus_Job
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatusResult : global::System.IEquatable<DatasetUploadStatusResult>, IDatasetUploadStatusResult
    {
        public DatasetUploadStatusResult(global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset? dataset)
        {
            Dataset = dataset;
        }

        /// <summary>
        /// Get a single dataset by id
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset? Dataset
        {
            get;
        }

        public virtual global::System.Boolean Equals(DatasetUploadStatusResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Dataset is null && other.Dataset is null) || Dataset != null && Dataset.Equals(other.Dataset)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DatasetUploadStatusResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Dataset != null)
                {
                    hash ^= 397 * Dataset.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatus_Dataset_Dataset : global::System.IEquatable<DatasetUploadStatus_Dataset_Dataset>, IDatasetUploadStatus_Dataset_Dataset
    {
        public DatasetUploadStatus_Dataset_Dataset(global::System.Int32? id, global::IndicoV2.StrawberryShake.DatasetStatus? status, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset_Files?>? files)
        {
            Id = id;
            Status = status;
            Files = files;
        }

        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Status of this dataset which allows it to be used to create workflows, etc
        /// </summary>
        public global::IndicoV2.StrawberryShake.DatasetStatus? Status
        {
            get;
        }

        /// <summary>
        /// All the source files added to this dataset
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset_Files?>? Files
        {
            get;
        }

        public virtual global::System.Boolean Equals(DatasetUploadStatus_Dataset_Dataset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Files, other.Files);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DatasetUploadStatus_Dataset_Dataset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (Files != null)
                {
                    foreach (var Files_elm in Files)
                    {
                        if (Files_elm != null)
                        {
                            hash ^= 397 * Files_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents 1 source file within a Dataset
    /// May be a CSV, which other DataFiles can spawn from
    /// or an image or pdf, etc, which is what models and workflows
    /// will use for training data
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatus_Dataset_Files_DataFile : global::System.IEquatable<DatasetUploadStatus_Dataset_Files_DataFile>, IDatasetUploadStatus_Dataset_Files_DataFile
    {
        public DatasetUploadStatus_Dataset_Files_DataFile(global::System.Int32? id, global::System.String? name, global::System.Boolean? deleted, global::System.Int32? fileSize, global::System.String? rainbowUrl, global::IndicoV2.StrawberryShake.FileType? fileType, global::System.String? fileHash, global::IndicoV2.StrawberryShake.FileStatus? status, global::System.String? statusMeta, global::IndicoV2.StrawberryShake.FileFailureType? failureType)
        {
            Id = id;
            Name = name;
            Deleted = deleted;
            FileSize = fileSize;
            RainbowUrl = rainbowUrl;
            FileType = fileType;
            FileHash = fileHash;
            Status = status;
            StatusMeta = statusMeta;
            FailureType = failureType;
        }

        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of the uploaded file
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// This datafile was deleted from the dataset
        /// </summary>
        public global::System.Boolean? Deleted
        {
            get;
        }

        /// <summary>
        /// Size of the datafile in bytes
        /// </summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        /// <summary>
        /// Indico URL to the source file
        /// </summary>
        public global::System.String? RainbowUrl
        {
            get;
        }

        /// <summary>
        /// Type of the datafile - UNKNOWN if not processed yet
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileType? FileType
        {
            get;
        }

        /// <summary>
        /// Redundant representation of the rainbow_url
        /// </summary>
        public global::System.String? FileHash
        {
            get;
        }

        /// <summary>
        /// Status of the file as it's being processed for the dataset
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileStatus? Status
        {
            get;
        }

        /// <summary>
        /// More information about the current status, including failure information
        /// </summary>
        public global::System.String? StatusMeta
        {
            get;
        }

        /// <summary>
        /// If this Datafile failed processing, this is why
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileFailureType? FailureType
        {
            get;
        }

        public virtual global::System.Boolean Equals(DatasetUploadStatus_Dataset_Files_DataFile? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && Deleted == other.Deleted && FileSize == other.FileSize && ((RainbowUrl is null && other.RainbowUrl is null) || RainbowUrl != null && RainbowUrl.Equals(other.RainbowUrl)) && ((FileType is null && other.FileType is null) || FileType != null && FileType.Equals(other.FileType)) && ((FileHash is null && other.FileHash is null) || FileHash != null && FileHash.Equals(other.FileHash)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((StatusMeta is null && other.StatusMeta is null) || StatusMeta != null && StatusMeta.Equals(other.StatusMeta)) && ((FailureType is null && other.FailureType is null) || FailureType != null && FailureType.Equals(other.FailureType));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DatasetUploadStatus_Dataset_Files_DataFile)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Deleted != null)
                {
                    hash ^= 397 * Deleted.GetHashCode();
                }

                if (FileSize != null)
                {
                    hash ^= 397 * FileSize.GetHashCode();
                }

                if (RainbowUrl != null)
                {
                    hash ^= 397 * RainbowUrl.GetHashCode();
                }

                if (FileType != null)
                {
                    hash ^= 397 * FileType.GetHashCode();
                }

                if (FileHash != null)
                {
                    hash ^= 397 * FileHash.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (StatusMeta != null)
                {
                    hash ^= 397 * StatusMeta.GetHashCode();
                }

                if (FailureType != null)
                {
                    hash ^= 397 * FailureType.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDatasetUploadStatusResult
    {
        /// <summary>
        /// Get a single dataset by id
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset? Dataset
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDatasetUploadStatus_Dataset
    {
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Status of this dataset which allows it to be used to create workflows, etc
        /// </summary>
        public global::IndicoV2.StrawberryShake.DatasetStatus? Status
        {
            get;
        }

        /// <summary>
        /// All the source files added to this dataset
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset_Files?>? Files
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDatasetUploadStatus_Dataset_Dataset : IDatasetUploadStatus_Dataset
    {
    }

    /// <summary>
    /// Represents 1 source file within a Dataset
    /// May be a CSV, which other DataFiles can spawn from
    /// or an image or pdf, etc, which is what models and workflows
    /// will use for training data
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDatasetUploadStatus_Dataset_Files
    {
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of the uploaded file
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// This datafile was deleted from the dataset
        /// </summary>
        public global::System.Boolean? Deleted
        {
            get;
        }

        /// <summary>
        /// Size of the datafile in bytes
        /// </summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        /// <summary>
        /// Indico URL to the source file
        /// </summary>
        public global::System.String? RainbowUrl
        {
            get;
        }

        /// <summary>
        /// Type of the datafile - UNKNOWN if not processed yet
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileType? FileType
        {
            get;
        }

        /// <summary>
        /// Redundant representation of the rainbow_url
        /// </summary>
        public global::System.String? FileHash
        {
            get;
        }

        /// <summary>
        /// Status of the file as it's being processed for the dataset
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileStatus? Status
        {
            get;
        }

        /// <summary>
        /// More information about the current status, including failure information
        /// </summary>
        public global::System.String? StatusMeta
        {
            get;
        }

        /// <summary>
        /// If this Datafile failed processing, this is why
        /// </summary>
        public global::IndicoV2.StrawberryShake.FileFailureType? FailureType
        {
            get;
        }
    }

    /// <summary>
    /// Represents 1 source file within a Dataset
    /// May be a CSV, which other DataFiles can spawn from
    /// or an image or pdf, etc, which is what models and workflows
    /// will use for training data
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDatasetUploadStatus_Dataset_Files_DataFile : IDatasetUploadStatus_Dataset_Files
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFilesResult : global::System.IEquatable<DataSetAddFilesResult>, IDataSetAddFilesResult
    {
        public DataSetAddFilesResult(global::IndicoV2.StrawberryShake.IDataSetAddFiles_AddDatasetFiles? addDatasetFiles)
        {
            AddDatasetFiles = addDatasetFiles;
        }

        /// <summary>
        /// Add some uploaded files of any type to the dataset. We recommend
        /// autoprocess=True, otherwise AddDataFiles or AddDataCSV should be
        /// called after the files are added
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDataSetAddFiles_AddDatasetFiles? AddDatasetFiles
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetAddFilesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddDatasetFiles is null && other.AddDatasetFiles is null) || AddDatasetFiles != null && AddDatasetFiles.Equals(other.AddDatasetFiles)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetAddFilesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddDatasetFiles != null)
                {
                    hash ^= 397 * AddDatasetFiles.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFiles_AddDatasetFiles_Dataset : global::System.IEquatable<DataSetAddFiles_AddDatasetFiles_Dataset>, IDataSetAddFiles_AddDatasetFiles_Dataset
    {
        public DataSetAddFiles_AddDatasetFiles_Dataset(global::System.Int32? id, global::IndicoV2.StrawberryShake.DatasetStatus? status)
        {
            Id = id;
            Status = status;
        }

        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Status of this dataset which allows it to be used to create workflows, etc
        /// </summary>
        public global::IndicoV2.StrawberryShake.DatasetStatus? Status
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetAddFiles_AddDatasetFiles_Dataset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetAddFiles_AddDatasetFiles_Dataset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetAddFilesResult
    {
        /// <summary>
        /// Add some uploaded files of any type to the dataset. We recommend
        /// autoprocess=True, otherwise AddDataFiles or AddDataCSV should be
        /// called after the files are added
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDataSetAddFiles_AddDatasetFiles? AddDatasetFiles
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetAddFiles_AddDatasetFiles
    {
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Status of this dataset which allows it to be used to create workflows, etc
        /// </summary>
        public global::IndicoV2.StrawberryShake.DatasetStatus? Status
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetAddFiles_AddDatasetFiles_Dataset : IDataSetAddFiles_AddDatasetFiles
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFilesResult : global::System.IEquatable<DataSetProcessFilesResult>, IDataSetProcessFilesResult
    {
        public DataSetProcessFilesResult(global::IndicoV2.StrawberryShake.IDataSetProcessFiles_AddDataFiles? addDataFiles)
        {
            AddDataFiles = addDataFiles;
        }

        /// <summary>
        /// Start processing recently added non-CSV data files to the dataset
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDataSetProcessFiles_AddDataFiles? AddDataFiles
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetProcessFilesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddDataFiles is null && other.AddDataFiles is null) || AddDataFiles != null && AddDataFiles.Equals(other.AddDataFiles)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetProcessFilesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddDataFiles != null)
                {
                    hash ^= 397 * AddDataFiles.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFiles_AddDataFiles_Dataset : global::System.IEquatable<DataSetProcessFiles_AddDataFiles_Dataset>, IDataSetProcessFiles_AddDataFiles_Dataset
    {
        public DataSetProcessFiles_AddDataFiles_Dataset(global::System.Int32? id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetProcessFiles_AddDataFiles_Dataset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetProcessFiles_AddDataFiles_Dataset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessFilesResult
    {
        /// <summary>
        /// Start processing recently added non-CSV data files to the dataset
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDataSetProcessFiles_AddDataFiles? AddDataFiles
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessFiles_AddDataFiles
    {
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessFiles_AddDataFiles_Dataset : IDataSetProcessFiles_AddDataFiles
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsvResult : global::System.IEquatable<DataSetProcessCsvResult>, IDataSetProcessCsvResult
    {
        public DataSetProcessCsvResult(global::IndicoV2.StrawberryShake.IDataSetProcessCsv_AddDataCsv? addDataCsv)
        {
            AddDataCsv = addDataCsv;
        }

        /// <summary>
        /// Start processing recently added CSV data files to the dataset
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDataSetProcessCsv_AddDataCsv? AddDataCsv
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetProcessCsvResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddDataCsv is null && other.AddDataCsv is null) || AddDataCsv != null && AddDataCsv.Equals(other.AddDataCsv)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetProcessCsvResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddDataCsv != null)
                {
                    hash ^= 397 * AddDataCsv.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsv_AddDataCsv_Dataset : global::System.IEquatable<DataSetProcessCsv_AddDataCsv_Dataset>, IDataSetProcessCsv_AddDataCsv_Dataset
    {
        public DataSetProcessCsv_AddDataCsv_Dataset(global::System.Int32? id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetProcessCsv_AddDataCsv_Dataset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetProcessCsv_AddDataCsv_Dataset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessCsvResult
    {
        /// <summary>
        /// Start processing recently added CSV data files to the dataset
        /// </summary>
        public global::IndicoV2.StrawberryShake.IDataSetProcessCsv_AddDataCsv? AddDataCsv
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessCsv_AddDataCsv
    {
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessCsv_AddDataCsv_Dataset : IDataSetProcessCsv_AddDataCsv
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsResult : global::System.IEquatable<DataSetGetDatasetsResult>, IDataSetGetDatasetsResult
    {
        public DataSetGetDatasetsResult(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasets_Datasets?>? datasets)
        {
            Datasets = datasets;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasets_Datasets?>? Datasets
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetGetDatasetsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Datasets, other.Datasets));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetGetDatasetsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Datasets != null)
                {
                    foreach (var Datasets_elm in Datasets)
                    {
                        if (Datasets_elm != null)
                        {
                            hash ^= 397 * Datasets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasets_Datasets_Dataset : global::System.IEquatable<DataSetGetDatasets_Datasets_Dataset>, IDataSetGetDatasets_Datasets_Dataset
    {
        public DataSetGetDatasets_Datasets_Dataset(global::System.Int32? id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetGetDatasets_Datasets_Dataset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetGetDatasets_Datasets_Dataset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasets_Datasets?>? Datasets
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasets_Datasets
    {
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasets_Datasets_Dataset : IDataSetGetDatasets_Datasets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFullResult : global::System.IEquatable<DataSetGetDatasetsFullResult>, IDataSetGetDatasetsFullResult
    {
        public DataSetGetDatasetsFullResult(global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage? datasetsPage)
        {
            DatasetsPage = datasetsPage;
        }

        public global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage? DatasetsPage
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetGetDatasetsFullResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DatasetsPage is null && other.DatasetsPage is null) || DatasetsPage != null && DatasetsPage.Equals(other.DatasetsPage)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetGetDatasetsFullResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DatasetsPage != null)
                {
                    hash ^= 397 * DatasetsPage.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Paginated result object for listing datasets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFull_DatasetsPage_DatasetPage : global::System.IEquatable<DataSetGetDatasetsFull_DatasetsPage_DatasetPage>, IDataSetGetDatasetsFull_DatasetsPage_DatasetPage
    {
        public DataSetGetDatasetsFull_DatasetsPage_DatasetPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets?>? datasets)
        {
            Datasets = datasets;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets?>? Datasets
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetGetDatasetsFull_DatasetsPage_DatasetPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Datasets, other.Datasets));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetGetDatasetsFull_DatasetsPage_DatasetPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Datasets != null)
                {
                    foreach (var Datasets_elm in Datasets)
                    {
                        if (Datasets_elm != null)
                        {
                            hash ^= 397 * Datasets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset : global::System.IEquatable<DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset>, IDataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset
    {
        public DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset(global::System.Int32? id, global::System.String? name, global::IndicoV2.StrawberryShake.DatasetStatus? status, global::System.Int32? rowCount, global::System.Int32? numModelGroups, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups?>? modelGroups)
        {
            Id = id;
            Name = name;
            Status = status;
            RowCount = rowCount;
            NumModelGroups = numModelGroups;
            ModelGroups = modelGroups;
        }

        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// Status of this dataset which allows it to be used to create workflows, etc
        /// </summary>
        public global::IndicoV2.StrawberryShake.DatasetStatus? Status
        {
            get;
        }

        /// <summary>
        /// Number of rows in the dataset that can be used in model training
        /// </summary>
        public global::System.Int32? RowCount
        {
            get;
        }

        /// <summary>
        /// Number of model groups belonging to this Dataset
        /// </summary>
        public global::System.Int32? NumModelGroups
        {
            get;
        }

        /// <summary>
        /// All model groups that were created from this dataset
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups?>? ModelGroups
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && RowCount == other.RowCount && NumModelGroups == other.NumModelGroups && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ModelGroups, other.ModelGroups);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (RowCount != null)
                {
                    hash ^= 397 * RowCount.GetHashCode();
                }

                if (NumModelGroups != null)
                {
                    hash ^= 397 * NumModelGroups.GetHashCode();
                }

                if (ModelGroups != null)
                {
                    foreach (var ModelGroups_elm in ModelGroups)
                    {
                        if (ModelGroups_elm != null)
                        {
                            hash ^= 397 * ModelGroups_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup : global::System.IEquatable<DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup>, IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup
    {
        public DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup(global::System.Int32? id)
        {
            Id = id;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public virtual global::System.Boolean Equals(DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFullResult
    {
        public global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage? DatasetsPage
        {
            get;
        }
    }

    /// <summary>
    /// Paginated result object for listing datasets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFull_DatasetsPage
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets?>? Datasets
        {
            get;
        }
    }

    /// <summary>
    /// Paginated result object for listing datasets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFull_DatasetsPage_DatasetPage : IDataSetGetDatasetsFull_DatasetsPage
    {
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFull_DatasetsPage_Datasets
    {
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// Name of this dataset
        /// </summary>
        public global::System.String? Name
        {
            get;
        }

        /// <summary>
        /// Status of this dataset which allows it to be used to create workflows, etc
        /// </summary>
        public global::IndicoV2.StrawberryShake.DatasetStatus? Status
        {
            get;
        }

        /// <summary>
        /// Number of rows in the dataset that can be used in model training
        /// </summary>
        public global::System.Int32? RowCount
        {
            get;
        }

        /// <summary>
        /// Number of model groups belonging to this Dataset
        /// </summary>
        public global::System.Int32? NumModelGroups
        {
            get;
        }

        /// <summary>
        /// All model groups that were created from this dataset
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups?>? ModelGroups
        {
            get;
        }
    }

    /// <summary>
    /// This is the beginning of working with Indico! A dataset
    /// represents all the possible training data you'd like to work with
    /// to build one or more workflows. Includes users you'd like to work
    /// on the dataset with, the source datafiles, any labelsets for the files,
    /// etc
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset : IDataSetGetDatasetsFull_DatasetsPage_Datasets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups
    {
        public global::System.Int32? Id
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup : IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewResult : global::System.IEquatable<SubmitReviewResult>, ISubmitReviewResult
    {
        public SubmitReviewResult(global::IndicoV2.StrawberryShake.ISubmitReview_SubmitAutoReview? submitAutoReview)
        {
            SubmitAutoReview = submitAutoReview;
        }

        public global::IndicoV2.StrawberryShake.ISubmitReview_SubmitAutoReview? SubmitAutoReview
        {
            get;
        }

        public virtual global::System.Boolean Equals(SubmitReviewResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SubmitAutoReview is null && other.SubmitAutoReview is null) || SubmitAutoReview != null && SubmitAutoReview.Equals(other.SubmitAutoReview)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitReviewResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SubmitAutoReview != null)
                {
                    hash ^= 397 * SubmitAutoReview.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReview_SubmitAutoReview_SubmitAutoReview : global::System.IEquatable<SubmitReview_SubmitAutoReview_SubmitAutoReview>, ISubmitReview_SubmitAutoReview_SubmitAutoReview
    {
        public SubmitReview_SubmitAutoReview_SubmitAutoReview(global::System.String? jobId)
        {
            JobId = jobId;
        }

        public global::System.String? JobId
        {
            get;
        }

        public virtual global::System.Boolean Equals(SubmitReview_SubmitAutoReview_SubmitAutoReview? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((JobId is null && other.JobId is null) || JobId != null && JobId.Equals(other.JobId)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitReview_SubmitAutoReview_SubmitAutoReview)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobId != null)
                {
                    hash ^= 397 * JobId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReviewResult
    {
        public global::IndicoV2.StrawberryShake.ISubmitReview_SubmitAutoReview? SubmitAutoReview
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReview_SubmitAutoReview
    {
        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReview_SubmitAutoReview_SubmitAutoReview : ISubmitReview_SubmitAutoReview
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewForceCompleteResult : global::System.IEquatable<SubmitReviewForceCompleteResult>, ISubmitReviewForceCompleteResult
    {
        public SubmitReviewForceCompleteResult(global::IndicoV2.StrawberryShake.ISubmitReviewForceComplete_SubmitAutoReview? submitAutoReview)
        {
            SubmitAutoReview = submitAutoReview;
        }

        public global::IndicoV2.StrawberryShake.ISubmitReviewForceComplete_SubmitAutoReview? SubmitAutoReview
        {
            get;
        }

        public virtual global::System.Boolean Equals(SubmitReviewForceCompleteResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SubmitAutoReview is null && other.SubmitAutoReview is null) || SubmitAutoReview != null && SubmitAutoReview.Equals(other.SubmitAutoReview)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitReviewForceCompleteResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SubmitAutoReview != null)
                {
                    hash ^= 397 * SubmitAutoReview.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview : global::System.IEquatable<SubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview>, ISubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview
    {
        public SubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview(global::System.String? jobId)
        {
            JobId = jobId;
        }

        public global::System.String? JobId
        {
            get;
        }

        public virtual global::System.Boolean Equals(SubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((JobId is null && other.JobId is null) || JobId != null && JobId.Equals(other.JobId)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobId != null)
                {
                    hash ^= 397 * JobId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReviewForceCompleteResult
    {
        public global::IndicoV2.StrawberryShake.ISubmitReviewForceComplete_SubmitAutoReview? SubmitAutoReview
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReviewForceComplete_SubmitAutoReview
    {
        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview : ISubmitReviewForceComplete_SubmitAutoReview
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviewsResult : global::System.IEquatable<GetReviewsResult>, IGetReviewsResult
    {
        public GetReviewsResult(global::IndicoV2.StrawberryShake.IGetReviews_Submission? submission)
        {
            Submission = submission;
        }

        public global::IndicoV2.StrawberryShake.IGetReviews_Submission? Submission
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetReviewsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Submission is null && other.Submission is null) || Submission != null && Submission.Equals(other.Submission)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReviewsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Submission != null)
                {
                    hash ^= 397 * Submission.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviews_Submission_Submission : global::System.IEquatable<GetReviews_Submission_Submission>, IGetReviews_Submission_Submission
    {
        public GetReviews_Submission_Submission(global::System.Int32? id, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetReviews_Submission_Reviews?>? reviews)
        {
            Id = id;
            Reviews = reviews;
        }

        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// completed reviews of this submission, without changes
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetReviews_Submission_Reviews?>? Reviews
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetReviews_Submission_Submission? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Reviews, other.Reviews);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReviews_Submission_Submission)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Reviews != null)
                {
                    foreach (var Reviews_elm in Reviews)
                    {
                        if (Reviews_elm != null)
                        {
                            hash ^= 397 * Reviews_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviews_Submission_Reviews_Review : global::System.IEquatable<GetReviews_Submission_Reviews_Review>, IGetReviews_Submission_Reviews_Review
    {
        public GetReviews_Submission_Reviews_Review(global::System.Int32? id, global::System.Int32? submissionId, global::System.String? createdAt, global::System.Int32? createdBy, global::System.String? startedAt, global::System.String? completedAt, global::System.Boolean? rejected, global::IndicoV2.StrawberryShake.ReviewType? reviewType, global::System.String? notes, global::System.String? changes)
        {
            Id = id;
            SubmissionId = submissionId;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Rejected = rejected;
            ReviewType = reviewType;
            Notes = notes;
            Changes = changes;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }

        /// <summary>
        /// Changes for this review. This field is not generally available. Use submission result files instead
        /// </summary>
        public global::System.String? Changes
        {
            get;
        }

        public virtual global::System.Boolean Equals(GetReviews_Submission_Reviews_Review? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && SubmissionId == other.SubmissionId && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && CreatedBy == other.CreatedBy && ((StartedAt is null && other.StartedAt is null) || StartedAt != null && StartedAt.Equals(other.StartedAt)) && ((CompletedAt is null && other.CompletedAt is null) || CompletedAt != null && CompletedAt.Equals(other.CompletedAt)) && Rejected == other.Rejected && ((ReviewType is null && other.ReviewType is null) || ReviewType != null && ReviewType.Equals(other.ReviewType)) && ((Notes is null && other.Notes is null) || Notes != null && Notes.Equals(other.Notes)) && ((Changes is null && other.Changes is null) || Changes != null && Changes.Equals(other.Changes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetReviews_Submission_Reviews_Review)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (SubmissionId != null)
                {
                    hash ^= 397 * SubmissionId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (StartedAt != null)
                {
                    hash ^= 397 * StartedAt.GetHashCode();
                }

                if (CompletedAt != null)
                {
                    hash ^= 397 * CompletedAt.GetHashCode();
                }

                if (Rejected != null)
                {
                    hash ^= 397 * Rejected.GetHashCode();
                }

                if (ReviewType != null)
                {
                    hash ^= 397 * ReviewType.GetHashCode();
                }

                if (Notes != null)
                {
                    hash ^= 397 * Notes.GetHashCode();
                }

                if (Changes != null)
                {
                    hash ^= 397 * Changes.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetReviewsResult
    {
        public global::IndicoV2.StrawberryShake.IGetReviews_Submission? Submission
        {
            get;
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetReviews_Submission
    {
        /// <summary>
        /// Unique ID of the submission
        /// </summary>
        public global::System.Int32? Id
        {
            get;
        }

        /// <summary>
        /// completed reviews of this submission, without changes
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetReviews_Submission_Reviews?>? Reviews
        {
            get;
        }
    }

    /// <summary>
    /// Object containing data associated with a workflow submission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetReviews_Submission_Submission : IGetReviews_Submission
    {
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetReviews_Submission_Reviews
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        /// <summary>
        /// When this user first opened the file. See started_at as well
        /// </summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        /// <summary>
        /// Reviewer id
        /// </summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        /// <summary>
        /// When this review was started. Differs from created_at because a reviewer may restart their review at any time
        /// </summary>
        public global::System.String? StartedAt
        {
            get;
        }

        /// <summary>
        /// When this review was completed by the reviewer
        /// </summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }

        /// <summary>
        /// Changes for this review. This field is not generally available. Use submission result files instead
        /// </summary>
        public global::System.String? Changes
        {
            get;
        }
    }

    /// <summary>
    /// Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetReviews_Submission_Reviews_Review : IGetReviews_Submission_Reviews
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQueryResult : global::System.IEquatable<ModelGroupQueryResult>, IModelGroupQueryResult
    {
        public ModelGroupQueryResult(global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups? modelGroups)
        {
            ModelGroups = modelGroups;
        }

        public global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups? ModelGroups
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupQueryResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ModelGroups is null && other.ModelGroups is null) || ModelGroups != null && ModelGroups.Equals(other.ModelGroups)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupQueryResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ModelGroups != null)
                {
                    hash ^= 397 * ModelGroups.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQuery_ModelGroups_ModelGroupPage : global::System.IEquatable<ModelGroupQuery_ModelGroups_ModelGroupPage>, IModelGroupQuery_ModelGroups_ModelGroupPage
    {
        public ModelGroupQuery_ModelGroups_ModelGroupPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups?>? modelGroups)
        {
            ModelGroups = modelGroups;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups?>? ModelGroups
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupQuery_ModelGroups_ModelGroupPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ModelGroups, other.ModelGroups));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupQuery_ModelGroups_ModelGroupPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ModelGroups != null)
                {
                    foreach (var ModelGroups_elm in ModelGroups)
                    {
                        if (ModelGroups_elm != null)
                        {
                            hash ^= 397 * ModelGroups_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup : global::System.IEquatable<ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup>, IModelGroupQuery_ModelGroups_ModelGroups_ModelGroup
    {
        public ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup(global::System.Int32? id, global::System.String? name, global::IndicoV2.StrawberryShake.ModelStatus? status, global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel? selectedModel)
        {
            Id = id;
            Name = name;
            Status = status;
            SelectedModel = selectedModel;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel? SelectedModel
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((SelectedModel is null && other.SelectedModel is null) || SelectedModel != null && SelectedModel.Equals(other.SelectedModel));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (SelectedModel != null)
                {
                    hash ^= 397 * SelectedModel.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model : global::System.IEquatable<ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model>, IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model
    {
        public ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model(global::System.Int32? id, global::IndicoV2.StrawberryShake.ModelStatus? status)
        {
            Id = id;
            Status = status;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQueryResult
    {
        public global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups? ModelGroups
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQuery_ModelGroups
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups?>? ModelGroups
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQuery_ModelGroups_ModelGroupPage : IModelGroupQuery_ModelGroups
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQuery_ModelGroups_ModelGroups
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel? SelectedModel
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQuery_ModelGroups_ModelGroups_ModelGroup : IModelGroupQuery_ModelGroups_ModelGroups
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model : IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoadResult : global::System.IEquatable<ModelLoadResult>, IModelLoadResult
    {
        public ModelLoadResult(global::IndicoV2.StrawberryShake.IModelLoad_ModelLoad? modelLoad)
        {
            ModelLoad = modelLoad;
        }

        public global::IndicoV2.StrawberryShake.IModelLoad_ModelLoad? ModelLoad
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelLoadResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ModelLoad is null && other.ModelLoad is null) || ModelLoad != null && ModelLoad.Equals(other.ModelLoad)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelLoadResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ModelLoad != null)
                {
                    hash ^= 397 * ModelLoad.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoad_ModelLoad_ModelLoad : global::System.IEquatable<ModelLoad_ModelLoad_ModelLoad>, IModelLoad_ModelLoad_ModelLoad
    {
        public ModelLoad_ModelLoad_ModelLoad(global::System.String? status)
        {
            Status = status;
        }

        public global::System.String? Status
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelLoad_ModelLoad_ModelLoad? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelLoad_ModelLoad_ModelLoad)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelLoadResult
    {
        public global::IndicoV2.StrawberryShake.IModelLoad_ModelLoad? ModelLoad
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelLoad_ModelLoad
    {
        public global::System.String? Status
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelLoad_ModelLoad_ModelLoad : IModelLoad_ModelLoad
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PredictModelResult : global::System.IEquatable<PredictModelResult>, IPredictModelResult
    {
        public PredictModelResult(global::IndicoV2.StrawberryShake.IPredictModel_ModelPredict? modelPredict)
        {
            ModelPredict = modelPredict;
        }

        public global::IndicoV2.StrawberryShake.IPredictModel_ModelPredict? ModelPredict
        {
            get;
        }

        public virtual global::System.Boolean Equals(PredictModelResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ModelPredict is null && other.ModelPredict is null) || ModelPredict != null && ModelPredict.Equals(other.ModelPredict)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PredictModelResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ModelPredict != null)
                {
                    hash ^= 397 * ModelPredict.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PredictModel_ModelPredict_ModelPredict : global::System.IEquatable<PredictModel_ModelPredict_ModelPredict>, IPredictModel_ModelPredict_ModelPredict
    {
        public PredictModel_ModelPredict_ModelPredict(global::System.String? jobId)
        {
            JobId = jobId;
        }

        public global::System.String? JobId
        {
            get;
        }

        public virtual global::System.Boolean Equals(PredictModel_ModelPredict_ModelPredict? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((JobId is null && other.JobId is null) || JobId != null && JobId.Equals(other.JobId)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PredictModel_ModelPredict_ModelPredict)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobId != null)
                {
                    hash ^= 397 * JobId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IPredictModelResult
    {
        public global::IndicoV2.StrawberryShake.IPredictModel_ModelPredict? ModelPredict
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IPredictModel_ModelPredict
    {
        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IPredictModel_ModelPredict_ModelPredict : IPredictModel_ModelPredict
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQueryResult : global::System.IEquatable<ModelGroupProgressQueryResult>, IModelGroupProgressQueryResult
    {
        public ModelGroupProgressQueryResult(global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups? modelGroups)
        {
            ModelGroups = modelGroups;
        }

        public global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups? ModelGroups
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupProgressQueryResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ModelGroups is null && other.ModelGroups is null) || ModelGroups != null && ModelGroups.Equals(other.ModelGroups)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupProgressQueryResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ModelGroups != null)
                {
                    hash ^= 397 * ModelGroups.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQuery_ModelGroups_ModelGroupPage : global::System.IEquatable<ModelGroupProgressQuery_ModelGroups_ModelGroupPage>, IModelGroupProgressQuery_ModelGroups_ModelGroupPage
    {
        public ModelGroupProgressQuery_ModelGroups_ModelGroupPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups?>? modelGroups)
        {
            ModelGroups = modelGroups;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups?>? ModelGroups
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupProgressQuery_ModelGroups_ModelGroupPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ModelGroups, other.ModelGroups));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupProgressQuery_ModelGroups_ModelGroupPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ModelGroups != null)
                {
                    foreach (var ModelGroups_elm in ModelGroups)
                    {
                        if (ModelGroups_elm != null)
                        {
                            hash ^= 397 * ModelGroups_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup : global::System.IEquatable<ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup>, IModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup
    {
        public ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models?>? models)
        {
            Models = models;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models?>? Models
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Models, other.Models));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Models != null)
                {
                    foreach (var Models_elm in Models)
                    {
                        if (Models_elm != null)
                        {
                            hash ^= 397 * Models_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model : global::System.IEquatable<ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model>, IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model
    {
        public ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model(global::System.Int32? id, global::IndicoV2.StrawberryShake.ModelStatus? status, global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress? trainingProgress)
        {
            Id = id;
            Status = status;
            TrainingProgress = trainingProgress;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress? TrainingProgress
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((TrainingProgress is null && other.TrainingProgress is null) || TrainingProgress != null && TrainingProgress.Equals(other.TrainingProgress));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (TrainingProgress != null)
                {
                    hash ^= 397 * TrainingProgress.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress : global::System.IEquatable<ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress>, IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress
    {
        public ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress(global::System.Double? percentComplete)
        {
            PercentComplete = percentComplete;
        }

        public global::System.Double? PercentComplete
        {
            get;
        }

        public virtual global::System.Boolean Equals(ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PercentComplete == other.PercentComplete);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PercentComplete != null)
                {
                    hash ^= 397 * PercentComplete.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQueryResult
    {
        public global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups? ModelGroups
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups?>? ModelGroups
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups_ModelGroupPage : IModelGroupProgressQuery_ModelGroups
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups_ModelGroups
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models?>? Models
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup : IModelGroupProgressQuery_ModelGroups_ModelGroups
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups_ModelGroups_Models
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress? TrainingProgress
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model : IModelGroupProgressQuery_ModelGroups_ModelGroups_Models
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress
    {
        public global::System.Double? PercentComplete
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress : IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummaryResult : global::System.IEquatable<UserSummaryResult>, IUserSummaryResult
    {
        public UserSummaryResult(global::IndicoV2.StrawberryShake.IUserSummary_UserSummary? userSummary)
        {
            UserSummary = userSummary;
        }

        public global::IndicoV2.StrawberryShake.IUserSummary_UserSummary? UserSummary
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSummaryResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserSummary is null && other.UserSummary is null) || UserSummary != null && UserSummary.Equals(other.UserSummary)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSummaryResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserSummary != null)
                {
                    hash ^= 397 * UserSummary.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummary_UserSummary_UserSummary : global::System.IEquatable<UserSummary_UserSummary_UserSummary>, IUserSummary_UserSummary_UserSummary
    {
        public UserSummary_UserSummary_UserSummary(global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_Users? users, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_AppRoles?>? appRoles)
        {
            Users = users;
            AppRoles = appRoles;
        }

        public global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_Users? Users
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_AppRoles?>? AppRoles
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSummary_UserSummary_UserSummary? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Users is null && other.Users is null) || Users != null && Users.Equals(other.Users))) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AppRoles, other.AppRoles);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSummary_UserSummary_UserSummary)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Users != null)
                {
                    hash ^= 397 * Users.GetHashCode();
                }

                if (AppRoles != null)
                {
                    foreach (var AppRoles_elm in AppRoles)
                    {
                        if (AppRoles_elm != null)
                        {
                            hash ^= 397 * AppRoles_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummary_UserSummary_Users_EnabledCount : global::System.IEquatable<UserSummary_UserSummary_Users_EnabledCount>, IUserSummary_UserSummary_Users_EnabledCount
    {
        public UserSummary_UserSummary_Users_EnabledCount(global::System.Int32? enabled, global::System.Int32? disabled)
        {
            Enabled = enabled;
            Disabled = disabled;
        }

        /// <summary>
        /// Number of active users
        /// </summary>
        public global::System.Int32? Enabled
        {
            get;
        }

        /// <summary>
        /// Number of deactivated users
        /// </summary>
        public global::System.Int32? Disabled
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSummary_UserSummary_Users_EnabledCount? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Enabled == other.Enabled) && Disabled == other.Disabled;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSummary_UserSummary_Users_EnabledCount)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Enabled != null)
                {
                    hash ^= 397 * Enabled.GetHashCode();
                }

                if (Disabled != null)
                {
                    hash ^= 397 * Disabled.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummary_UserSummary_AppRoles_AppRoleCount : global::System.IEquatable<UserSummary_UserSummary_AppRoles_AppRoleCount>, IUserSummary_UserSummary_AppRoles_AppRoleCount
    {
        public UserSummary_UserSummary_AppRoles_AppRoleCount(global::IndicoV2.StrawberryShake.AppRole? role, global::System.Int32? count)
        {
            Role = role;
            Count = count;
        }

        public global::IndicoV2.StrawberryShake.AppRole? Role
        {
            get;
        }

        public global::System.Int32? Count
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSummary_UserSummary_AppRoles_AppRoleCount? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Role is null && other.Role is null) || Role != null && Role.Equals(other.Role))) && Count == other.Count;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSummary_UserSummary_AppRoles_AppRoleCount)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Role != null)
                {
                    hash ^= 397 * Role.GetHashCode();
                }

                if (Count != null)
                {
                    hash ^= 397 * Count.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummaryResult
    {
        public global::IndicoV2.StrawberryShake.IUserSummary_UserSummary? UserSummary
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummary_UserSummary
    {
        public global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_Users? Users
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_AppRoles?>? AppRoles
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummary_UserSummary_UserSummary : IUserSummary_UserSummary
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummary_UserSummary_Users
    {
        /// <summary>
        /// Number of active users
        /// </summary>
        public global::System.Int32? Enabled
        {
            get;
        }

        /// <summary>
        /// Number of deactivated users
        /// </summary>
        public global::System.Int32? Disabled
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummary_UserSummary_Users_EnabledCount : IUserSummary_UserSummary_Users
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummary_UserSummary_AppRoles
    {
        public global::IndicoV2.StrawberryShake.AppRole? Role
        {
            get;
        }

        public global::System.Int32? Count
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummary_UserSummary_AppRoles_AppRoleCount : IUserSummary_UserSummary_AppRoles
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotResult : global::System.IEquatable<UserSnapshotResult>, IUserSnapshotResult
    {
        public UserSnapshotResult(global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot? userSnapshot)
        {
            UserSnapshot = userSnapshot;
        }

        public global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot? UserSnapshot
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSnapshotResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserSnapshot is null && other.UserSnapshot is null) || UserSnapshot != null && UserSnapshot.Equals(other.UserSnapshot)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSnapshotResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserSnapshot != null)
                {
                    hash ^= 397 * UserSnapshot.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshot_UserSnapshot_UserSnapshotPage : global::System.IEquatable<UserSnapshot_UserSnapshot_UserSnapshotPage>, IUserSnapshot_UserSnapshot_UserSnapshotPage
    {
        public UserSnapshot_UserSnapshot_UserSnapshotPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results?>? results, global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_PageInfo? pageInfo)
        {
            Results = results;
            PageInfo = pageInfo;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results?>? Results
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_PageInfo? PageInfo
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSnapshot_UserSnapshot_UserSnapshotPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Results, other.Results)) && ((PageInfo is null && other.PageInfo is null) || PageInfo != null && PageInfo.Equals(other.PageInfo));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSnapshot_UserSnapshot_UserSnapshotPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Results != null)
                {
                    foreach (var Results_elm in Results)
                    {
                        if (Results_elm != null)
                        {
                            hash ^= 397 * Results_elm.GetHashCode();
                        }
                    }
                }

                if (PageInfo != null)
                {
                    hash ^= 397 * PageInfo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshot_UserSnapshot_Results_UserSnapshot : global::System.IEquatable<UserSnapshot_UserSnapshot_Results_UserSnapshot>, IUserSnapshot_UserSnapshot_Results_UserSnapshot
    {
        public UserSnapshot_UserSnapshot_Results_UserSnapshot(global::System.Int32? id, global::System.String? name, global::System.DateTimeOffset? createdAt, global::System.Boolean? enabled, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.AppRole?>? roles, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets?>? datasets)
        {
            Id = id;
            Name = name;
            CreatedAt = createdAt;
            Enabled = enabled;
            Roles = roles;
            Datasets = datasets;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        public global::System.Boolean? Enabled
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.AppRole?>? Roles
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets?>? Datasets
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSnapshot_UserSnapshot_Results_UserSnapshot? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && Enabled == other.Enabled && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Roles, other.Roles) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Datasets, other.Datasets);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSnapshot_UserSnapshot_Results_UserSnapshot)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (Enabled != null)
                {
                    hash ^= 397 * Enabled.GetHashCode();
                }

                if (Roles != null)
                {
                    foreach (var Roles_elm in Roles)
                    {
                        if (Roles_elm != null)
                        {
                            hash ^= 397 * Roles_elm.GetHashCode();
                        }
                    }
                }

                if (Datasets != null)
                {
                    foreach (var Datasets_elm in Datasets)
                    {
                        if (Datasets_elm != null)
                        {
                            hash ^= 397 * Datasets_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshot_UserSnapshot_PageInfo_PageInfo : global::System.IEquatable<UserSnapshot_UserSnapshot_PageInfo_PageInfo>, IUserSnapshot_UserSnapshot_PageInfo_PageInfo
    {
        public UserSnapshot_UserSnapshot_PageInfo_PageInfo(global::System.Int32? aggregateCount)
        {
            AggregateCount = aggregateCount;
        }

        /// <summary>
        /// Total number of results for this query
        /// </summary>
        public global::System.Int32? AggregateCount
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSnapshot_UserSnapshot_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AggregateCount == other.AggregateCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSnapshot_UserSnapshot_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AggregateCount != null)
                {
                    hash ^= 397 * AggregateCount.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshot_UserSnapshot_Results_Datasets_DatasetRole : global::System.IEquatable<UserSnapshot_UserSnapshot_Results_Datasets_DatasetRole>, IUserSnapshot_UserSnapshot_Results_Datasets_DatasetRole
    {
        public UserSnapshot_UserSnapshot_Results_Datasets_DatasetRole(global::System.Int32? datasetId, global::IndicoV2.StrawberryShake.Roles? role)
        {
            DatasetId = datasetId;
            Role = role;
        }

        public global::System.Int32? DatasetId
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.Roles? Role
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSnapshot_UserSnapshot_Results_Datasets_DatasetRole? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DatasetId == other.DatasetId) && ((Role is null && other.Role is null) || Role != null && Role.Equals(other.Role));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSnapshot_UserSnapshot_Results_Datasets_DatasetRole)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DatasetId != null)
                {
                    hash ^= 397 * DatasetId.GetHashCode();
                }

                if (Role != null)
                {
                    hash ^= 397 * Role.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshotResult
    {
        public global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot? UserSnapshot
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results?>? Results
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_PageInfo? PageInfo
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot_UserSnapshotPage : IUserSnapshot_UserSnapshot
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot_Results
    {
        public global::System.Int32? Id
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        public global::System.Boolean? Enabled
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.AppRole?>? Roles
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets?>? Datasets
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot_Results_UserSnapshot : IUserSnapshot_UserSnapshot_Results
    {
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot_PageInfo
    {
        /// <summary>
        /// Total number of results for this query
        /// </summary>
        public global::System.Int32? AggregateCount
        {
            get;
        }
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot_PageInfo_PageInfo : IUserSnapshot_UserSnapshot_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot_Results_Datasets
    {
        public global::System.Int32? DatasetId
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.Roles? Role
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshot_UserSnapshot_Results_Datasets_DatasetRole : IUserSnapshot_UserSnapshot_Results_Datasets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogResult : global::System.IEquatable<UserChangelogResult>, IUserChangelogResult
    {
        public UserChangelogResult(global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog? userChangelog)
        {
            UserChangelog = userChangelog;
        }

        public global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog? UserChangelog
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserChangelogResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserChangelog is null && other.UserChangelog is null) || UserChangelog != null && UserChangelog.Equals(other.UserChangelog)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserChangelogResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserChangelog != null)
                {
                    hash ^= 397 * UserChangelog.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelog_UserChangelog_UserChangelogPage : global::System.IEquatable<UserChangelog_UserChangelog_UserChangelogPage>, IUserChangelog_UserChangelog_UserChangelogPage
    {
        public UserChangelog_UserChangelog_UserChangelogPage(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results?>? results, global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_PageInfo? pageInfo)
        {
            Results = results;
            PageInfo = pageInfo;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results?>? Results
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_PageInfo? PageInfo
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserChangelog_UserChangelog_UserChangelogPage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Results, other.Results)) && ((PageInfo is null && other.PageInfo is null) || PageInfo != null && PageInfo.Equals(other.PageInfo));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserChangelog_UserChangelog_UserChangelogPage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Results != null)
                {
                    foreach (var Results_elm in Results)
                    {
                        if (Results_elm != null)
                        {
                            hash ^= 397 * Results_elm.GetHashCode();
                        }
                    }
                }

                if (PageInfo != null)
                {
                    hash ^= 397 * PageInfo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelog_UserChangelog_Results_UserChangelog : global::System.IEquatable<UserChangelog_UserChangelog_Results_UserChangelog>, IUserChangelog_UserChangelog_Results_UserChangelog
    {
        public UserChangelog_UserChangelog_Results_UserChangelog(global::System.String? id, global::System.DateTimeOffset? date, global::System.String? userEmail, global::System.String? updaterEmail, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets?>? previousDatasets, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserChangeType?>? changesMade)
        {
            Id = id;
            Date = date;
            UserEmail = userEmail;
            UpdaterEmail = updaterEmail;
            PreviousDatasets = previousDatasets;
            ChangesMade = changesMade;
        }

        /// <summary>
        /// Unique combination of date and user_id
        /// </summary>
        public global::System.String? Id
        {
            get;
        }

        public global::System.DateTimeOffset? Date
        {
            get;
        }

        public global::System.String? UserEmail
        {
            get;
        }

        public global::System.String? UpdaterEmail
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets?>? PreviousDatasets
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserChangeType?>? ChangesMade
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserChangelog_UserChangelog_Results_UserChangelog? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && ((Date is null && other.Date is null) || Date != null && Date.Equals(other.Date)) && ((UserEmail is null && other.UserEmail is null) || UserEmail != null && UserEmail.Equals(other.UserEmail)) && ((UpdaterEmail is null && other.UpdaterEmail is null) || UpdaterEmail != null && UpdaterEmail.Equals(other.UpdaterEmail)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(PreviousDatasets, other.PreviousDatasets) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ChangesMade, other.ChangesMade);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserChangelog_UserChangelog_Results_UserChangelog)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Date != null)
                {
                    hash ^= 397 * Date.GetHashCode();
                }

                if (UserEmail != null)
                {
                    hash ^= 397 * UserEmail.GetHashCode();
                }

                if (UpdaterEmail != null)
                {
                    hash ^= 397 * UpdaterEmail.GetHashCode();
                }

                if (PreviousDatasets != null)
                {
                    foreach (var PreviousDatasets_elm in PreviousDatasets)
                    {
                        if (PreviousDatasets_elm != null)
                        {
                            hash ^= 397 * PreviousDatasets_elm.GetHashCode();
                        }
                    }
                }

                if (ChangesMade != null)
                {
                    foreach (var ChangesMade_elm in ChangesMade)
                    {
                        if (ChangesMade_elm != null)
                        {
                            hash ^= 397 * ChangesMade_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelog_UserChangelog_PageInfo_PageInfo : global::System.IEquatable<UserChangelog_UserChangelog_PageInfo_PageInfo>, IUserChangelog_UserChangelog_PageInfo_PageInfo
    {
        public UserChangelog_UserChangelog_PageInfo_PageInfo(global::System.Int32? aggregateCount)
        {
            AggregateCount = aggregateCount;
        }

        /// <summary>
        /// Total number of results for this query
        /// </summary>
        public global::System.Int32? AggregateCount
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserChangelog_UserChangelog_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AggregateCount == other.AggregateCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserChangelog_UserChangelog_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AggregateCount != null)
                {
                    hash ^= 397 * AggregateCount.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole : global::System.IEquatable<UserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole>, IUserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole
    {
        public UserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole(global::System.Int32? datasetId, global::IndicoV2.StrawberryShake.Roles? role)
        {
            DatasetId = datasetId;
            Role = role;
        }

        public global::System.Int32? DatasetId
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.Roles? Role
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DatasetId == other.DatasetId) && ((Role is null && other.Role is null) || Role != null && Role.Equals(other.Role));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DatasetId != null)
                {
                    hash ^= 397 * DatasetId.GetHashCode();
                }

                if (Role != null)
                {
                    hash ^= 397 * Role.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelogResult
    {
        public global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog? UserChangelog
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog
    {
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results?>? Results
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_PageInfo? PageInfo
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog_UserChangelogPage : IUserChangelog_UserChangelog
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog_Results
    {
        /// <summary>
        /// Unique combination of date and user_id
        /// </summary>
        public global::System.String? Id
        {
            get;
        }

        public global::System.DateTimeOffset? Date
        {
            get;
        }

        public global::System.String? UserEmail
        {
            get;
        }

        public global::System.String? UpdaterEmail
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets?>? PreviousDatasets
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserChangeType?>? ChangesMade
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog_Results_UserChangelog : IUserChangelog_UserChangelog_Results
    {
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog_PageInfo
    {
        /// <summary>
        /// Total number of results for this query
        /// </summary>
        public global::System.Int32? AggregateCount
        {
            get;
        }
    }

    /// <summary>
    /// Representation for paginated results for a List query
    /// Use `endCursor` as part of the `after` parameter to get the next page
    /// or `startCursor` as part of the `before` parameter to get to the previous page
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog_PageInfo_PageInfo : IUserChangelog_UserChangelog_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog_Results_PreviousDatasets
    {
        public global::System.Int32? DatasetId
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.Roles? Role
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole : IUserChangelog_UserChangelog_Results_PreviousDatasets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotReportResult : global::System.IEquatable<UserSnapshotReportResult>, IUserSnapshotReportResult
    {
        public UserSnapshotReportResult(global::IndicoV2.StrawberryShake.IUserSnapshotReport_UserSnapshotReport? userSnapshotReport)
        {
            UserSnapshotReport = userSnapshotReport;
        }

        public global::IndicoV2.StrawberryShake.IUserSnapshotReport_UserSnapshotReport? UserSnapshotReport
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSnapshotReportResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserSnapshotReport is null && other.UserSnapshotReport is null) || UserSnapshotReport != null && UserSnapshotReport.Equals(other.UserSnapshotReport)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSnapshotReportResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserSnapshotReport != null)
                {
                    hash ^= 397 * UserSnapshotReport.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport : global::System.IEquatable<UserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport>, IUserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport
    {
        public UserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport(global::System.String? jobId)
        {
            JobId = jobId;
        }

        public global::System.String? JobId
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((JobId is null && other.JobId is null) || JobId != null && JobId.Equals(other.JobId)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobId != null)
                {
                    hash ^= 397 * JobId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshotReportResult
    {
        public global::IndicoV2.StrawberryShake.IUserSnapshotReport_UserSnapshotReport? UserSnapshotReport
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshotReport_UserSnapshotReport
    {
        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport : IUserSnapshotReport_UserSnapshotReport
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogReportResult : global::System.IEquatable<UserChangelogReportResult>, IUserChangelogReportResult
    {
        public UserChangelogReportResult(global::IndicoV2.StrawberryShake.IUserChangelogReport_UserChangelogReport? userChangelogReport)
        {
            UserChangelogReport = userChangelogReport;
        }

        public global::IndicoV2.StrawberryShake.IUserChangelogReport_UserChangelogReport? UserChangelogReport
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserChangelogReportResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UserChangelogReport is null && other.UserChangelogReport is null) || UserChangelogReport != null && UserChangelogReport.Equals(other.UserChangelogReport)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserChangelogReportResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UserChangelogReport != null)
                {
                    hash ^= 397 * UserChangelogReport.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogReport_UserChangelogReport_GenerateUserChangelogReport : global::System.IEquatable<UserChangelogReport_UserChangelogReport_GenerateUserChangelogReport>, IUserChangelogReport_UserChangelogReport_GenerateUserChangelogReport
    {
        public UserChangelogReport_UserChangelogReport_GenerateUserChangelogReport(global::System.String? jobId)
        {
            JobId = jobId;
        }

        public global::System.String? JobId
        {
            get;
        }

        public virtual global::System.Boolean Equals(UserChangelogReport_UserChangelogReport_GenerateUserChangelogReport? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((JobId is null && other.JobId is null) || JobId != null && JobId.Equals(other.JobId)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserChangelogReport_UserChangelogReport_GenerateUserChangelogReport)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (JobId != null)
                {
                    hash ^= 397 * JobId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelogReportResult
    {
        public global::IndicoV2.StrawberryShake.IUserChangelogReport_UserChangelogReport? UserChangelogReport
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelogReport_UserChangelogReport
    {
        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelogReport_UserChangelogReport_GenerateUserChangelogReport : IUserChangelogReport_UserChangelogReport
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class FileInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _jSONStringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "FileInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _jSONStringFormatter = serializerResolver.GetInputValueFormatter("JSONString");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::IndicoV2.StrawberryShake.FileInput;
            var inputInfo = runtimeValue as global::IndicoV2.StrawberryShake.State.IFileInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsFilemetaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("filemeta", FormatFilemeta(input.Filemeta)));
            }

            if (inputInfo.IsFilenameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("filename", FormatFilename(input.Filename)));
            }

            return fields;
        }

        private global::System.Object? FormatFilemeta(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _jSONStringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFilename(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class FileInput : global::IndicoV2.StrawberryShake.State.IFileInputInfo, global::System.IEquatable<FileInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FileInput)obj);
        }

        public virtual global::System.Boolean Equals(FileInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Filemeta is null && other.Filemeta is null) || Filemeta != null && Filemeta.Equals(other.Filemeta))) && ((Filename is null && other.Filename is null) || Filename != null && Filename.Equals(other.Filename));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Filemeta != null)
                {
                    hash ^= 397 * Filemeta.GetHashCode();
                }

                if (Filename != null)
                {
                    hash ^= 397 * Filename.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_filemeta;
        private global::System.Boolean _set_filemeta;
        private global::System.String? _value_filename;
        private global::System.Boolean _set_filename;
        ///<summary>JSON string containing the following keys:- name: filename- path: indico storage path- uploadType: must be set to "legacy"</summary>
        public global::System.String? Filemeta
        {
            get => _value_filemeta;
            set
            {
                _set_filemeta = true;
                _value_filemeta = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IFileInputInfo.IsFilemetaSet => _set_filemeta;
        ///<summary>Name of the file. Note: not the full path.EG: "sample.pdf"</summary>
        public global::System.String? Filename
        {
            get => _value_filename;
            set
            {
                _set_filename = true;
                _value_filename = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IFileInputInfo.IsFilenameSet => _set_filename;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionFilterInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _submissionFilterFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateRangeFilterFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _fileTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _reviewFilterFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _submissionStatusFormatter = default !;
        public global::System.String TypeName => "SubmissionFilter";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _submissionFilterFormatter = serializerResolver.GetInputValueFormatter("SubmissionFilter");
            _dateRangeFilterFormatter = serializerResolver.GetInputValueFormatter("DateRangeFilter");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _fileTypeFormatter = serializerResolver.GetInputValueFormatter("FileType");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _reviewFilterFormatter = serializerResolver.GetInputValueFormatter("ReviewFilter");
            _submissionStatusFormatter = serializerResolver.GetInputValueFormatter("SubmissionStatus");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::IndicoV2.StrawberryShake.SubmissionFilter;
            var inputInfo = runtimeValue as global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsANDSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("AND", FormatAND(input.AND)));
            }

            if (inputInfo.IsORSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("OR", FormatOR(input.OR)));
            }

            if (inputInfo.IsAndsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ands", FormatAnds(input.Ands)));
            }

            if (inputInfo.IsCreatedAtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("createdAt", FormatCreatedAt(input.CreatedAt)));
            }

            if (inputInfo.IsFilesDeletedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("filesDeleted", FormatFilesDeleted(input.FilesDeleted)));
            }

            if (inputInfo.IsFiletypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("filetype", FormatFiletype(input.Filetype)));
            }

            if (inputInfo.IsInputFilenameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("inputFilename", FormatInputFilename(input.InputFilename)));
            }

            if (inputInfo.IsOrsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ors", FormatOrs(input.Ors)));
            }

            if (inputInfo.IsRetrievedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("retrieved", FormatRetrieved(input.Retrieved)));
            }

            if (inputInfo.IsReviewInProgressSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("reviewInProgress", FormatReviewInProgress(input.ReviewInProgress)));
            }

            if (inputInfo.IsReviewsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("reviews", FormatReviews(input.Reviews)));
            }

            if (inputInfo.IsStatusSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("status", FormatStatus(input.Status)));
            }

            if (inputInfo.IsUpdatedAtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("updatedAt", FormatUpdatedAt(input.UpdatedAt)));
            }

            return fields;
        }

        private global::System.Object? FormatAND(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_submissionFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOR(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_submissionFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatAnds(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_submissionFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatCreatedAt(global::IndicoV2.StrawberryShake.DateRangeFilter? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateRangeFilterFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFilesDeleted(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFiletype(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileType>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_fileTypeFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatInputFilename(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOrs(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_submissionFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatRetrieved(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? FormatReviewInProgress(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? FormatReviews(global::IndicoV2.StrawberryShake.ReviewFilter? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _reviewFilterFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStatus(global::IndicoV2.StrawberryShake.SubmissionStatus? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _submissionStatusFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUpdatedAt(global::IndicoV2.StrawberryShake.DateRangeFilter? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateRangeFilterFormatter.Format(input);
            }
        }
    }

    ///<summary>Filter the submissions by one or more of these attributes.A filter can be composed of smaller filters using OR/AND</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionFilter : global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo, global::System.IEquatable<SubmissionFilter>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SubmissionFilter)obj);
        }

        public virtual global::System.Boolean Equals(SubmissionFilter? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AND, other.AND)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(OR, other.OR) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ands, other.Ands) && ((CreatedAt is null && other.CreatedAt is null) || CreatedAt != null && CreatedAt.Equals(other.CreatedAt)) && FilesDeleted == other.FilesDeleted && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Filetype, other.Filetype) && ((InputFilename is null && other.InputFilename is null) || InputFilename != null && InputFilename.Equals(other.InputFilename)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ors, other.Ors) && Retrieved == other.Retrieved && ReviewInProgress == other.ReviewInProgress && ((Reviews is null && other.Reviews is null) || Reviews != null && Reviews.Equals(other.Reviews)) && ((Status is null && other.Status is null) || Status != null && Status.Equals(other.Status)) && ((UpdatedAt is null && other.UpdatedAt is null) || UpdatedAt != null && UpdatedAt.Equals(other.UpdatedAt));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AND != null)
                {
                    foreach (var AND_elm in AND)
                    {
                        if (AND_elm != null)
                        {
                            hash ^= 397 * AND_elm.GetHashCode();
                        }
                    }
                }

                if (OR != null)
                {
                    foreach (var OR_elm in OR)
                    {
                        if (OR_elm != null)
                        {
                            hash ^= 397 * OR_elm.GetHashCode();
                        }
                    }
                }

                if (Ands != null)
                {
                    foreach (var Ands_elm in Ands)
                    {
                        if (Ands_elm != null)
                        {
                            hash ^= 397 * Ands_elm.GetHashCode();
                        }
                    }
                }

                if (CreatedAt != null)
                {
                    hash ^= 397 * CreatedAt.GetHashCode();
                }

                if (FilesDeleted != null)
                {
                    hash ^= 397 * FilesDeleted.GetHashCode();
                }

                if (Filetype != null)
                {
                    foreach (var Filetype_elm in Filetype)
                    {
                        hash ^= 397 * Filetype_elm.GetHashCode();
                    }
                }

                if (InputFilename != null)
                {
                    hash ^= 397 * InputFilename.GetHashCode();
                }

                if (Ors != null)
                {
                    foreach (var Ors_elm in Ors)
                    {
                        if (Ors_elm != null)
                        {
                            hash ^= 397 * Ors_elm.GetHashCode();
                        }
                    }
                }

                if (Retrieved != null)
                {
                    hash ^= 397 * Retrieved.GetHashCode();
                }

                if (ReviewInProgress != null)
                {
                    hash ^= 397 * ReviewInProgress.GetHashCode();
                }

                if (Reviews != null)
                {
                    hash ^= 397 * Reviews.GetHashCode();
                }

                if (Status != null)
                {
                    hash ^= 397 * Status.GetHashCode();
                }

                if (UpdatedAt != null)
                {
                    hash ^= 397 * UpdatedAt.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? _value_aND;
        private global::System.Boolean _set_aND;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? _value_oR;
        private global::System.Boolean _set_oR;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? _value_ands;
        private global::System.Boolean _set_ands;
        private global::IndicoV2.StrawberryShake.DateRangeFilter? _value_createdAt;
        private global::System.Boolean _set_createdAt;
        private global::System.Boolean? _value_filesDeleted;
        private global::System.Boolean _set_filesDeleted;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileType>? _value_filetype;
        private global::System.Boolean _set_filetype;
        private global::System.String? _value_inputFilename;
        private global::System.Boolean _set_inputFilename;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? _value_ors;
        private global::System.Boolean _set_ors;
        private global::System.Boolean? _value_retrieved;
        private global::System.Boolean _set_retrieved;
        private global::System.Boolean? _value_reviewInProgress;
        private global::System.Boolean _set_reviewInProgress;
        private global::IndicoV2.StrawberryShake.ReviewFilter? _value_reviews;
        private global::System.Boolean _set_reviews;
        private global::IndicoV2.StrawberryShake.SubmissionStatus? _value_status;
        private global::System.Boolean _set_status;
        private global::IndicoV2.StrawberryShake.DateRangeFilter? _value_updatedAt;
        private global::System.Boolean _set_updatedAt;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? AND
        {
            get => _value_aND;
            set
            {
                _set_aND = true;
                _value_aND = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsANDSet => _set_aND;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? OR
        {
            get => _value_oR;
            set
            {
                _set_oR = true;
                _value_oR = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsORSet => _set_oR;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? Ands
        {
            get => _value_ands;
            set
            {
                _set_ands = true;
                _value_ands = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsAndsSet => _set_ands;
        ///<summary>Submissions created during given time range</summary>
        public global::IndicoV2.StrawberryShake.DateRangeFilter? CreatedAt
        {
            get => _value_createdAt;
            set
            {
                _set_createdAt = true;
                _value_createdAt = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsCreatedAtSet => _set_createdAt;
        ///<summary>Submissions that have had their internal files removed (True) or not (False)</summary>
        public global::System.Boolean? FilesDeleted
        {
            get => _value_filesDeleted;
            set
            {
                _set_filesDeleted = true;
                _value_filesDeleted = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsFilesDeletedSet => _set_filesDeleted;
        ///<summary>submission file(s) are any of these types</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileType>? Filetype
        {
            get => _value_filetype;
            set
            {
                _set_filetype = true;
                _value_filetype = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsFiletypeSet => _set_filetype;
        ///<summary>input filename contains</summary>
        public global::System.String? InputFilename
        {
            get => _value_inputFilename;
            set
            {
                _set_inputFilename = true;
                _value_inputFilename = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsInputFilenameSet => _set_inputFilename;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.SubmissionFilter?>? Ors
        {
            get => _value_ors;
            set
            {
                _set_ors = true;
                _value_ors = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsOrsSet => _set_ors;
        ///<summary>Submission has been marked as having been retrieved</summary>
        public global::System.Boolean? Retrieved
        {
            get => _value_retrieved;
            set
            {
                _set_retrieved = true;
                _value_retrieved = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsRetrievedSet => _set_retrieved;
        ///<summary>Only show submissions where a review is in progress (or not)</summary>
        public global::System.Boolean? ReviewInProgress
        {
            get => _value_reviewInProgress;
            set
            {
                _set_reviewInProgress = true;
                _value_reviewInProgress = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsReviewInProgressSet => _set_reviewInProgress;
        ///<summary>Only show submissions whose completed reviews match these filters</summary>
        public global::IndicoV2.StrawberryShake.ReviewFilter? Reviews
        {
            get => _value_reviews;
            set
            {
                _set_reviews = true;
                _value_reviews = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsReviewsSet => _set_reviews;
        ///<summary>submission status is</summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get => _value_status;
            set
            {
                _set_status = true;
                _value_status = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsStatusSet => _set_status;
        ///<summary>Submissions updated during given time range</summary>
        public global::IndicoV2.StrawberryShake.DateRangeFilter? UpdatedAt
        {
            get => _value_updatedAt;
            set
            {
                _set_updatedAt = true;
                _value_updatedAt = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.ISubmissionFilterInfo.IsUpdatedAtSet => _set_updatedAt;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DateRangeFilterInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _inputDateFormatter = default !;
        public global::System.String TypeName => "DateRangeFilter";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _inputDateFormatter = serializerResolver.GetInputValueFormatter("InputDate");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::IndicoV2.StrawberryShake.DateRangeFilter;
            var inputInfo = runtimeValue as global::IndicoV2.StrawberryShake.State.IDateRangeFilterInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsFromSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("from", FormatFrom(input.From)));
            }

            if (inputInfo.IsToSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("to", FormatTo(input.To)));
            }

            return fields;
        }

        private global::System.Object? FormatFrom(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _inputDateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTo(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _inputDateFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DateRangeFilter : global::IndicoV2.StrawberryShake.State.IDateRangeFilterInfo, global::System.IEquatable<DateRangeFilter>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DateRangeFilter)obj);
        }

        public virtual global::System.Boolean Equals(DateRangeFilter? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((From is null && other.From is null) || From != null && From.Equals(other.From))) && ((To is null && other.To is null) || To != null && To.Equals(other.To));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (From != null)
                {
                    hash ^= 397 * From.GetHashCode();
                }

                if (To != null)
                {
                    hash ^= 397 * To.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_from;
        private global::System.Boolean _set_from;
        private global::System.String? _value_to;
        private global::System.Boolean _set_to;
        ///<summary>The starting time to search from</summary>
        public global::System.String? From
        {
            get => _value_from;
            set
            {
                _set_from = true;
                _value_from = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IDateRangeFilterInfo.IsFromSet => _set_from;
        ///<summary>The ending time to search until</summary>
        public global::System.String? To
        {
            get => _value_to;
            set
            {
                _set_to = true;
                _value_to = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IDateRangeFilterInfo.IsToSet => _set_to;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ReviewFilterInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _reviewFilterFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _reviewTypeFormatter = default !;
        public global::System.String TypeName => "ReviewFilter";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _reviewFilterFormatter = serializerResolver.GetInputValueFormatter("ReviewFilter");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _reviewTypeFormatter = serializerResolver.GetInputValueFormatter("ReviewType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::IndicoV2.StrawberryShake.ReviewFilter;
            var inputInfo = runtimeValue as global::IndicoV2.StrawberryShake.State.IReviewFilterInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsANDSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("AND", FormatAND(input.AND)));
            }

            if (inputInfo.IsORSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("OR", FormatOR(input.OR)));
            }

            if (inputInfo.IsAndsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ands", FormatAnds(input.Ands)));
            }

            if (inputInfo.IsCreatedBySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("createdBy", FormatCreatedBy(input.CreatedBy)));
            }

            if (inputInfo.IsOrsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ors", FormatOrs(input.Ors)));
            }

            if (inputInfo.IsRejectedSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rejected", FormatRejected(input.Rejected)));
            }

            if (inputInfo.IsReviewTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("reviewType", FormatReviewType(input.ReviewType)));
            }

            return fields;
        }

        private global::System.Object? FormatAND(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_reviewFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOR(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_reviewFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatAnds(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_reviewFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatCreatedBy(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _intFormatter.Format(input);
            }
        }

        private global::System.Object? FormatOrs(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_reviewFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatRejected(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? FormatReviewType(global::IndicoV2.StrawberryShake.ReviewType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _reviewTypeFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ReviewFilter : global::IndicoV2.StrawberryShake.State.IReviewFilterInfo, global::System.IEquatable<ReviewFilter>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ReviewFilter)obj);
        }

        public virtual global::System.Boolean Equals(ReviewFilter? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AND, other.AND)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(OR, other.OR) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ands, other.Ands) && CreatedBy == other.CreatedBy && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ors, other.Ors) && Rejected == other.Rejected && ((ReviewType is null && other.ReviewType is null) || ReviewType != null && ReviewType.Equals(other.ReviewType));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AND != null)
                {
                    foreach (var AND_elm in AND)
                    {
                        if (AND_elm != null)
                        {
                            hash ^= 397 * AND_elm.GetHashCode();
                        }
                    }
                }

                if (OR != null)
                {
                    foreach (var OR_elm in OR)
                    {
                        if (OR_elm != null)
                        {
                            hash ^= 397 * OR_elm.GetHashCode();
                        }
                    }
                }

                if (Ands != null)
                {
                    foreach (var Ands_elm in Ands)
                    {
                        if (Ands_elm != null)
                        {
                            hash ^= 397 * Ands_elm.GetHashCode();
                        }
                    }
                }

                if (CreatedBy != null)
                {
                    hash ^= 397 * CreatedBy.GetHashCode();
                }

                if (Ors != null)
                {
                    foreach (var Ors_elm in Ors)
                    {
                        if (Ors_elm != null)
                        {
                            hash ^= 397 * Ors_elm.GetHashCode();
                        }
                    }
                }

                if (Rejected != null)
                {
                    hash ^= 397 * Rejected.GetHashCode();
                }

                if (ReviewType != null)
                {
                    hash ^= 397 * ReviewType.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? _value_aND;
        private global::System.Boolean _set_aND;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? _value_oR;
        private global::System.Boolean _set_oR;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? _value_ands;
        private global::System.Boolean _set_ands;
        private global::System.Int32? _value_createdBy;
        private global::System.Boolean _set_createdBy;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? _value_ors;
        private global::System.Boolean _set_ors;
        private global::System.Boolean? _value_rejected;
        private global::System.Boolean _set_rejected;
        private global::IndicoV2.StrawberryShake.ReviewType? _value_reviewType;
        private global::System.Boolean _set_reviewType;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? AND
        {
            get => _value_aND;
            set
            {
                _set_aND = true;
                _value_aND = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IReviewFilterInfo.IsANDSet => _set_aND;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? OR
        {
            get => _value_oR;
            set
            {
                _set_oR = true;
                _value_oR = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IReviewFilterInfo.IsORSet => _set_oR;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? Ands
        {
            get => _value_ands;
            set
            {
                _set_ands = true;
                _value_ands = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IReviewFilterInfo.IsAndsSet => _set_ands;
        ///<summary>ID of the user who created the submission</summary>
        public global::System.Int32? CreatedBy
        {
            get => _value_createdBy;
            set
            {
                _set_createdBy = true;
                _value_createdBy = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IReviewFilterInfo.IsCreatedBySet => _set_createdBy;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.ReviewFilter?>? Ors
        {
            get => _value_ors;
            set
            {
                _set_ors = true;
                _value_ors = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IReviewFilterInfo.IsOrsSet => _set_ors;
        ///<summary>Whether submission has been rejected</summary>
        public global::System.Boolean? Rejected
        {
            get => _value_rejected;
            set
            {
                _set_rejected = true;
                _value_rejected = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IReviewFilterInfo.IsRejectedSet => _set_rejected;
        ///<summary>type of review is</summary>
        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get => _value_reviewType;
            set
            {
                _set_reviewType = true;
                _value_reviewType = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IReviewFilterInfo.IsReviewTypeSet => _set_reviewType;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserReportFilterInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _userReportFilterFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "UserReportFilter";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _userReportFilterFormatter = serializerResolver.GetInputValueFormatter("UserReportFilter");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::IndicoV2.StrawberryShake.UserReportFilter;
            var inputInfo = runtimeValue as global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsANDSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("AND", FormatAND(input.AND)));
            }

            if (inputInfo.IsORSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("OR", FormatOR(input.OR)));
            }

            if (inputInfo.IsAndsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ands", FormatAnds(input.Ands)));
            }

            if (inputInfo.IsOrsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ors", FormatOrs(input.Ors)));
            }

            if (inputInfo.IsUserEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("userEmail", FormatUserEmail(input.UserEmail)));
            }

            if (inputInfo.IsUserIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("userId", FormatUserId(input.UserId)));
            }

            return fields;
        }

        private global::System.Object? FormatAND(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_userReportFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOR(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_userReportFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatAnds(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_userReportFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatOrs(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_userReportFilterFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatUserEmail(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }

        private global::System.Object? FormatUserId(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_intFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserReportFilter : global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo, global::System.IEquatable<UserReportFilter>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UserReportFilter)obj);
        }

        public virtual global::System.Boolean Equals(UserReportFilter? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(AND, other.AND)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(OR, other.OR) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ands, other.Ands) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Ors, other.Ors) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(UserEmail, other.UserEmail) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(UserId, other.UserId);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AND != null)
                {
                    foreach (var AND_elm in AND)
                    {
                        if (AND_elm != null)
                        {
                            hash ^= 397 * AND_elm.GetHashCode();
                        }
                    }
                }

                if (OR != null)
                {
                    foreach (var OR_elm in OR)
                    {
                        if (OR_elm != null)
                        {
                            hash ^= 397 * OR_elm.GetHashCode();
                        }
                    }
                }

                if (Ands != null)
                {
                    foreach (var Ands_elm in Ands)
                    {
                        if (Ands_elm != null)
                        {
                            hash ^= 397 * Ands_elm.GetHashCode();
                        }
                    }
                }

                if (Ors != null)
                {
                    foreach (var Ors_elm in Ors)
                    {
                        if (Ors_elm != null)
                        {
                            hash ^= 397 * Ors_elm.GetHashCode();
                        }
                    }
                }

                if (UserEmail != null)
                {
                    foreach (var UserEmail_elm in UserEmail)
                    {
                        if (UserEmail_elm != null)
                        {
                            hash ^= 397 * UserEmail_elm.GetHashCode();
                        }
                    }
                }

                if (UserId != null)
                {
                    foreach (var UserId_elm in UserId)
                    {
                        if (UserId_elm != null)
                        {
                            hash ^= 397 * UserId_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? _value_aND;
        private global::System.Boolean _set_aND;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? _value_oR;
        private global::System.Boolean _set_oR;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? _value_ands;
        private global::System.Boolean _set_ands;
        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? _value_ors;
        private global::System.Boolean _set_ors;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_userEmail;
        private global::System.Boolean _set_userEmail;
        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? _value_userId;
        private global::System.Boolean _set_userId;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? AND
        {
            get => _value_aND;
            set
            {
                _set_aND = true;
                _value_aND = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo.IsANDSet => _set_aND;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? OR
        {
            get => _value_oR;
            set
            {
                _set_oR = true;
                _value_oR = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo.IsORSet => _set_oR;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? Ands
        {
            get => _value_ands;
            set
            {
                _set_ands = true;
                _value_ands = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo.IsAndsSet => _set_ands;
        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserReportFilter?>? Ors
        {
            get => _value_ors;
            set
            {
                _set_ors = true;
                _value_ors = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo.IsOrsSet => _set_ors;
        ///<summary>User email in this list</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? UserEmail
        {
            get => _value_userEmail;
            set
            {
                _set_userEmail = true;
                _value_userEmail = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo.IsUserEmailSet => _set_userEmail;
        ///<summary>User id in this list</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? UserId
        {
            get => _value_userId;
            set
            {
                _set_userId = true;
                _value_userId = value;
            }
        }

        global::System.Boolean global::IndicoV2.StrawberryShake.State.IUserReportFilterInfo.IsUserIdSet => _set_userId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum WorkflowStatus
    {
        AddingData,
        Complete
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, WorkflowStatus>
    {
        public global::System.String TypeName => "WorkflowStatus";
        public WorkflowStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "ADDING_DATA" => WorkflowStatus.AddingData, "COMPLETE" => WorkflowStatus.Complete, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            WorkflowStatus.AddingData => "ADDING_DATA", WorkflowStatus.Complete => "COMPLETE", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum SubmissionResultVersion
    {
        Latest,
        OldestSupported,
        One,
        Three,
        Two
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionResultVersionSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SubmissionResultVersion>
    {
        public global::System.String TypeName => "SubmissionResultVersion";
        public SubmissionResultVersion Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "LATEST" => SubmissionResultVersion.Latest, "OLDEST_SUPPORTED" => SubmissionResultVersion.OldestSupported, "ONE" => SubmissionResultVersion.One, "THREE" => SubmissionResultVersion.Three, "TWO" => SubmissionResultVersion.Two, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            SubmissionResultVersion.Latest => "LATEST", SubmissionResultVersion.OldestSupported => "OLDEST_SUPPORTED", SubmissionResultVersion.One => "ONE", SubmissionResultVersion.Three => "THREE", SubmissionResultVersion.Two => "TWO", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum FileType
    {
        Csv,
        Pdf,
        Excel,
        Doc,
        Docx,
        Ppt,
        Pptx,
        Png,
        Jpg,
        Tiff,
        Txt,
        Rtf,
        Xls,
        Xlsx,
        Xlsb,
        Xlsm,
        Unknown,
        Msg,
        Eml,
        Zip,
        Html
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class FileTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, FileType>
    {
        public global::System.String TypeName => "FileType";
        public FileType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "CSV" => FileType.Csv, "PDF" => FileType.Pdf, "EXCEL" => FileType.Excel, "DOC" => FileType.Doc, "DOCX" => FileType.Docx, "PPT" => FileType.Ppt, "PPTX" => FileType.Pptx, "PNG" => FileType.Png, "JPG" => FileType.Jpg, "TIFF" => FileType.Tiff, "TXT" => FileType.Txt, "RTF" => FileType.Rtf, "XLS" => FileType.Xls, "XLSX" => FileType.Xlsx, "XLSB" => FileType.Xlsb, "XLSM" => FileType.Xlsm, "UNKNOWN" => FileType.Unknown, "MSG" => FileType.Msg, "EML" => FileType.Eml, "ZIP" => FileType.Zip, "HTML" => FileType.Html, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            FileType.Csv => "CSV", FileType.Pdf => "PDF", FileType.Excel => "EXCEL", FileType.Doc => "DOC", FileType.Docx => "DOCX", FileType.Ppt => "PPT", FileType.Pptx => "PPTX", FileType.Png => "PNG", FileType.Jpg => "JPG", FileType.Tiff => "TIFF", FileType.Txt => "TXT", FileType.Rtf => "RTF", FileType.Xls => "XLS", FileType.Xlsx => "XLSX", FileType.Xlsb => "XLSB", FileType.Xlsm => "XLSM", FileType.Unknown => "UNKNOWN", FileType.Msg => "MSG", FileType.Eml => "EML", FileType.Zip => "ZIP", FileType.Html => "HTML", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum ReviewType
    {
        Admin,
        Auto,
        Manual
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ReviewTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ReviewType>
    {
        public global::System.String TypeName => "ReviewType";
        public ReviewType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "ADMIN" => ReviewType.Admin, "AUTO" => ReviewType.Auto, "MANUAL" => ReviewType.Manual, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            ReviewType.Admin => "ADMIN", ReviewType.Auto => "AUTO", ReviewType.Manual => "MANUAL", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum SubmissionStatus
    {
        Complete,
        Failed,
        PendingAdminReview,
        PendingAutoReview,
        PendingReview,
        Processing
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SubmissionStatus>
    {
        public global::System.String TypeName => "SubmissionStatus";
        public SubmissionStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "COMPLETE" => SubmissionStatus.Complete, "FAILED" => SubmissionStatus.Failed, "PENDING_ADMIN_REVIEW" => SubmissionStatus.PendingAdminReview, "PENDING_AUTO_REVIEW" => SubmissionStatus.PendingAutoReview, "PENDING_REVIEW" => SubmissionStatus.PendingReview, "PROCESSING" => SubmissionStatus.Processing, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            SubmissionStatus.Complete => "COMPLETE", SubmissionStatus.Failed => "FAILED", SubmissionStatus.PendingAdminReview => "PENDING_ADMIN_REVIEW", SubmissionStatus.PendingAutoReview => "PENDING_AUTO_REVIEW", SubmissionStatus.PendingReview => "PENDING_REVIEW", SubmissionStatus.Processing => "PROCESSING", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum SUBMISSION_COLUMN_ENUM
    {
        CompletedAt,
        CreatedAt,
        CreatedBy,
        DatasetId,
        Deleted,
        Errors,
        FilesDeleted,
        Id,
        InputFile,
        InputFilename,
        OcrEngine,
        ResultFile,
        Retrieved,
        ReviewInProgress,
        Status,
        UpdatedAt,
        UpdatedBy,
        WorkflowId,
        AutoReviewLoaded
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SUBMISSION_COLUMN_ENUMSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SUBMISSION_COLUMN_ENUM>
    {
        public global::System.String TypeName => "SUBMISSION_COLUMN_ENUM";
        public SUBMISSION_COLUMN_ENUM Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "COMPLETED_AT" => SUBMISSION_COLUMN_ENUM.CompletedAt, "CREATED_AT" => SUBMISSION_COLUMN_ENUM.CreatedAt, "CREATED_BY" => SUBMISSION_COLUMN_ENUM.CreatedBy, "DATASET_ID" => SUBMISSION_COLUMN_ENUM.DatasetId, "DELETED" => SUBMISSION_COLUMN_ENUM.Deleted, "ERRORS" => SUBMISSION_COLUMN_ENUM.Errors, "FILES_DELETED" => SUBMISSION_COLUMN_ENUM.FilesDeleted, "ID" => SUBMISSION_COLUMN_ENUM.Id, "INPUT_FILE" => SUBMISSION_COLUMN_ENUM.InputFile, "INPUT_FILENAME" => SUBMISSION_COLUMN_ENUM.InputFilename, "OCR_ENGINE" => SUBMISSION_COLUMN_ENUM.OcrEngine, "RESULT_FILE" => SUBMISSION_COLUMN_ENUM.ResultFile, "RETRIEVED" => SUBMISSION_COLUMN_ENUM.Retrieved, "REVIEW_IN_PROGRESS" => SUBMISSION_COLUMN_ENUM.ReviewInProgress, "STATUS" => SUBMISSION_COLUMN_ENUM.Status, "UPDATED_AT" => SUBMISSION_COLUMN_ENUM.UpdatedAt, "UPDATED_BY" => SUBMISSION_COLUMN_ENUM.UpdatedBy, "WORKFLOW_ID" => SUBMISSION_COLUMN_ENUM.WorkflowId, "_AUTO_REVIEW_LOADED" => SUBMISSION_COLUMN_ENUM.AutoReviewLoaded, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            SUBMISSION_COLUMN_ENUM.CompletedAt => "COMPLETED_AT", SUBMISSION_COLUMN_ENUM.CreatedAt => "CREATED_AT", SUBMISSION_COLUMN_ENUM.CreatedBy => "CREATED_BY", SUBMISSION_COLUMN_ENUM.DatasetId => "DATASET_ID", SUBMISSION_COLUMN_ENUM.Deleted => "DELETED", SUBMISSION_COLUMN_ENUM.Errors => "ERRORS", SUBMISSION_COLUMN_ENUM.FilesDeleted => "FILES_DELETED", SUBMISSION_COLUMN_ENUM.Id => "ID", SUBMISSION_COLUMN_ENUM.InputFile => "INPUT_FILE", SUBMISSION_COLUMN_ENUM.InputFilename => "INPUT_FILENAME", SUBMISSION_COLUMN_ENUM.OcrEngine => "OCR_ENGINE", SUBMISSION_COLUMN_ENUM.ResultFile => "RESULT_FILE", SUBMISSION_COLUMN_ENUM.Retrieved => "RETRIEVED", SUBMISSION_COLUMN_ENUM.ReviewInProgress => "REVIEW_IN_PROGRESS", SUBMISSION_COLUMN_ENUM.Status => "STATUS", SUBMISSION_COLUMN_ENUM.UpdatedAt => "UPDATED_AT", SUBMISSION_COLUMN_ENUM.UpdatedBy => "UPDATED_BY", SUBMISSION_COLUMN_ENUM.WorkflowId => "WORKFLOW_ID", SUBMISSION_COLUMN_ENUM.AutoReviewLoaded => "_AUTO_REVIEW_LOADED", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum JobStatus
    {
        Failure,
        Ignored,
        Pending,
        Received,
        Rejected,
        Retry,
        Revoked,
        Started,
        Success,
        Trailed
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, JobStatus>
    {
        public global::System.String TypeName => "JobStatus";
        public JobStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "FAILURE" => JobStatus.Failure, "IGNORED" => JobStatus.Ignored, "PENDING" => JobStatus.Pending, "RECEIVED" => JobStatus.Received, "REJECTED" => JobStatus.Rejected, "RETRY" => JobStatus.Retry, "REVOKED" => JobStatus.Revoked, "STARTED" => JobStatus.Started, "SUCCESS" => JobStatus.Success, "TRAILED" => JobStatus.Trailed, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            JobStatus.Failure => "FAILURE", JobStatus.Ignored => "IGNORED", JobStatus.Pending => "PENDING", JobStatus.Received => "RECEIVED", JobStatus.Rejected => "REJECTED", JobStatus.Retry => "RETRY", JobStatus.Revoked => "REVOKED", JobStatus.Started => "STARTED", JobStatus.Success => "SUCCESS", JobStatus.Trailed => "TRAILED", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum DatasetStatus
    {
        Complete,
        Creating,
        Deleting,
        Failed,
        Processed,
        Staged,
        Uploading
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DatasetStatus>
    {
        public global::System.String TypeName => "DatasetStatus";
        public DatasetStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "COMPLETE" => DatasetStatus.Complete, "CREATING" => DatasetStatus.Creating, "DELETING" => DatasetStatus.Deleting, "FAILED" => DatasetStatus.Failed, "PROCESSED" => DatasetStatus.Processed, "STAGED" => DatasetStatus.Staged, "UPLOADING" => DatasetStatus.Uploading, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            DatasetStatus.Complete => "COMPLETE", DatasetStatus.Creating => "CREATING", DatasetStatus.Deleting => "DELETING", DatasetStatus.Failed => "FAILED", DatasetStatus.Processed => "PROCESSED", DatasetStatus.Staged => "STAGED", DatasetStatus.Uploading => "UPLOADING", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum FileStatus
    {
        Downloaded,
        Downloading,
        Extracted,
        Extracting,
        Failed,
        Processed,
        Processing
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class FileStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, FileStatus>
    {
        public global::System.String TypeName => "FileStatus";
        public FileStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "DOWNLOADED" => FileStatus.Downloaded, "DOWNLOADING" => FileStatus.Downloading, "EXTRACTED" => FileStatus.Extracted, "EXTRACTING" => FileStatus.Extracting, "FAILED" => FileStatus.Failed, "PROCESSED" => FileStatus.Processed, "PROCESSING" => FileStatus.Processing, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            FileStatus.Downloaded => "DOWNLOADED", FileStatus.Downloading => "DOWNLOADING", FileStatus.Extracted => "EXTRACTED", FileStatus.Extracting => "EXTRACTING", FileStatus.Failed => "FAILED", FileStatus.Processed => "PROCESSED", FileStatus.Processing => "PROCESSING", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum FileFailureType
    {
        CorruptImage,
        CsvMultipleUrls,
        CsvNoUrlDsTypeDocument,
        CsvNoUrlDsTypeImage,
        CsvParsing,
        CsvRequiresContent,
        CsvTooManyRows,
        CsvTooManyTargets,
        Download,
        EmptyFile,
        Extraction,
        IncompatibleCsvColumns,
        IncompatibleType,
        PasswordProtected,
        Server,
        TooLarge,
        TooManyPages,
        UnsupportedType
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class FileFailureTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, FileFailureType>
    {
        public global::System.String TypeName => "FileFailureType";
        public FileFailureType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "CORRUPT_IMAGE" => FileFailureType.CorruptImage, "CSV_MULTIPLE_URLS" => FileFailureType.CsvMultipleUrls, "CSV_NO_URL_DS_TYPE_DOCUMENT" => FileFailureType.CsvNoUrlDsTypeDocument, "CSV_NO_URL_DS_TYPE_IMAGE" => FileFailureType.CsvNoUrlDsTypeImage, "CSV_PARSING" => FileFailureType.CsvParsing, "CSV_REQUIRES_CONTENT" => FileFailureType.CsvRequiresContent, "CSV_TOO_MANY_ROWS" => FileFailureType.CsvTooManyRows, "CSV_TOO_MANY_TARGETS" => FileFailureType.CsvTooManyTargets, "DOWNLOAD" => FileFailureType.Download, "EMPTY_FILE" => FileFailureType.EmptyFile, "EXTRACTION" => FileFailureType.Extraction, "INCOMPATIBLE_CSV_COLUMNS" => FileFailureType.IncompatibleCsvColumns, "INCOMPATIBLE_TYPE" => FileFailureType.IncompatibleType, "PASSWORD_PROTECTED" => FileFailureType.PasswordProtected, "SERVER" => FileFailureType.Server, "TOO_LARGE" => FileFailureType.TooLarge, "TOO_MANY_PAGES" => FileFailureType.TooManyPages, "UNSUPPORTED_TYPE" => FileFailureType.UnsupportedType, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            FileFailureType.CorruptImage => "CORRUPT_IMAGE", FileFailureType.CsvMultipleUrls => "CSV_MULTIPLE_URLS", FileFailureType.CsvNoUrlDsTypeDocument => "CSV_NO_URL_DS_TYPE_DOCUMENT", FileFailureType.CsvNoUrlDsTypeImage => "CSV_NO_URL_DS_TYPE_IMAGE", FileFailureType.CsvParsing => "CSV_PARSING", FileFailureType.CsvRequiresContent => "CSV_REQUIRES_CONTENT", FileFailureType.CsvTooManyRows => "CSV_TOO_MANY_ROWS", FileFailureType.CsvTooManyTargets => "CSV_TOO_MANY_TARGETS", FileFailureType.Download => "DOWNLOAD", FileFailureType.EmptyFile => "EMPTY_FILE", FileFailureType.Extraction => "EXTRACTION", FileFailureType.IncompatibleCsvColumns => "INCOMPATIBLE_CSV_COLUMNS", FileFailureType.IncompatibleType => "INCOMPATIBLE_TYPE", FileFailureType.PasswordProtected => "PASSWORD_PROTECTED", FileFailureType.Server => "SERVER", FileFailureType.TooLarge => "TOO_LARGE", FileFailureType.TooManyPages => "TOO_MANY_PAGES", FileFailureType.UnsupportedType => "UNSUPPORTED_TYPE", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum ModelStatus
    {
        Complete,
        Creating,
        Failed,
        NotEnoughData,
        Training
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ModelStatus>
    {
        public global::System.String TypeName => "ModelStatus";
        public ModelStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "COMPLETE" => ModelStatus.Complete, "CREATING" => ModelStatus.Creating, "FAILED" => ModelStatus.Failed, "NOT_ENOUGH_DATA" => ModelStatus.NotEnoughData, "TRAINING" => ModelStatus.Training, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            ModelStatus.Complete => "COMPLETE", ModelStatus.Creating => "CREATING", ModelStatus.Failed => "FAILED", ModelStatus.NotEnoughData => "NOT_ENOUGH_DATA", ModelStatus.Training => "TRAINING", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum AppRole
    {
        AppAdmin,
        CeleryFlower,
        ManageAllData,
        ReportGenerator,
        TeamAdmin,
        TeamDeveloper,
        TeamUser
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class AppRoleSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, AppRole>
    {
        public global::System.String TypeName => "AppRole";
        public AppRole Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "APP_ADMIN" => AppRole.AppAdmin, "CELERY_FLOWER" => AppRole.CeleryFlower, "MANAGE_ALL_DATA" => AppRole.ManageAllData, "REPORT_GENERATOR" => AppRole.ReportGenerator, "TEAM_ADMIN" => AppRole.TeamAdmin, "TEAM_DEVELOPER" => AppRole.TeamDeveloper, "TEAM_USER" => AppRole.TeamUser, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            AppRole.AppAdmin => "APP_ADMIN", AppRole.CeleryFlower => "CELERY_FLOWER", AppRole.ManageAllData => "MANAGE_ALL_DATA", AppRole.ReportGenerator => "REPORT_GENERATOR", AppRole.TeamAdmin => "TEAM_ADMIN", AppRole.TeamDeveloper => "TEAM_DEVELOPER", AppRole.TeamUser => "TEAM_USER", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum Roles
    {
        Analyst,
        Labeler,
        LabelerAndReviewer,
        Manager,
        Reviewer
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class RolesSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, Roles>
    {
        public global::System.String TypeName => "Roles";
        public Roles Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "ANALYST" => Roles.Analyst, "LABELER" => Roles.Labeler, "LABELER_AND_REVIEWER" => Roles.LabelerAndReviewer, "MANAGER" => Roles.Manager, "REVIEWER" => Roles.Reviewer, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            Roles.Analyst => "ANALYST", Roles.Labeler => "LABELER", Roles.LabelerAndReviewer => "LABELER_AND_REVIEWER", Roles.Manager => "MANAGER", Roles.Reviewer => "REVIEWER", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public enum UserChangeType
    {
        AppRole,
        DatasetRole,
        Enablement
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangeTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, UserChangeType>
    {
        public global::System.String TypeName => "UserChangeType";
        public UserChangeType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "APP_ROLE" => UserChangeType.AppRole, "DATASET_ROLE" => UserChangeType.DatasetRole, "ENABLEMENT" => UserChangeType.Enablement, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            UserChangeType.AppRole => "APP_ROLE", UserChangeType.DatasetRole => "DATASET_ROLE", UserChangeType.Enablement => "ENABLEMENT", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    /// <summary>
    /// Represents the operation service of the DocumentExtraction GraphQL operation
    /// <code>
    /// mutation DocumentExtraction($files: [FileInput]!, $jsonConfig: JSONString) {
    ///   documentExtraction(files: $files, jsonConfig: $jsonConfig) {
    ///     __typename
    ///     jobIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtractionMutationDocument : global::StrawberryShake.IDocument
    {
        private DocumentExtractionMutationDocument()
        {
        }

        public static DocumentExtractionMutationDocument Instance
        {
            get;
        }

        = new DocumentExtractionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x20, 0x24, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "6cf28fb18ed63be251c673ef2835515b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DocumentExtraction GraphQL operation
    /// <code>
    /// mutation DocumentExtraction($files: [FileInput]!, $jsonConfig: JSONString) {
    ///   documentExtraction(files: $files, jsonConfig: $jsonConfig) {
    ///     __typename
    ///     jobIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtractionMutation : global::IndicoV2.StrawberryShake.IDocumentExtractionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDocumentExtractionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _fileInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _jSONStringFormatter;
        public DocumentExtractionMutation(global::StrawberryShake.IOperationExecutor<IDocumentExtractionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _fileInputFormatter = serializerResolver.GetInputValueFormatter("FileInput");
            _jSONStringFormatter = serializerResolver.GetInputValueFormatter("JSONString");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDocumentExtractionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDocumentExtractionResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput?> files, global::System.String? jsonConfig, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(files, jsonConfig);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDocumentExtractionResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput?> files, global::System.String? jsonConfig, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(files, jsonConfig);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput?> files, global::System.String? jsonConfig)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("files", FormatFiles(files));
            variables.Add("jsonConfig", FormatJsonConfig(jsonConfig));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DocumentExtractionMutationDocument.Instance.Hash.Value, name: "DocumentExtraction", document: DocumentExtractionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFiles(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput?> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    value_list.Add(value_elm);
                }
                else
                {
                    value_list.Add(_fileInputFormatter.Format(value_elm));
                }
            }

            return value_list;
        }

        private global::System.Object? FormatJsonConfig(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _jSONStringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DocumentExtraction GraphQL operation
    /// <code>
    /// mutation DocumentExtraction($files: [FileInput]!, $jsonConfig: JSONString) {
    ///   documentExtraction(files: $files, jsonConfig: $jsonConfig) {
    ///     __typename
    ///     jobIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDocumentExtractionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDocumentExtractionResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput?> files, global::System.String? jsonConfig, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDocumentExtractionResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput?> files, global::System.String? jsonConfig, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the WorkflowGetStatus GraphQL operation
    /// <code>
    /// query WorkflowGetStatus($workflowId: Int!) {
    ///   workflows(workflowIds: [ $workflowId ]) {
    ///     __typename
    ///     workflows {
    ///       __typename
    ///       status
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatusQueryDocument : global::StrawberryShake.IDocument
    {
        private WorkflowGetStatusQueryDocument()
        {
        }

        public static WorkflowGetStatusQueryDocument Instance
        {
            get;
        }

        = new WorkflowGetStatusQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x28, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "176cb100ee6c6ac28ce4750ef91ec265");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowGetStatus GraphQL operation
    /// <code>
    /// query WorkflowGetStatus($workflowId: Int!) {
    ///   workflows(workflowIds: [ $workflowId ]) {
    ///     __typename
    ///     workflows {
    ///       __typename
    ///       status
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatusQuery : global::IndicoV2.StrawberryShake.IWorkflowGetStatusQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IWorkflowGetStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public WorkflowGetStatusQuery(global::StrawberryShake.IOperationExecutor<IWorkflowGetStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IWorkflowGetStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowGetStatusResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(workflowId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowGetStatusResult>> Watch(global::System.Int32 workflowId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(workflowId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 workflowId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("workflowId", FormatWorkflowId(workflowId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: WorkflowGetStatusQueryDocument.Instance.Hash.Value, name: "WorkflowGetStatus", document: WorkflowGetStatusQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWorkflowId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowGetStatus GraphQL operation
    /// <code>
    /// query WorkflowGetStatus($workflowId: Int!) {
    ///   workflows(workflowIds: [ $workflowId ]) {
    ///     __typename
    ///     workflows {
    ///       __typename
    ///       status
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowGetStatusQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowGetStatusResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowGetStatusResult>> Watch(global::System.Int32 workflowId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the WorkflowAddData GraphQL operation
    /// <code>
    /// mutation WorkflowAddData($workflowId: Int!) {
    ///   addDataToWorkflow(workflowId: $workflowId) {
    ///     __typename
    ///     workflow {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddDataMutationDocument : global::StrawberryShake.IDocument
    {
        private WorkflowAddDataMutationDocument()
        {
        }

        public static WorkflowAddDataMutationDocument Instance
        {
            get;
        }

        = new WorkflowAddDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x28, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "3e6d4c4045b277032f65926eb44d75b9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowAddData GraphQL operation
    /// <code>
    /// mutation WorkflowAddData($workflowId: Int!) {
    ///   addDataToWorkflow(workflowId: $workflowId) {
    ///     __typename
    ///     workflow {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddDataMutation : global::IndicoV2.StrawberryShake.IWorkflowAddDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IWorkflowAddDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public WorkflowAddDataMutation(global::StrawberryShake.IOperationExecutor<IWorkflowAddDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IWorkflowAddDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowAddDataResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(workflowId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowAddDataResult>> Watch(global::System.Int32 workflowId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(workflowId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 workflowId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("workflowId", FormatWorkflowId(workflowId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: WorkflowAddDataMutationDocument.Instance.Hash.Value, name: "WorkflowAddData", document: WorkflowAddDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWorkflowId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowAddData GraphQL operation
    /// <code>
    /// mutation WorkflowAddData($workflowId: Int!) {
    ///   addDataToWorkflow(workflowId: $workflowId) {
    ///     __typename
    ///     workflow {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowAddDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowAddDataResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowAddDataResult>> Watch(global::System.Int32 workflowId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ListWorkflows GraphQL operation
    /// <code>
    /// query ListWorkflows($datasetIds: [Int], $workflowIds: [Int]) {
    ///   workflows(datasetIds: $datasetIds, workflowIds: $workflowIds) {
    ///     __typename
    ///     workflows {
    ///       __typename
    ///       id
    ///       name
    ///       reviewEnabled
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflowsQueryDocument : global::StrawberryShake.IDocument
    {
        private ListWorkflowsQueryDocument()
        {
        }

        public static ListWorkflowsQueryDocument Instance
        {
            get;
        }

        = new ListWorkflowsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x49, 0x6e, 0x74, 0x5d, 0x2c, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x49, 0x6e, 0x74, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x28, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "985e288feaa123aa743c44e819d8b747");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ListWorkflows GraphQL operation
    /// <code>
    /// query ListWorkflows($datasetIds: [Int], $workflowIds: [Int]) {
    ///   workflows(datasetIds: $datasetIds, workflowIds: $workflowIds) {
    ///     __typename
    ///     workflows {
    ///       __typename
    ///       id
    ///       name
    ///       reviewEnabled
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflowsQuery : global::IndicoV2.StrawberryShake.IListWorkflowsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IListWorkflowsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public ListWorkflowsQuery(global::StrawberryShake.IOperationExecutor<IListWorkflowsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IListWorkflowsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListWorkflowsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datasetIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(datasetIds, workflowIds);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IListWorkflowsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datasetIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(datasetIds, workflowIds);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datasetIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("datasetIds", FormatDatasetIds(datasetIds));
            variables.Add("workflowIds", FormatWorkflowIds(workflowIds));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ListWorkflowsQueryDocument.Instance.Hash.Value, name: "ListWorkflows", document: ListWorkflowsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDatasetIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        value_list.Add(value_elm);
                    }
                    else
                    {
                        value_list.Add(_intFormatter.Format(value_elm));
                    }
                }

                return value_list;
            }
        }

        private global::System.Object? FormatWorkflowIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        value_list.Add(value_elm);
                    }
                    else
                    {
                        value_list.Add(_intFormatter.Format(value_elm));
                    }
                }

                return value_list;
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ListWorkflows GraphQL operation
    /// <code>
    /// query ListWorkflows($datasetIds: [Int], $workflowIds: [Int]) {
    ///   workflows(datasetIds: $datasetIds, workflowIds: $workflowIds) {
    ///     __typename
    ///     workflows {
    ///       __typename
    ///       id
    ///       name
    ///       reviewEnabled
    ///       ... on Workflow {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListWorkflowsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListWorkflowsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datasetIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IListWorkflowsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datasetIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the WorkflowSubmission GraphQL operation
    /// <code>
    /// mutation WorkflowSubmission($workflowId: Int!, $files: [FileInput!]!, $bundle: Boolean, $resultVersion: SubmissionResultVersion) {
    ///   workflowSubmission(workflowId: $workflowId, files: $files, bundle: $bundle, resultVersion: $resultVersion) {
    ///     __typename
    ///     jobIds
    ///     submissionIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowSubmissionMutationDocument : global::StrawberryShake.IDocument
    {
        private WorkflowSubmissionMutationDocument()
        {
        }

        public static WorkflowSubmissionMutationDocument Instance
        {
            get;
        }

        = new WorkflowSubmissionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x5b, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "30ee2958f9ae1bd85e2ab8c543a8daf6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowSubmission GraphQL operation
    /// <code>
    /// mutation WorkflowSubmission($workflowId: Int!, $files: [FileInput!]!, $bundle: Boolean, $resultVersion: SubmissionResultVersion) {
    ///   workflowSubmission(workflowId: $workflowId, files: $files, bundle: $bundle, resultVersion: $resultVersion) {
    ///     __typename
    ///     jobIds
    ///     submissionIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowSubmissionMutation : global::IndicoV2.StrawberryShake.IWorkflowSubmissionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IWorkflowSubmissionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _fileInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _submissionResultVersionFormatter;
        public WorkflowSubmissionMutation(global::StrawberryShake.IOperationExecutor<IWorkflowSubmissionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _fileInputFormatter = serializerResolver.GetInputValueFormatter("FileInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
            _submissionResultVersionFormatter = serializerResolver.GetInputValueFormatter("SubmissionResultVersion");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IWorkflowSubmissionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowSubmissionResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput> files, global::System.Boolean? bundle, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(workflowId, files, bundle, resultVersion);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowSubmissionResult>> Watch(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput> files, global::System.Boolean? bundle, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(workflowId, files, bundle, resultVersion);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput> files, global::System.Boolean? bundle, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("workflowId", FormatWorkflowId(workflowId));
            variables.Add("files", FormatFiles(files));
            variables.Add("bundle", FormatBundle(bundle));
            variables.Add("resultVersion", FormatResultVersion(resultVersion));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: WorkflowSubmissionMutationDocument.Instance.Hash.Value, name: "WorkflowSubmission", document: WorkflowSubmissionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWorkflowId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatFiles(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(value_elm));
                }

                value_list.Add(_fileInputFormatter.Format(value_elm));
            }

            return value_list;
        }

        private global::System.Object? FormatBundle(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatResultVersion(global::IndicoV2.StrawberryShake.SubmissionResultVersion? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _submissionResultVersionFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowSubmission GraphQL operation
    /// <code>
    /// mutation WorkflowSubmission($workflowId: Int!, $files: [FileInput!]!, $bundle: Boolean, $resultVersion: SubmissionResultVersion) {
    ///   workflowSubmission(workflowId: $workflowId, files: $files, bundle: $bundle, resultVersion: $resultVersion) {
    ///     __typename
    ///     jobIds
    ///     submissionIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowSubmissionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowSubmissionResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput> files, global::System.Boolean? bundle, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowSubmissionResult>> Watch(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.FileInput> files, global::System.Boolean? bundle, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the WorkflowUrlSubmission GraphQL operation
    /// <code>
    /// mutation WorkflowUrlSubmission($workflowId: Int!, $urls: [String]!, $resultVersion: SubmissionResultVersion) {
    ///   workflowUrlSubmission(workflowId: $workflowId, urls: $urls, resultVersion: $resultVersion) {
    ///     __typename
    ///     jobIds
    ///     submissionIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowUrlSubmissionMutationDocument : global::StrawberryShake.IDocument
    {
        private WorkflowUrlSubmissionMutationDocument()
        {
        }

        public static WorkflowUrlSubmissionMutationDocument Instance
        {
            get;
        }

        = new WorkflowUrlSubmissionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x75, 0x72, 0x6c, 0x73, 0x3a, 0x20, 0x5b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x21, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x2c, 0x20, 0x75, 0x72, 0x6c, 0x73, 0x3a, 0x20, 0x24, 0x75, 0x72, 0x6c, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "fa8d048e379f7768f98f13b8425e8e18");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowUrlSubmission GraphQL operation
    /// <code>
    /// mutation WorkflowUrlSubmission($workflowId: Int!, $urls: [String]!, $resultVersion: SubmissionResultVersion) {
    ///   workflowUrlSubmission(workflowId: $workflowId, urls: $urls, resultVersion: $resultVersion) {
    ///     __typename
    ///     jobIds
    ///     submissionIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowUrlSubmissionMutation : global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IWorkflowUrlSubmissionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _submissionResultVersionFormatter;
        public WorkflowUrlSubmissionMutation(global::StrawberryShake.IOperationExecutor<IWorkflowUrlSubmissionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _submissionResultVersionFormatter = serializerResolver.GetInputValueFormatter("SubmissionResultVersion");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IWorkflowUrlSubmissionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowUrlSubmissionResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> urls, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(workflowId, urls, resultVersion);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowUrlSubmissionResult>> Watch(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> urls, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(workflowId, urls, resultVersion);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> urls, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("workflowId", FormatWorkflowId(workflowId));
            variables.Add("urls", FormatUrls(urls));
            variables.Add("resultVersion", FormatResultVersion(resultVersion));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: WorkflowUrlSubmissionMutationDocument.Instance.Hash.Value, name: "WorkflowUrlSubmission", document: WorkflowUrlSubmissionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWorkflowId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatUrls(global::System.Collections.Generic.IReadOnlyList<global::System.String?> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    value_list.Add(value_elm);
                }
                else
                {
                    value_list.Add(_stringFormatter.Format(value_elm));
                }
            }

            return value_list;
        }

        private global::System.Object? FormatResultVersion(global::IndicoV2.StrawberryShake.SubmissionResultVersion? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _submissionResultVersionFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the WorkflowUrlSubmission GraphQL operation
    /// <code>
    /// mutation WorkflowUrlSubmission($workflowId: Int!, $urls: [String]!, $resultVersion: SubmissionResultVersion) {
    ///   workflowUrlSubmission(workflowId: $workflowId, urls: $urls, resultVersion: $resultVersion) {
    ///     __typename
    ///     jobIds
    ///     submissionIds
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IWorkflowUrlSubmissionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IWorkflowUrlSubmissionResult>> ExecuteAsync(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> urls, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IWorkflowUrlSubmissionResult>> Watch(global::System.Int32 workflowId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> urls, global::IndicoV2.StrawberryShake.SubmissionResultVersion? resultVersion, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ListSubmissions GraphQL operation
    /// <code>
    /// query ListSubmissions($submissionIds: [Int], $workflowIds: [Int], $filters: SubmissionFilter, $limit: Int, $orderBy: SUBMISSION_COLUMN_ENUM, $desc: Boolean, $after: Int) {
    ///   submissions(submissionIds: $submissionIds, workflowIds: $workflowIds, filters: $filters, limit: $limit, orderBy: $orderBy, desc: $desc, after: $after) {
    ///     __typename
    ///     submissions {
    ///       __typename
    ///       id
    ///       datasetId
    ///       workflowId
    ///       status
    ///       createdAt
    ///       updatedAt
    ///       createdBy
    ///       updatedBy
    ///       completedAt
    ///       errors
    ///       filesDeleted
    ///       inputFiles {
    ///         __typename
    ///         id
    ///         filepath
    ///         filename
    ///         filetype
    ///         submissionId
    ///         fileSize
    ///         numPages
    ///         ... on SubmissionFile {
    ///           id
    ///         }
    ///       }
    ///       inputFile
    ///       inputFilename
    ///       resultFile
    ///       outputFiles {
    ///         __typename
    ///         id
    ///         filepath
    ///         submissionId
    ///         componentId
    ///         createdAt
    ///         ... on SubmissionOutput {
    ///           id
    ///         }
    ///       }
    ///       retrieved
    ///       autoReview {
    ///         __typename
    ///         id
    ///         submissionId
    ///         createdAt
    ///         createdBy
    ///         startedAt
    ///         completedAt
    ///         rejected
    ///         reviewType
    ///         notes
    ///         ... on Review {
    ///           id
    ///         }
    ///       }
    ///       retries {
    ///         __typename
    ///         id
    ///         submissionId
    ///         previousErrors
    ///         previousStatus
    ///         retryErrors
    ///         ... on SubmissionRetry {
    ///           id
    ///         }
    ///       }
    ///       reviews {
    ///         __typename
    ///         id
    ///         submissionId
    ///         createdAt
    ///         createdBy
    ///         startedAt
    ///         completedAt
    ///         rejected
    ///         reviewType
    ///         notes
    ///         ... on Review {
    ///           id
    ///         }
    ///       }
    ///       reviewInProgress
    ///       ... on Submission {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissionsQueryDocument : global::StrawberryShake.IDocument
    {
        private ListSubmissionsQueryDocument()
        {
        }

        public static ListSubmissionsQueryDocument Instance
        {
            get;
        }

        = new ListSubmissionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x49, 0x6e, 0x74, 0x5d, 0x2c, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x49, 0x6e, 0x74, 0x5d, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x3a, 0x20, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x73, 0x63, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x73, 0x63, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "a3e8646fffd48e06e764714ca2e79b98");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ListSubmissions GraphQL operation
    /// <code>
    /// query ListSubmissions($submissionIds: [Int], $workflowIds: [Int], $filters: SubmissionFilter, $limit: Int, $orderBy: SUBMISSION_COLUMN_ENUM, $desc: Boolean, $after: Int) {
    ///   submissions(submissionIds: $submissionIds, workflowIds: $workflowIds, filters: $filters, limit: $limit, orderBy: $orderBy, desc: $desc, after: $after) {
    ///     __typename
    ///     submissions {
    ///       __typename
    ///       id
    ///       datasetId
    ///       workflowId
    ///       status
    ///       createdAt
    ///       updatedAt
    ///       createdBy
    ///       updatedBy
    ///       completedAt
    ///       errors
    ///       filesDeleted
    ///       inputFiles {
    ///         __typename
    ///         id
    ///         filepath
    ///         filename
    ///         filetype
    ///         submissionId
    ///         fileSize
    ///         numPages
    ///         ... on SubmissionFile {
    ///           id
    ///         }
    ///       }
    ///       inputFile
    ///       inputFilename
    ///       resultFile
    ///       outputFiles {
    ///         __typename
    ///         id
    ///         filepath
    ///         submissionId
    ///         componentId
    ///         createdAt
    ///         ... on SubmissionOutput {
    ///           id
    ///         }
    ///       }
    ///       retrieved
    ///       autoReview {
    ///         __typename
    ///         id
    ///         submissionId
    ///         createdAt
    ///         createdBy
    ///         startedAt
    ///         completedAt
    ///         rejected
    ///         reviewType
    ///         notes
    ///         ... on Review {
    ///           id
    ///         }
    ///       }
    ///       retries {
    ///         __typename
    ///         id
    ///         submissionId
    ///         previousErrors
    ///         previousStatus
    ///         retryErrors
    ///         ... on SubmissionRetry {
    ///           id
    ///         }
    ///       }
    ///       reviews {
    ///         __typename
    ///         id
    ///         submissionId
    ///         createdAt
    ///         createdBy
    ///         startedAt
    ///         completedAt
    ///         rejected
    ///         reviewType
    ///         notes
    ///         ... on Review {
    ///           id
    ///         }
    ///       }
    ///       reviewInProgress
    ///       ... on Submission {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissionsQuery : global::IndicoV2.StrawberryShake.IListSubmissionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IListSubmissionsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _submissionFilterFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _sUBMISSION_COLUMN_ENUMFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public ListSubmissionsQuery(global::StrawberryShake.IOperationExecutor<IListSubmissionsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _submissionFilterFormatter = serializerResolver.GetInputValueFormatter("SubmissionFilter");
            _sUBMISSION_COLUMN_ENUMFormatter = serializerResolver.GetInputValueFormatter("SUBMISSION_COLUMN_ENUM");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IListSubmissionsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListSubmissionsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::IndicoV2.StrawberryShake.SubmissionFilter? filters, global::System.Int32? limit, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM? orderBy, global::System.Boolean? desc, global::System.Int32? after, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(submissionIds, workflowIds, filters, limit, orderBy, desc, after);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IListSubmissionsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::IndicoV2.StrawberryShake.SubmissionFilter? filters, global::System.Int32? limit, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM? orderBy, global::System.Boolean? desc, global::System.Int32? after, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(submissionIds, workflowIds, filters, limit, orderBy, desc, after);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::IndicoV2.StrawberryShake.SubmissionFilter? filters, global::System.Int32? limit, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM? orderBy, global::System.Boolean? desc, global::System.Int32? after)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("submissionIds", FormatSubmissionIds(submissionIds));
            variables.Add("workflowIds", FormatWorkflowIds(workflowIds));
            variables.Add("filters", FormatFilters(filters));
            variables.Add("limit", FormatLimit(limit));
            variables.Add("orderBy", FormatOrderBy(orderBy));
            variables.Add("desc", FormatDesc(desc));
            variables.Add("after", FormatAfter(after));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ListSubmissionsQueryDocument.Instance.Hash.Value, name: "ListSubmissions", document: ListSubmissionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSubmissionIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        value_list.Add(value_elm);
                    }
                    else
                    {
                        value_list.Add(_intFormatter.Format(value_elm));
                    }
                }

                return value_list;
            }
        }

        private global::System.Object? FormatWorkflowIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        value_list.Add(value_elm);
                    }
                    else
                    {
                        value_list.Add(_intFormatter.Format(value_elm));
                    }
                }

                return value_list;
            }
        }

        private global::System.Object? FormatFilters(global::IndicoV2.StrawberryShake.SubmissionFilter? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _submissionFilterFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLimit(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOrderBy(global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _sUBMISSION_COLUMN_ENUMFormatter.Format(value);
            }
        }

        private global::System.Object? FormatDesc(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatAfter(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ListSubmissions GraphQL operation
    /// <code>
    /// query ListSubmissions($submissionIds: [Int], $workflowIds: [Int], $filters: SubmissionFilter, $limit: Int, $orderBy: SUBMISSION_COLUMN_ENUM, $desc: Boolean, $after: Int) {
    ///   submissions(submissionIds: $submissionIds, workflowIds: $workflowIds, filters: $filters, limit: $limit, orderBy: $orderBy, desc: $desc, after: $after) {
    ///     __typename
    ///     submissions {
    ///       __typename
    ///       id
    ///       datasetId
    ///       workflowId
    ///       status
    ///       createdAt
    ///       updatedAt
    ///       createdBy
    ///       updatedBy
    ///       completedAt
    ///       errors
    ///       filesDeleted
    ///       inputFiles {
    ///         __typename
    ///         id
    ///         filepath
    ///         filename
    ///         filetype
    ///         submissionId
    ///         fileSize
    ///         numPages
    ///         ... on SubmissionFile {
    ///           id
    ///         }
    ///       }
    ///       inputFile
    ///       inputFilename
    ///       resultFile
    ///       outputFiles {
    ///         __typename
    ///         id
    ///         filepath
    ///         submissionId
    ///         componentId
    ///         createdAt
    ///         ... on SubmissionOutput {
    ///           id
    ///         }
    ///       }
    ///       retrieved
    ///       autoReview {
    ///         __typename
    ///         id
    ///         submissionId
    ///         createdAt
    ///         createdBy
    ///         startedAt
    ///         completedAt
    ///         rejected
    ///         reviewType
    ///         notes
    ///         ... on Review {
    ///           id
    ///         }
    ///       }
    ///       retries {
    ///         __typename
    ///         id
    ///         submissionId
    ///         previousErrors
    ///         previousStatus
    ///         retryErrors
    ///         ... on SubmissionRetry {
    ///           id
    ///         }
    ///       }
    ///       reviews {
    ///         __typename
    ///         id
    ///         submissionId
    ///         createdAt
    ///         createdBy
    ///         startedAt
    ///         completedAt
    ///         rejected
    ///         reviewType
    ///         notes
    ///         ... on Review {
    ///           id
    ///         }
    ///       }
    ///       reviewInProgress
    ///       ... on Submission {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IListSubmissionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IListSubmissionsResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::IndicoV2.StrawberryShake.SubmissionFilter? filters, global::System.Int32? limit, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM? orderBy, global::System.Boolean? desc, global::System.Int32? after, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IListSubmissionsResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? workflowIds, global::IndicoV2.StrawberryShake.SubmissionFilter? filters, global::System.Int32? limit, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM? orderBy, global::System.Boolean? desc, global::System.Int32? after, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateSubmission GraphQL operation
    /// <code>
    /// mutation UpdateSubmission($submissionId: Int!, $retrieved: Boolean) {
    ///   updateSubmission(submissionId: $submissionId, retrieved: $retrieved) {
    ///     __typename
    ///     id
    ///     datasetId
    ///     workflowId
    ///     status
    ///     inputFile
    ///     inputFilename
    ///     resultFile
    ///     retrieved
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmissionMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateSubmissionMutationDocument()
        {
        }

        public static UpdateSubmissionMutationDocument Instance
        {
            get;
        }

        = new UpdateSubmissionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "ea760b37d332f72df316fe0d74290dcf");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateSubmission GraphQL operation
    /// <code>
    /// mutation UpdateSubmission($submissionId: Int!, $retrieved: Boolean) {
    ///   updateSubmission(submissionId: $submissionId, retrieved: $retrieved) {
    ///     __typename
    ///     id
    ///     datasetId
    ///     workflowId
    ///     status
    ///     inputFile
    ///     inputFilename
    ///     resultFile
    ///     retrieved
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmissionMutation : global::IndicoV2.StrawberryShake.IUpdateSubmissionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateSubmissionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public UpdateSubmissionMutation(global::StrawberryShake.IOperationExecutor<IUpdateSubmissionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateSubmissionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateSubmissionResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Boolean? retrieved, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(submissionId, retrieved);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateSubmissionResult>> Watch(global::System.Int32 submissionId, global::System.Boolean? retrieved, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(submissionId, retrieved);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 submissionId, global::System.Boolean? retrieved)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("submissionId", FormatSubmissionId(submissionId));
            variables.Add("retrieved", FormatRetrieved(retrieved));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateSubmissionMutationDocument.Instance.Hash.Value, name: "UpdateSubmission", document: UpdateSubmissionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSubmissionId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatRetrieved(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateSubmission GraphQL operation
    /// <code>
    /// mutation UpdateSubmission($submissionId: Int!, $retrieved: Boolean) {
    ///   updateSubmission(submissionId: $submissionId, retrieved: $retrieved) {
    ///     __typename
    ///     id
    ///     datasetId
    ///     workflowId
    ///     status
    ///     inputFile
    ///     inputFilename
    ///     resultFile
    ///     retrieved
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUpdateSubmissionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateSubmissionResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Boolean? retrieved, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateSubmissionResult>> Watch(global::System.Int32 submissionId, global::System.Boolean? retrieved, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSubmission GraphQL operation
    /// <code>
    /// query GetSubmission($submissionId: Int!) {
    ///   submission(id: $submissionId) {
    ///     __typename
    ///     id
    ///     datasetId
    ///     workflowId
    ///     status
    ///     createdAt
    ///     updatedAt
    ///     createdBy
    ///     updatedBy
    ///     completedAt
    ///     errors
    ///     filesDeleted
    ///     inputFiles {
    ///       __typename
    ///       id
    ///       filepath
    ///       filename
    ///       filetype
    ///       submissionId
    ///       fileSize
    ///       numPages
    ///       ... on SubmissionFile {
    ///         id
    ///       }
    ///     }
    ///     inputFile
    ///     inputFilename
    ///     resultFile
    ///     outputFiles {
    ///       __typename
    ///       id
    ///       filepath
    ///       submissionId
    ///       componentId
    ///       createdAt
    ///       ... on SubmissionOutput {
    ///         id
    ///       }
    ///     }
    ///     retrieved
    ///     autoReview {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     retries {
    ///       __typename
    ///       id
    ///       submissionId
    ///       previousErrors
    ///       previousStatus
    ///       retryErrors
    ///       ... on SubmissionRetry {
    ///         id
    ///       }
    ///     }
    ///     reviews {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     reviewInProgress
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmissionQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSubmissionQueryDocument()
        {
        }

        public static GetSubmissionQueryDocument Instance
        {
            get;
        }

        = new GetSubmissionQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "6ef7618e80e3f9880948511d4879c8e8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSubmission GraphQL operation
    /// <code>
    /// query GetSubmission($submissionId: Int!) {
    ///   submission(id: $submissionId) {
    ///     __typename
    ///     id
    ///     datasetId
    ///     workflowId
    ///     status
    ///     createdAt
    ///     updatedAt
    ///     createdBy
    ///     updatedBy
    ///     completedAt
    ///     errors
    ///     filesDeleted
    ///     inputFiles {
    ///       __typename
    ///       id
    ///       filepath
    ///       filename
    ///       filetype
    ///       submissionId
    ///       fileSize
    ///       numPages
    ///       ... on SubmissionFile {
    ///         id
    ///       }
    ///     }
    ///     inputFile
    ///     inputFilename
    ///     resultFile
    ///     outputFiles {
    ///       __typename
    ///       id
    ///       filepath
    ///       submissionId
    ///       componentId
    ///       createdAt
    ///       ... on SubmissionOutput {
    ///         id
    ///       }
    ///     }
    ///     retrieved
    ///     autoReview {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     retries {
    ///       __typename
    ///       id
    ///       submissionId
    ///       previousErrors
    ///       previousStatus
    ///       retryErrors
    ///       ... on SubmissionRetry {
    ///         id
    ///       }
    ///     }
    ///     reviews {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     reviewInProgress
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmissionQuery : global::IndicoV2.StrawberryShake.IGetSubmissionQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSubmissionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetSubmissionQuery(global::StrawberryShake.IOperationExecutor<IGetSubmissionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSubmissionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSubmissionResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(submissionId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSubmissionResult>> Watch(global::System.Int32 submissionId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(submissionId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 submissionId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("submissionId", FormatSubmissionId(submissionId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSubmissionQueryDocument.Instance.Hash.Value, name: "GetSubmission", document: GetSubmissionQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSubmissionId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSubmission GraphQL operation
    /// <code>
    /// query GetSubmission($submissionId: Int!) {
    ///   submission(id: $submissionId) {
    ///     __typename
    ///     id
    ///     datasetId
    ///     workflowId
    ///     status
    ///     createdAt
    ///     updatedAt
    ///     createdBy
    ///     updatedBy
    ///     completedAt
    ///     errors
    ///     filesDeleted
    ///     inputFiles {
    ///       __typename
    ///       id
    ///       filepath
    ///       filename
    ///       filetype
    ///       submissionId
    ///       fileSize
    ///       numPages
    ///       ... on SubmissionFile {
    ///         id
    ///       }
    ///     }
    ///     inputFile
    ///     inputFilename
    ///     resultFile
    ///     outputFiles {
    ///       __typename
    ///       id
    ///       filepath
    ///       submissionId
    ///       componentId
    ///       createdAt
    ///       ... on SubmissionOutput {
    ///         id
    ///       }
    ///     }
    ///     retrieved
    ///     autoReview {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     retries {
    ///       __typename
    ///       id
    ///       submissionId
    ///       previousErrors
    ///       previousStatus
    ///       retryErrors
    ///       ... on SubmissionRetry {
    ///         id
    ///       }
    ///     }
    ///     reviews {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     reviewInProgress
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetSubmissionQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSubmissionResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSubmissionResult>> Watch(global::System.Int32 submissionId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateSubmissionResults GraphQL operation
    /// <code>
    /// mutation CreateSubmissionResults($submissionId: Int!) {
    ///   submissionResults(submissionId: $submissionId) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CreateSubmissionResultsMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateSubmissionResultsMutationDocument()
        {
        }

        public static CreateSubmissionResultsMutationDocument Instance
        {
            get;
        }

        = new CreateSubmissionResultsMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x28, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x28, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "1c9c62cb8f422880ac5d999470e449ec");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateSubmissionResults GraphQL operation
    /// <code>
    /// mutation CreateSubmissionResults($submissionId: Int!) {
    ///   submissionResults(submissionId: $submissionId) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CreateSubmissionResultsMutation : global::IndicoV2.StrawberryShake.ICreateSubmissionResultsMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateSubmissionResultsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public CreateSubmissionResultsMutation(global::StrawberryShake.IOperationExecutor<ICreateSubmissionResultsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateSubmissionResultsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateSubmissionResultsResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(submissionId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateSubmissionResultsResult>> Watch(global::System.Int32 submissionId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(submissionId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 submissionId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("submissionId", FormatSubmissionId(submissionId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateSubmissionResultsMutationDocument.Instance.Hash.Value, name: "CreateSubmissionResults", document: CreateSubmissionResultsMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSubmissionId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateSubmissionResults GraphQL operation
    /// <code>
    /// mutation CreateSubmissionResults($submissionId: Int!) {
    ///   submissionResults(submissionId: $submissionId) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ICreateSubmissionResultsMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateSubmissionResultsResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateSubmissionResultsResult>> Watch(global::System.Int32 submissionId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the JobStatus GraphQL operation
    /// <code>
    /// query JobStatus($id: String!) {
    ///   job(id: $id) {
    ///     __typename
    ///     id
    ///     ready
    ///     status
    ///     result
    ///     ... on Job {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatusQueryDocument : global::StrawberryShake.IDocument
    {
        private JobStatusQueryDocument()
        {
        }

        public static JobStatusQueryDocument Instance
        {
            get;
        }

        = new JobStatusQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6a, 0x6f, 0x62, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4a, 0x6f, 0x62, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "8b5ab06961dbddc7c1800f4c195a83a4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the JobStatus GraphQL operation
    /// <code>
    /// query JobStatus($id: String!) {
    ///   job(id: $id) {
    ///     __typename
    ///     id
    ///     ready
    ///     status
    ///     result
    ///     ... on Job {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatusQuery : global::IndicoV2.StrawberryShake.IJobStatusQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IJobStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public JobStatusQuery(global::StrawberryShake.IOperationExecutor<IJobStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IJobStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IJobStatusResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IJobStatusResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: JobStatusQueryDocument.Instance.Hash.Value, name: "JobStatus", document: JobStatusQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the JobStatus GraphQL operation
    /// <code>
    /// query JobStatus($id: String!) {
    ///   job(id: $id) {
    ///     __typename
    ///     id
    ///     ready
    ///     status
    ///     result
    ///     ... on Job {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IJobStatusQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IJobStatusResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IJobStatusResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DatasetUploadStatus GraphQL operation
    /// <code>
    /// query DatasetUploadStatus($id: Int!) {
    ///   dataset(id: $id) {
    ///     __typename
    ///     id
    ///     status
    ///     files {
    ///       __typename
    ///       id
    ///       name
    ///       deleted
    ///       fileSize
    ///       rainbowUrl
    ///       fileType
    ///       fileHash
    ///       status
    ///       statusMeta
    ///       failureType
    ///       ... on DataFile {
    ///         id
    ///       }
    ///     }
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatusQueryDocument : global::StrawberryShake.IDocument
    {
        private DatasetUploadStatusQueryDocument()
        {
        }

        public static DatasetUploadStatusQueryDocument Instance
        {
            get;
        }

        = new DatasetUploadStatusQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "ee083ef56ca816b6383a5e23631fe16f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DatasetUploadStatus GraphQL operation
    /// <code>
    /// query DatasetUploadStatus($id: Int!) {
    ///   dataset(id: $id) {
    ///     __typename
    ///     id
    ///     status
    ///     files {
    ///       __typename
    ///       id
    ///       name
    ///       deleted
    ///       fileSize
    ///       rainbowUrl
    ///       fileType
    ///       fileHash
    ///       status
    ///       statusMeta
    ///       failureType
    ///       ... on DataFile {
    ///         id
    ///       }
    ///     }
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatusQuery : global::IndicoV2.StrawberryShake.IDatasetUploadStatusQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDatasetUploadStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DatasetUploadStatusQuery(global::StrawberryShake.IOperationExecutor<IDatasetUploadStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDatasetUploadStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDatasetUploadStatusResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDatasetUploadStatusResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DatasetUploadStatusQueryDocument.Instance.Hash.Value, name: "DatasetUploadStatus", document: DatasetUploadStatusQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DatasetUploadStatus GraphQL operation
    /// <code>
    /// query DatasetUploadStatus($id: Int!) {
    ///   dataset(id: $id) {
    ///     __typename
    ///     id
    ///     status
    ///     files {
    ///       __typename
    ///       id
    ///       name
    ///       deleted
    ///       fileSize
    ///       rainbowUrl
    ///       fileType
    ///       fileHash
    ///       status
    ///       statusMeta
    ///       failureType
    ///       ... on DataFile {
    ///         id
    ///       }
    ///     }
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDatasetUploadStatusQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDatasetUploadStatusResult>> ExecuteAsync(global::System.Int32 id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDatasetUploadStatusResult>> Watch(global::System.Int32 id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DataSetAddFiles GraphQL operation
    /// <code>
    /// mutation DataSetAddFiles($datasetId: Int!, $metadata: JSONString!) {
    ///   addDatasetFiles(datasetId: $datasetId, metadataList: $metadata) {
    ///     __typename
    ///     id
    ///     status
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFilesMutationDocument : global::StrawberryShake.IDocument
    {
        private DataSetAddFilesMutationDocument()
        {
        }

        public static DataSetAddFilesMutationDocument Instance
        {
            get;
        }

        = new DataSetAddFilesMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x28, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "460ad53bbc9a8f38b0f5e94284385bee");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetAddFiles GraphQL operation
    /// <code>
    /// mutation DataSetAddFiles($datasetId: Int!, $metadata: JSONString!) {
    ///   addDatasetFiles(datasetId: $datasetId, metadataList: $metadata) {
    ///     __typename
    ///     id
    ///     status
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFilesMutation : global::IndicoV2.StrawberryShake.IDataSetAddFilesMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDataSetAddFilesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _jSONStringFormatter;
        public DataSetAddFilesMutation(global::StrawberryShake.IOperationExecutor<IDataSetAddFilesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _jSONStringFormatter = serializerResolver.GetInputValueFormatter("JSONString");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDataSetAddFilesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetAddFilesResult>> ExecuteAsync(global::System.Int32 datasetId, global::System.String metadata, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(datasetId, metadata);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetAddFilesResult>> Watch(global::System.Int32 datasetId, global::System.String metadata, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(datasetId, metadata);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 datasetId, global::System.String metadata)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("datasetId", FormatDatasetId(datasetId));
            variables.Add("metadata", FormatMetadata(metadata));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DataSetAddFilesMutationDocument.Instance.Hash.Value, name: "DataSetAddFiles", document: DataSetAddFilesMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDatasetId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatMetadata(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _jSONStringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetAddFiles GraphQL operation
    /// <code>
    /// mutation DataSetAddFiles($datasetId: Int!, $metadata: JSONString!) {
    ///   addDatasetFiles(datasetId: $datasetId, metadataList: $metadata) {
    ///     __typename
    ///     id
    ///     status
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetAddFilesMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetAddFilesResult>> ExecuteAsync(global::System.Int32 datasetId, global::System.String metadata, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetAddFilesResult>> Watch(global::System.Int32 datasetId, global::System.String metadata, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DataSetProcessFiles GraphQL operation
    /// <code>
    /// mutation DataSetProcessFiles($datasetId: Int!, $datafileIds: [Int]) {
    ///   addDataFiles(datasetId: $datasetId, datafileIds: $datafileIds) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFilesMutationDocument : global::StrawberryShake.IDocument
    {
        private DataSetProcessFilesMutationDocument()
        {
        }

        public static DataSetProcessFilesMutationDocument Instance
        {
            get;
        }

        = new DataSetProcessFilesMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x49, 0x6e, 0x74, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x28, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "2b43ac4315ae7de8ef0eefd030537a70");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetProcessFiles GraphQL operation
    /// <code>
    /// mutation DataSetProcessFiles($datasetId: Int!, $datafileIds: [Int]) {
    ///   addDataFiles(datasetId: $datasetId, datafileIds: $datafileIds) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFilesMutation : global::IndicoV2.StrawberryShake.IDataSetProcessFilesMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDataSetProcessFilesResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DataSetProcessFilesMutation(global::StrawberryShake.IOperationExecutor<IDataSetProcessFilesResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDataSetProcessFilesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetProcessFilesResult>> ExecuteAsync(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(datasetId, datafileIds);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetProcessFilesResult>> Watch(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(datasetId, datafileIds);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("datasetId", FormatDatasetId(datasetId));
            variables.Add("datafileIds", FormatDatafileIds(datafileIds));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DataSetProcessFilesMutationDocument.Instance.Hash.Value, name: "DataSetProcessFiles", document: DataSetProcessFilesMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDatasetId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatDatafileIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        value_list.Add(value_elm);
                    }
                    else
                    {
                        value_list.Add(_intFormatter.Format(value_elm));
                    }
                }

                return value_list;
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetProcessFiles GraphQL operation
    /// <code>
    /// mutation DataSetProcessFiles($datasetId: Int!, $datafileIds: [Int]) {
    ///   addDataFiles(datasetId: $datasetId, datafileIds: $datafileIds) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessFilesMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetProcessFilesResult>> ExecuteAsync(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetProcessFilesResult>> Watch(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DataSetProcessCsv GraphQL operation
    /// <code>
    /// mutation DataSetProcessCsv($datasetId: Int!, $datafileIds: [Int]) {
    ///   addDataCsv(datasetId: $datasetId, datafileIds: $datafileIds) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsvMutationDocument : global::StrawberryShake.IDocument
    {
        private DataSetProcessCsvMutationDocument()
        {
        }

        public static DataSetProcessCsvMutationDocument Instance
        {
            get;
        }

        = new DataSetProcessCsvMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x73, 0x76, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x49, 0x6e, 0x74, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x73, 0x76, 0x28, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "6d66f3f161cd10773587303edc0deec8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetProcessCsv GraphQL operation
    /// <code>
    /// mutation DataSetProcessCsv($datasetId: Int!, $datafileIds: [Int]) {
    ///   addDataCsv(datasetId: $datasetId, datafileIds: $datafileIds) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsvMutation : global::IndicoV2.StrawberryShake.IDataSetProcessCsvMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDataSetProcessCsvResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DataSetProcessCsvMutation(global::StrawberryShake.IOperationExecutor<IDataSetProcessCsvResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDataSetProcessCsvResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetProcessCsvResult>> ExecuteAsync(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(datasetId, datafileIds);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetProcessCsvResult>> Watch(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(datasetId, datafileIds);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("datasetId", FormatDatasetId(datasetId));
            variables.Add("datafileIds", FormatDatafileIds(datafileIds));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DataSetProcessCsvMutationDocument.Instance.Hash.Value, name: "DataSetProcessCsv", document: DataSetProcessCsvMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDatasetId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatDatafileIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        value_list.Add(value_elm);
                    }
                    else
                    {
                        value_list.Add(_intFormatter.Format(value_elm));
                    }
                }

                return value_list;
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetProcessCsv GraphQL operation
    /// <code>
    /// mutation DataSetProcessCsv($datasetId: Int!, $datafileIds: [Int]) {
    ///   addDataCsv(datasetId: $datasetId, datafileIds: $datafileIds) {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetProcessCsvMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetProcessCsvResult>> ExecuteAsync(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetProcessCsvResult>> Watch(global::System.Int32 datasetId, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? datafileIds, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DataSetGetDatasets GraphQL operation
    /// <code>
    /// query DataSetGetDatasets {
    ///   datasets {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsQueryDocument : global::StrawberryShake.IDocument
    {
        private DataSetGetDatasetsQueryDocument()
        {
        }

        public static DataSetGetDatasetsQueryDocument Instance
        {
            get;
        }

        = new DataSetGetDatasetsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "a7d063ea9aee8b6f46e9f8effdb86947");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetGetDatasets GraphQL operation
    /// <code>
    /// query DataSetGetDatasets {
    ///   datasets {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsQuery : global::IndicoV2.StrawberryShake.IDataSetGetDatasetsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDataSetGetDatasetsResult> _operationExecutor;
        public DataSetGetDatasetsQuery(global::StrawberryShake.IOperationExecutor<IDataSetGetDatasetsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDataSetGetDatasetsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DataSetGetDatasetsQueryDocument.Instance.Hash.Value, name: "DataSetGetDatasets", document: DataSetGetDatasetsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetGetDatasets GraphQL operation
    /// <code>
    /// query DataSetGetDatasets {
    ///   datasets {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Dataset {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DataSetGetDatasetsFull GraphQL operation
    /// <code>
    /// query DataSetGetDatasetsFull($limit: Int) {
    ///   datasetsPage(limit: $limit) {
    ///     __typename
    ///     datasets {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       rowCount
    ///       numModelGroups
    ///       modelGroups {
    ///         __typename
    ///         id
    ///         ... on ModelGroup {
    ///           id
    ///         }
    ///       }
    ///       ... on Dataset {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFullQueryDocument : global::StrawberryShake.IDocument
    {
        private DataSetGetDatasetsFullQueryDocument()
        {
        }

        public static DataSetGetDatasetsFullQueryDocument Instance
        {
            get;
        }

        = new DataSetGetDatasetsFullQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x28, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x50, 0x61, 0x67, 0x65, 0x28, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "dd2d3a1bb86be9c77f3c8c94203ca798");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetGetDatasetsFull GraphQL operation
    /// <code>
    /// query DataSetGetDatasetsFull($limit: Int) {
    ///   datasetsPage(limit: $limit) {
    ///     __typename
    ///     datasets {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       rowCount
    ///       numModelGroups
    ///       modelGroups {
    ///         __typename
    ///         id
    ///         ... on ModelGroup {
    ///           id
    ///         }
    ///       }
    ///       ... on Dataset {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFullQuery : global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDataSetGetDatasetsFullResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public DataSetGetDatasetsFullQuery(global::StrawberryShake.IOperationExecutor<IDataSetGetDatasetsFullResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDataSetGetDatasetsFullResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsFullResult>> ExecuteAsync(global::System.Int32? limit, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(limit);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsFullResult>> Watch(global::System.Int32? limit, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(limit);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? limit)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("limit", FormatLimit(limit));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DataSetGetDatasetsFullQueryDocument.Instance.Hash.Value, name: "DataSetGetDatasetsFull", document: DataSetGetDatasetsFullQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatLimit(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DataSetGetDatasetsFull GraphQL operation
    /// <code>
    /// query DataSetGetDatasetsFull($limit: Int) {
    ///   datasetsPage(limit: $limit) {
    ///     __typename
    ///     datasets {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       rowCount
    ///       numModelGroups
    ///       modelGroups {
    ///         __typename
    ///         id
    ///         ... on ModelGroup {
    ///           id
    ///         }
    ///       }
    ///       ... on Dataset {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IDataSetGetDatasetsFullQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsFullResult>> ExecuteAsync(global::System.Int32? limit, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDataSetGetDatasetsFullResult>> Watch(global::System.Int32? limit, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SubmitReview GraphQL operation
    /// <code>
    /// mutation SubmitReview($submissionId: Int!, $changes: JSONString, $rejected: Boolean) {
    ///   submitAutoReview(submissionId: $submissionId, changes: $changes, rejected: $rejected) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewMutationDocument : global::StrawberryShake.IDocument
    {
        private SubmitReviewMutationDocument()
        {
        }

        public static SubmitReviewMutationDocument Instance
        {
            get;
        }

        = new SubmitReviewMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x28, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x28, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "38a50b40bd7587aa2cb6848631ecceb0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitReview GraphQL operation
    /// <code>
    /// mutation SubmitReview($submissionId: Int!, $changes: JSONString, $rejected: Boolean) {
    ///   submitAutoReview(submissionId: $submissionId, changes: $changes, rejected: $rejected) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewMutation : global::IndicoV2.StrawberryShake.ISubmitReviewMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISubmitReviewResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _jSONStringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public SubmitReviewMutation(global::StrawberryShake.IOperationExecutor<ISubmitReviewResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _jSONStringFormatter = serializerResolver.GetInputValueFormatter("JSONString");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISubmitReviewResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitReviewResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(submissionId, changes, rejected);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitReviewResult>> Watch(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(submissionId, changes, rejected);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("submissionId", FormatSubmissionId(submissionId));
            variables.Add("changes", FormatChanges(changes));
            variables.Add("rejected", FormatRejected(rejected));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SubmitReviewMutationDocument.Instance.Hash.Value, name: "SubmitReview", document: SubmitReviewMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSubmissionId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatChanges(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _jSONStringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatRejected(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitReview GraphQL operation
    /// <code>
    /// mutation SubmitReview($submissionId: Int!, $changes: JSONString, $rejected: Boolean) {
    ///   submitAutoReview(submissionId: $submissionId, changes: $changes, rejected: $rejected) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReviewMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitReviewResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitReviewResult>> Watch(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the SubmitReviewForceComplete GraphQL operation
    /// <code>
    /// mutation SubmitReviewForceComplete($submissionId: Int!, $changes: JSONString, $rejected: Boolean, $forceComplete: Boolean) {
    ///   submitAutoReview(submissionId: $submissionId, changes: $changes, rejected: $rejected, forceComplete: $forceComplete) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewForceCompleteMutationDocument : global::StrawberryShake.IDocument
    {
        private SubmitReviewForceCompleteMutationDocument()
        {
        }

        public static SubmitReviewForceCompleteMutationDocument Instance
        {
            get;
        }

        = new SubmitReviewForceCompleteMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x28, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2c, 0x20, 0x24, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x28, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x24, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "5570c439561d5bd872b2758d1565e8cf");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitReviewForceComplete GraphQL operation
    /// <code>
    /// mutation SubmitReviewForceComplete($submissionId: Int!, $changes: JSONString, $rejected: Boolean, $forceComplete: Boolean) {
    ///   submitAutoReview(submissionId: $submissionId, changes: $changes, rejected: $rejected, forceComplete: $forceComplete) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewForceCompleteMutation : global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ISubmitReviewForceCompleteResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _jSONStringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public SubmitReviewForceCompleteMutation(global::StrawberryShake.IOperationExecutor<ISubmitReviewForceCompleteResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _jSONStringFormatter = serializerResolver.GetInputValueFormatter("JSONString");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ISubmitReviewForceCompleteResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitReviewForceCompleteResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::System.Boolean? forceComplete, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(submissionId, changes, rejected, forceComplete);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitReviewForceCompleteResult>> Watch(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::System.Boolean? forceComplete, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(submissionId, changes, rejected, forceComplete);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::System.Boolean? forceComplete)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("submissionId", FormatSubmissionId(submissionId));
            variables.Add("changes", FormatChanges(changes));
            variables.Add("rejected", FormatRejected(rejected));
            variables.Add("forceComplete", FormatForceComplete(forceComplete));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: SubmitReviewForceCompleteMutationDocument.Instance.Hash.Value, name: "SubmitReviewForceComplete", document: SubmitReviewForceCompleteMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSubmissionId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatChanges(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _jSONStringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatRejected(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        private global::System.Object? FormatForceComplete(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the SubmitReviewForceComplete GraphQL operation
    /// <code>
    /// mutation SubmitReviewForceComplete($submissionId: Int!, $changes: JSONString, $rejected: Boolean, $forceComplete: Boolean) {
    ///   submitAutoReview(submissionId: $submissionId, changes: $changes, rejected: $rejected, forceComplete: $forceComplete) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface ISubmitReviewForceCompleteMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ISubmitReviewForceCompleteResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::System.Boolean? forceComplete, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ISubmitReviewForceCompleteResult>> Watch(global::System.Int32 submissionId, global::System.String? changes, global::System.Boolean? rejected, global::System.Boolean? forceComplete, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetReviews GraphQL operation
    /// <code>
    /// query GetReviews($submissionId: Int!) {
    ///   submission(id: $submissionId) {
    ///     __typename
    ///     id
    ///     reviews {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       changes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviewsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetReviewsQueryDocument()
        {
        }

        public static GetReviewsQueryDocument Instance
        {
            get;
        }

        = new GetReviewsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x28, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "b53a6efae4bfd98cb79827fb4fdf4d8a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetReviews GraphQL operation
    /// <code>
    /// query GetReviews($submissionId: Int!) {
    ///   submission(id: $submissionId) {
    ///     __typename
    ///     id
    ///     reviews {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       changes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviewsQuery : global::IndicoV2.StrawberryShake.IGetReviewsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetReviewsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetReviewsQuery(global::StrawberryShake.IOperationExecutor<IGetReviewsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetReviewsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetReviewsResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(submissionId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetReviewsResult>> Watch(global::System.Int32 submissionId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(submissionId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 submissionId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("submissionId", FormatSubmissionId(submissionId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetReviewsQueryDocument.Instance.Hash.Value, name: "GetReviews", document: GetReviewsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSubmissionId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetReviews GraphQL operation
    /// <code>
    /// query GetReviews($submissionId: Int!) {
    ///   submission(id: $submissionId) {
    ///     __typename
    ///     id
    ///     reviews {
    ///       __typename
    ///       id
    ///       submissionId
    ///       createdAt
    ///       createdBy
    ///       startedAt
    ///       completedAt
    ///       rejected
    ///       reviewType
    ///       notes
    ///       changes
    ///       ... on Review {
    ///         id
    ///       }
    ///     }
    ///     ... on Submission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetReviewsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetReviewsResult>> ExecuteAsync(global::System.Int32 submissionId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetReviewsResult>> Watch(global::System.Int32 submissionId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ModelGroupQuery GraphQL operation
    /// <code>
    /// query ModelGroupQuery($modelGroupIds: [Int]!) {
    ///   modelGroups(modelGroupIds: $modelGroupIds) {
    ///     __typename
    ///     modelGroups {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       selectedModel {
    ///         __typename
    ///         id
    ///         status
    ///         ... on Model {
    ///           id
    ///         }
    ///       }
    ///       ... on ModelGroup {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQueryQueryDocument : global::StrawberryShake.IDocument
    {
        private ModelGroupQueryQueryDocument()
        {
        }

        public static ModelGroupQueryQueryDocument Instance
        {
            get;
        }

        = new ModelGroupQueryQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x49, 0x6e, 0x74, 0x5d, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "f6f2f6b1893cd9c3028604d86047c6d7");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ModelGroupQuery GraphQL operation
    /// <code>
    /// query ModelGroupQuery($modelGroupIds: [Int]!) {
    ///   modelGroups(modelGroupIds: $modelGroupIds) {
    ///     __typename
    ///     modelGroups {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       selectedModel {
    ///         __typename
    ///         id
    ///         status
    ///         ... on Model {
    ///           id
    ///         }
    ///       }
    ///       ... on ModelGroup {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQueryQuery : global::IndicoV2.StrawberryShake.IModelGroupQueryQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IModelGroupQueryResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public ModelGroupQueryQuery(global::StrawberryShake.IOperationExecutor<IModelGroupQueryResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IModelGroupQueryResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IModelGroupQueryResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?> modelGroupIds, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(modelGroupIds);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IModelGroupQueryResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?> modelGroupIds, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(modelGroupIds);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?> modelGroupIds)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("modelGroupIds", FormatModelGroupIds(modelGroupIds));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ModelGroupQueryQueryDocument.Instance.Hash.Value, name: "ModelGroupQuery", document: ModelGroupQueryQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModelGroupIds(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?> value)
        {
            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    value_list.Add(value_elm);
                }
                else
                {
                    value_list.Add(_intFormatter.Format(value_elm));
                }
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ModelGroupQuery GraphQL operation
    /// <code>
    /// query ModelGroupQuery($modelGroupIds: [Int]!) {
    ///   modelGroups(modelGroupIds: $modelGroupIds) {
    ///     __typename
    ///     modelGroups {
    ///       __typename
    ///       id
    ///       name
    ///       status
    ///       selectedModel {
    ///         __typename
    ///         id
    ///         status
    ///         ... on Model {
    ///           id
    ///         }
    ///       }
    ///       ... on ModelGroup {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupQueryQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IModelGroupQueryResult>> ExecuteAsync(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?> modelGroupIds, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IModelGroupQueryResult>> Watch(global::System.Collections.Generic.IReadOnlyList<global::System.Int32?> modelGroupIds, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ModelLoad GraphQL operation
    /// <code>
    /// mutation ModelLoad($modelId: Int!) {
    ///   modelLoad(modelId: $modelId) {
    ///     __typename
    ///     status
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoadMutationDocument : global::StrawberryShake.IDocument
    {
        private ModelLoadMutationDocument()
        {
        }

        public static ModelLoadMutationDocument Instance
        {
            get;
        }

        = new ModelLoadMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "d4384d1c7d0e228bd55be315bd542b86");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ModelLoad GraphQL operation
    /// <code>
    /// mutation ModelLoad($modelId: Int!) {
    ///   modelLoad(modelId: $modelId) {
    ///     __typename
    ///     status
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoadMutation : global::IndicoV2.StrawberryShake.IModelLoadMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IModelLoadResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public ModelLoadMutation(global::StrawberryShake.IOperationExecutor<IModelLoadResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IModelLoadResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IModelLoadResult>> ExecuteAsync(global::System.Int32 modelId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(modelId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IModelLoadResult>> Watch(global::System.Int32 modelId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(modelId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 modelId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("modelId", FormatModelId(modelId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ModelLoadMutationDocument.Instance.Hash.Value, name: "ModelLoad", document: ModelLoadMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModelId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ModelLoad GraphQL operation
    /// <code>
    /// mutation ModelLoad($modelId: Int!) {
    ///   modelLoad(modelId: $modelId) {
    ///     __typename
    ///     status
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelLoadMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IModelLoadResult>> ExecuteAsync(global::System.Int32 modelId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IModelLoadResult>> Watch(global::System.Int32 modelId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PredictModel GraphQL operation
    /// <code>
    /// mutation PredictModel($modelId: Int!, $data: [String]!) {
    ///   modelPredict(modelId: $modelId, data: $data) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PredictModelMutationDocument : global::StrawberryShake.IDocument
    {
        private PredictModelMutationDocument()
        {
        }

        public static PredictModelMutationDocument Instance
        {
            get;
        }

        = new PredictModelMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x28, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x5b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "b0ea425f3f97ef21e0ee7eca757c1da0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PredictModel GraphQL operation
    /// <code>
    /// mutation PredictModel($modelId: Int!, $data: [String]!) {
    ///   modelPredict(modelId: $modelId, data: $data) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PredictModelMutation : global::IndicoV2.StrawberryShake.IPredictModelMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPredictModelResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public PredictModelMutation(global::StrawberryShake.IOperationExecutor<IPredictModelResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPredictModelResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPredictModelResult>> ExecuteAsync(global::System.Int32 modelId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(modelId, data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPredictModelResult>> Watch(global::System.Int32 modelId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(modelId, data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 modelId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("modelId", FormatModelId(modelId));
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PredictModelMutationDocument.Instance.Hash.Value, name: "PredictModel", document: PredictModelMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatModelId(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatData(global::System.Collections.Generic.IReadOnlyList<global::System.String?> value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var value_elm in value)
            {
                if (value_elm is null)
                {
                    value_list.Add(value_elm);
                }
                else
                {
                    value_list.Add(_stringFormatter.Format(value_elm));
                }
            }

            return value_list;
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PredictModel GraphQL operation
    /// <code>
    /// mutation PredictModel($modelId: Int!, $data: [String]!) {
    ///   modelPredict(modelId: $modelId, data: $data) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IPredictModelMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPredictModelResult>> ExecuteAsync(global::System.Int32 modelId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPredictModelResult>> Watch(global::System.Int32 modelId, global::System.Collections.Generic.IReadOnlyList<global::System.String?> data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ModelGroupProgressQuery GraphQL operation
    /// <code>
    /// query ModelGroupProgressQuery($id: Int) {
    ///   modelGroups(modelGroupIds: [ $id ]) {
    ///     __typename
    ///     modelGroups {
    ///       __typename
    ///       models {
    ///         __typename
    ///         id
    ///         status
    ///         trainingProgress {
    ///           __typename
    ///           percentComplete
    ///         }
    ///         ... on Model {
    ///           id
    ///         }
    ///       }
    ///       ... on ModelGroup {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQueryQueryDocument : global::StrawberryShake.IDocument
    {
        private ModelGroupProgressQueryQueryDocument()
        {
        }

        public static ModelGroupProgressQueryQueryDocument Instance
        {
            get;
        }

        = new ModelGroupProgressQueryQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x5b, 0x20, 0x24, 0x69, 0x64, 0x20, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "027cf96687f5ffb7d83d514de71bf9f4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ModelGroupProgressQuery GraphQL operation
    /// <code>
    /// query ModelGroupProgressQuery($id: Int) {
    ///   modelGroups(modelGroupIds: [ $id ]) {
    ///     __typename
    ///     modelGroups {
    ///       __typename
    ///       models {
    ///         __typename
    ///         id
    ///         status
    ///         trainingProgress {
    ///           __typename
    ///           percentComplete
    ///         }
    ///         ... on Model {
    ///           id
    ///         }
    ///       }
    ///       ... on ModelGroup {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQueryQuery : global::IndicoV2.StrawberryShake.IModelGroupProgressQueryQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IModelGroupProgressQueryResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public ModelGroupProgressQueryQuery(global::StrawberryShake.IOperationExecutor<IModelGroupProgressQueryResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IModelGroupProgressQueryResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IModelGroupProgressQueryResult>> ExecuteAsync(global::System.Int32? id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IModelGroupProgressQueryResult>> Watch(global::System.Int32? id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ModelGroupProgressQueryQueryDocument.Instance.Hash.Value, name: "ModelGroupProgressQuery", document: ModelGroupProgressQueryQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ModelGroupProgressQuery GraphQL operation
    /// <code>
    /// query ModelGroupProgressQuery($id: Int) {
    ///   modelGroups(modelGroupIds: [ $id ]) {
    ///     __typename
    ///     modelGroups {
    ///       __typename
    ///       models {
    ///         __typename
    ///         id
    ///         status
    ///         trainingProgress {
    ///           __typename
    ///           percentComplete
    ///         }
    ///         ... on Model {
    ///           id
    ///         }
    ///       }
    ///       ... on ModelGroup {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IModelGroupProgressQueryQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IModelGroupProgressQueryResult>> ExecuteAsync(global::System.Int32? id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IModelGroupProgressQueryResult>> Watch(global::System.Int32? id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UserSummary GraphQL operation
    /// <code>
    /// query UserSummary($date: Date) {
    ///   userSummary(date: $date) {
    ///     __typename
    ///     users {
    ///       __typename
    ///       enabled
    ///       disabled
    ///     }
    ///     appRoles {
    ///       __typename
    ///       role
    ///       count
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummaryQueryDocument : global::StrawberryShake.IDocument
    {
        private UserSummaryQueryDocument()
        {
        }

        public static UserSummaryQueryDocument Instance
        {
            get;
        }

        = new UserSummaryQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x28, 0x24, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x28, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7d, 0x20, 0x61, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "bc21444dc3e316e7076347ab1ab1715a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UserSummary GraphQL operation
    /// <code>
    /// query UserSummary($date: Date) {
    ///   userSummary(date: $date) {
    ///     __typename
    ///     users {
    ///       __typename
    ///       enabled
    ///       disabled
    ///     }
    ///     appRoles {
    ///       __typename
    ///       role
    ///       count
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummaryQuery : global::IndicoV2.StrawberryShake.IUserSummaryQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUserSummaryResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter;
        public UserSummaryQuery(global::StrawberryShake.IOperationExecutor<IUserSummaryResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUserSummaryResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserSummaryResult>> ExecuteAsync(global::System.DateTime? date, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(date);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUserSummaryResult>> Watch(global::System.DateTime? date, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(date);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.DateTime? date)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("date", FormatDate(date));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UserSummaryQueryDocument.Instance.Hash.Value, name: "UserSummary", document: UserSummaryQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UserSummary GraphQL operation
    /// <code>
    /// query UserSummary($date: Date) {
    ///   userSummary(date: $date) {
    ///     __typename
    ///     users {
    ///       __typename
    ///       enabled
    ///       disabled
    ///     }
    ///     appRoles {
    ///       __typename
    ///       role
    ///       count
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSummaryQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserSummaryResult>> ExecuteAsync(global::System.DateTime? date, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUserSummaryResult>> Watch(global::System.DateTime? date, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UserSnapshot GraphQL operation
    /// <code>
    /// query UserSnapshot($date: Date, $filters: UserReportFilter) {
    ///   userSnapshot(date: $date, filters: $filters) {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       name
    ///       createdAt
    ///       enabled
    ///       roles
    ///       datasets {
    ///         __typename
    ///         datasetId
    ///         role
    ///       }
    ///       ... on UserSnapshot {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotQueryDocument : global::StrawberryShake.IDocument
    {
        private UserSnapshotQueryDocument()
        {
        }

        public static UserSnapshotQueryDocument Instance
        {
            get;
        }

        = new UserSnapshotQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x28, 0x24, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x28, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "ba947185e832e5853b39365c32581b56");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UserSnapshot GraphQL operation
    /// <code>
    /// query UserSnapshot($date: Date, $filters: UserReportFilter) {
    ///   userSnapshot(date: $date, filters: $filters) {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       name
    ///       createdAt
    ///       enabled
    ///       roles
    ///       datasets {
    ///         __typename
    ///         datasetId
    ///         role
    ///       }
    ///       ... on UserSnapshot {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotQuery : global::IndicoV2.StrawberryShake.IUserSnapshotQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUserSnapshotResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _userReportFilterFormatter;
        public UserSnapshotQuery(global::StrawberryShake.IOperationExecutor<IUserSnapshotResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
            _userReportFilterFormatter = serializerResolver.GetInputValueFormatter("UserReportFilter");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUserSnapshotResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserSnapshotResult>> ExecuteAsync(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(date, filters);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUserSnapshotResult>> Watch(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(date, filters);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("date", FormatDate(date));
            variables.Add("filters", FormatFilters(filters));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UserSnapshotQueryDocument.Instance.Hash.Value, name: "UserSnapshot", document: UserSnapshotQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilters(global::IndicoV2.StrawberryShake.UserReportFilter? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _userReportFilterFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UserSnapshot GraphQL operation
    /// <code>
    /// query UserSnapshot($date: Date, $filters: UserReportFilter) {
    ///   userSnapshot(date: $date, filters: $filters) {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       name
    ///       createdAt
    ///       enabled
    ///       roles
    ///       datasets {
    ///         __typename
    ///         datasetId
    ///         role
    ///       }
    ///       ... on UserSnapshot {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshotQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserSnapshotResult>> ExecuteAsync(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUserSnapshotResult>> Watch(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UserChangelog GraphQL operation
    /// <code>
    /// query UserChangelog($sdate: Date, $edate: Date, $filters: UserReportFilter) {
    ///   userChangelog(startDate: $sdate, endDate: $edate, filters: $filters) {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       date
    ///       userEmail
    ///       updaterEmail
    ///       previousDatasets {
    ///         __typename
    ///         datasetId
    ///         role
    ///       }
    ///       changesMade
    ///       ... on UserChangelog {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogQueryDocument : global::StrawberryShake.IDocument
    {
        private UserChangelogQueryDocument()
        {
        }

        public static UserChangelogQueryDocument Instance
        {
            get;
        }

        = new UserChangelogQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x28, 0x24, 0x73, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x24, 0x65, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x28, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x73, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x64, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "fc8df00530317fad047c3986d7268dc5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UserChangelog GraphQL operation
    /// <code>
    /// query UserChangelog($sdate: Date, $edate: Date, $filters: UserReportFilter) {
    ///   userChangelog(startDate: $sdate, endDate: $edate, filters: $filters) {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       date
    ///       userEmail
    ///       updaterEmail
    ///       previousDatasets {
    ///         __typename
    ///         datasetId
    ///         role
    ///       }
    ///       changesMade
    ///       ... on UserChangelog {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogQuery : global::IndicoV2.StrawberryShake.IUserChangelogQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUserChangelogResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _userReportFilterFormatter;
        public UserChangelogQuery(global::StrawberryShake.IOperationExecutor<IUserChangelogResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
            _userReportFilterFormatter = serializerResolver.GetInputValueFormatter("UserReportFilter");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUserChangelogResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserChangelogResult>> ExecuteAsync(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sdate, edate, filters);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUserChangelogResult>> Watch(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sdate, edate, filters);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sdate", FormatSdate(sdate));
            variables.Add("edate", FormatEdate(edate));
            variables.Add("filters", FormatFilters(filters));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UserChangelogQueryDocument.Instance.Hash.Value, name: "UserChangelog", document: UserChangelogQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSdate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        private global::System.Object? FormatEdate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilters(global::IndicoV2.StrawberryShake.UserReportFilter? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _userReportFilterFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UserChangelog GraphQL operation
    /// <code>
    /// query UserChangelog($sdate: Date, $edate: Date, $filters: UserReportFilter) {
    ///   userChangelog(startDate: $sdate, endDate: $edate, filters: $filters) {
    ///     __typename
    ///     results {
    ///       __typename
    ///       id
    ///       date
    ///       userEmail
    ///       updaterEmail
    ///       previousDatasets {
    ///         __typename
    ///         datasetId
    ///         role
    ///       }
    ///       changesMade
    ///       ... on UserChangelog {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       aggregateCount
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelogQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserChangelogResult>> ExecuteAsync(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUserChangelogResult>> Watch(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UserSnapshotReport GraphQL operation
    /// <code>
    /// mutation UserSnapshotReport($date: Date, $filters: UserReportFilter) {
    ///   userSnapshotReport(date: $date, filters: $filters, reportFormat: CSV) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotReportMutationDocument : global::StrawberryShake.IDocument
    {
        private UserSnapshotReportMutationDocument()
        {
        }

        public static UserSnapshotReportMutationDocument Instance
        {
            get;
        }

        = new UserSnapshotReportMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x28, 0x24, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x28, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x43, 0x53, 0x56, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "197a1911cf7a8b03bce0f8a18f9d867b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UserSnapshotReport GraphQL operation
    /// <code>
    /// mutation UserSnapshotReport($date: Date, $filters: UserReportFilter) {
    ///   userSnapshotReport(date: $date, filters: $filters, reportFormat: CSV) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotReportMutation : global::IndicoV2.StrawberryShake.IUserSnapshotReportMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUserSnapshotReportResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _userReportFilterFormatter;
        public UserSnapshotReportMutation(global::StrawberryShake.IOperationExecutor<IUserSnapshotReportResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
            _userReportFilterFormatter = serializerResolver.GetInputValueFormatter("UserReportFilter");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUserSnapshotReportResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserSnapshotReportResult>> ExecuteAsync(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(date, filters);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUserSnapshotReportResult>> Watch(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(date, filters);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("date", FormatDate(date));
            variables.Add("filters", FormatFilters(filters));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UserSnapshotReportMutationDocument.Instance.Hash.Value, name: "UserSnapshotReport", document: UserSnapshotReportMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatDate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilters(global::IndicoV2.StrawberryShake.UserReportFilter? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _userReportFilterFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UserSnapshotReport GraphQL operation
    /// <code>
    /// mutation UserSnapshotReport($date: Date, $filters: UserReportFilter) {
    ///   userSnapshotReport(date: $date, filters: $filters, reportFormat: CSV) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserSnapshotReportMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserSnapshotReportResult>> ExecuteAsync(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUserSnapshotReportResult>> Watch(global::System.DateTime? date, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UserChangelogReport GraphQL operation
    /// <code>
    /// mutation UserChangelogReport($sdate: Date, $edate: Date, $filters: UserReportFilter) {
    ///   userChangelogReport(startDate: $sdate, endDate: $edate, filters: $filters, reportFormat: JSON) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogReportMutationDocument : global::StrawberryShake.IDocument
    {
        private UserChangelogReportMutationDocument()
        {
        }

        public static UserChangelogReportMutationDocument Instance
        {
            get;
        }

        = new UserChangelogReportMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x28, 0x24, 0x73, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x24, 0x65, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x28, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x73, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x64, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash
        {
            get;
        }

        = new global::StrawberryShake.DocumentHash("md5Hash", "fbafa54df240fd3cd2897dca2ff28027");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UserChangelogReport GraphQL operation
    /// <code>
    /// mutation UserChangelogReport($sdate: Date, $edate: Date, $filters: UserReportFilter) {
    ///   userChangelogReport(startDate: $sdate, endDate: $edate, filters: $filters, reportFormat: JSON) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogReportMutation : global::IndicoV2.StrawberryShake.IUserChangelogReportMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUserChangelogReportResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _userReportFilterFormatter;
        public UserChangelogReportMutation(global::StrawberryShake.IOperationExecutor<IUserChangelogReportResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
            _userReportFilterFormatter = serializerResolver.GetInputValueFormatter("UserReportFilter");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUserChangelogReportResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserChangelogReportResult>> ExecuteAsync(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sdate, edate, filters);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUserChangelogReportResult>> Watch(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sdate, edate, filters);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sdate", FormatSdate(sdate));
            variables.Add("edate", FormatEdate(edate));
            variables.Add("filters", FormatFilters(filters));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UserChangelogReportMutationDocument.Instance.Hash.Value, name: "UserChangelogReport", document: UserChangelogReportMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSdate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        private global::System.Object? FormatEdate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFilters(global::IndicoV2.StrawberryShake.UserReportFilter? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _userReportFilterFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UserChangelogReport GraphQL operation
    /// <code>
    /// mutation UserChangelogReport($sdate: Date, $edate: Date, $filters: UserReportFilter) {
    ///   userChangelogReport(startDate: $sdate, endDate: $edate, filters: $filters, reportFormat: JSON) {
    ///     __typename
    ///     jobId
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IUserChangelogReportMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUserChangelogReportResult>> ExecuteAsync(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUserChangelogReportResult>> Watch(global::System.DateTime? sdate, global::System.DateTime? edate, global::IndicoV2.StrawberryShake.UserReportFilter? filters, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the IndicoGqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class IndicoGqlClient : global::IndicoV2.StrawberryShake.IIndicoGqlClient
    {
        private readonly global::IndicoV2.StrawberryShake.IDocumentExtractionMutation _documentExtraction;
        private readonly global::IndicoV2.StrawberryShake.IWorkflowGetStatusQuery _workflowGetStatus;
        private readonly global::IndicoV2.StrawberryShake.IWorkflowAddDataMutation _workflowAddData;
        private readonly global::IndicoV2.StrawberryShake.IListWorkflowsQuery _listWorkflows;
        private readonly global::IndicoV2.StrawberryShake.IWorkflowSubmissionMutation _workflowSubmission;
        private readonly global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionMutation _workflowUrlSubmission;
        private readonly global::IndicoV2.StrawberryShake.IListSubmissionsQuery _listSubmissions;
        private readonly global::IndicoV2.StrawberryShake.IUpdateSubmissionMutation _updateSubmission;
        private readonly global::IndicoV2.StrawberryShake.IGetSubmissionQuery _getSubmission;
        private readonly global::IndicoV2.StrawberryShake.ICreateSubmissionResultsMutation _createSubmissionResults;
        private readonly global::IndicoV2.StrawberryShake.IJobStatusQuery _jobStatus;
        private readonly global::IndicoV2.StrawberryShake.IDatasetUploadStatusQuery _datasetUploadStatus;
        private readonly global::IndicoV2.StrawberryShake.IDataSetAddFilesMutation _dataSetAddFiles;
        private readonly global::IndicoV2.StrawberryShake.IDataSetProcessFilesMutation _dataSetProcessFiles;
        private readonly global::IndicoV2.StrawberryShake.IDataSetProcessCsvMutation _dataSetProcessCsv;
        private readonly global::IndicoV2.StrawberryShake.IDataSetGetDatasetsQuery _dataSetGetDatasets;
        private readonly global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullQuery _dataSetGetDatasetsFull;
        private readonly global::IndicoV2.StrawberryShake.ISubmitReviewMutation _submitReview;
        private readonly global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteMutation _submitReviewForceComplete;
        private readonly global::IndicoV2.StrawberryShake.IGetReviewsQuery _getReviews;
        private readonly global::IndicoV2.StrawberryShake.IModelGroupQueryQuery _modelGroupQuery;
        private readonly global::IndicoV2.StrawberryShake.IModelLoadMutation _modelLoad;
        private readonly global::IndicoV2.StrawberryShake.IPredictModelMutation _predictModel;
        private readonly global::IndicoV2.StrawberryShake.IModelGroupProgressQueryQuery _modelGroupProgressQuery;
        private readonly global::IndicoV2.StrawberryShake.IUserSummaryQuery _userSummary;
        private readonly global::IndicoV2.StrawberryShake.IUserSnapshotQuery _userSnapshot;
        private readonly global::IndicoV2.StrawberryShake.IUserChangelogQuery _userChangelog;
        private readonly global::IndicoV2.StrawberryShake.IUserSnapshotReportMutation _userSnapshotReport;
        private readonly global::IndicoV2.StrawberryShake.IUserChangelogReportMutation _userChangelogReport;
        public IndicoGqlClient(global::IndicoV2.StrawberryShake.IDocumentExtractionMutation documentExtraction, global::IndicoV2.StrawberryShake.IWorkflowGetStatusQuery workflowGetStatus, global::IndicoV2.StrawberryShake.IWorkflowAddDataMutation workflowAddData, global::IndicoV2.StrawberryShake.IListWorkflowsQuery listWorkflows, global::IndicoV2.StrawberryShake.IWorkflowSubmissionMutation workflowSubmission, global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionMutation workflowUrlSubmission, global::IndicoV2.StrawberryShake.IListSubmissionsQuery listSubmissions, global::IndicoV2.StrawberryShake.IUpdateSubmissionMutation updateSubmission, global::IndicoV2.StrawberryShake.IGetSubmissionQuery getSubmission, global::IndicoV2.StrawberryShake.ICreateSubmissionResultsMutation createSubmissionResults, global::IndicoV2.StrawberryShake.IJobStatusQuery jobStatus, global::IndicoV2.StrawberryShake.IDatasetUploadStatusQuery datasetUploadStatus, global::IndicoV2.StrawberryShake.IDataSetAddFilesMutation dataSetAddFiles, global::IndicoV2.StrawberryShake.IDataSetProcessFilesMutation dataSetProcessFiles, global::IndicoV2.StrawberryShake.IDataSetProcessCsvMutation dataSetProcessCsv, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsQuery dataSetGetDatasets, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullQuery dataSetGetDatasetsFull, global::IndicoV2.StrawberryShake.ISubmitReviewMutation submitReview, global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteMutation submitReviewForceComplete, global::IndicoV2.StrawberryShake.IGetReviewsQuery getReviews, global::IndicoV2.StrawberryShake.IModelGroupQueryQuery modelGroupQuery, global::IndicoV2.StrawberryShake.IModelLoadMutation modelLoad, global::IndicoV2.StrawberryShake.IPredictModelMutation predictModel, global::IndicoV2.StrawberryShake.IModelGroupProgressQueryQuery modelGroupProgressQuery, global::IndicoV2.StrawberryShake.IUserSummaryQuery userSummary, global::IndicoV2.StrawberryShake.IUserSnapshotQuery userSnapshot, global::IndicoV2.StrawberryShake.IUserChangelogQuery userChangelog, global::IndicoV2.StrawberryShake.IUserSnapshotReportMutation userSnapshotReport, global::IndicoV2.StrawberryShake.IUserChangelogReportMutation userChangelogReport)
        {
            _documentExtraction = documentExtraction ?? throw new global::System.ArgumentNullException(nameof(documentExtraction));
            _workflowGetStatus = workflowGetStatus ?? throw new global::System.ArgumentNullException(nameof(workflowGetStatus));
            _workflowAddData = workflowAddData ?? throw new global::System.ArgumentNullException(nameof(workflowAddData));
            _listWorkflows = listWorkflows ?? throw new global::System.ArgumentNullException(nameof(listWorkflows));
            _workflowSubmission = workflowSubmission ?? throw new global::System.ArgumentNullException(nameof(workflowSubmission));
            _workflowUrlSubmission = workflowUrlSubmission ?? throw new global::System.ArgumentNullException(nameof(workflowUrlSubmission));
            _listSubmissions = listSubmissions ?? throw new global::System.ArgumentNullException(nameof(listSubmissions));
            _updateSubmission = updateSubmission ?? throw new global::System.ArgumentNullException(nameof(updateSubmission));
            _getSubmission = getSubmission ?? throw new global::System.ArgumentNullException(nameof(getSubmission));
            _createSubmissionResults = createSubmissionResults ?? throw new global::System.ArgumentNullException(nameof(createSubmissionResults));
            _jobStatus = jobStatus ?? throw new global::System.ArgumentNullException(nameof(jobStatus));
            _datasetUploadStatus = datasetUploadStatus ?? throw new global::System.ArgumentNullException(nameof(datasetUploadStatus));
            _dataSetAddFiles = dataSetAddFiles ?? throw new global::System.ArgumentNullException(nameof(dataSetAddFiles));
            _dataSetProcessFiles = dataSetProcessFiles ?? throw new global::System.ArgumentNullException(nameof(dataSetProcessFiles));
            _dataSetProcessCsv = dataSetProcessCsv ?? throw new global::System.ArgumentNullException(nameof(dataSetProcessCsv));
            _dataSetGetDatasets = dataSetGetDatasets ?? throw new global::System.ArgumentNullException(nameof(dataSetGetDatasets));
            _dataSetGetDatasetsFull = dataSetGetDatasetsFull ?? throw new global::System.ArgumentNullException(nameof(dataSetGetDatasetsFull));
            _submitReview = submitReview ?? throw new global::System.ArgumentNullException(nameof(submitReview));
            _submitReviewForceComplete = submitReviewForceComplete ?? throw new global::System.ArgumentNullException(nameof(submitReviewForceComplete));
            _getReviews = getReviews ?? throw new global::System.ArgumentNullException(nameof(getReviews));
            _modelGroupQuery = modelGroupQuery ?? throw new global::System.ArgumentNullException(nameof(modelGroupQuery));
            _modelLoad = modelLoad ?? throw new global::System.ArgumentNullException(nameof(modelLoad));
            _predictModel = predictModel ?? throw new global::System.ArgumentNullException(nameof(predictModel));
            _modelGroupProgressQuery = modelGroupProgressQuery ?? throw new global::System.ArgumentNullException(nameof(modelGroupProgressQuery));
            _userSummary = userSummary ?? throw new global::System.ArgumentNullException(nameof(userSummary));
            _userSnapshot = userSnapshot ?? throw new global::System.ArgumentNullException(nameof(userSnapshot));
            _userChangelog = userChangelog ?? throw new global::System.ArgumentNullException(nameof(userChangelog));
            _userSnapshotReport = userSnapshotReport ?? throw new global::System.ArgumentNullException(nameof(userSnapshotReport));
            _userChangelogReport = userChangelogReport ?? throw new global::System.ArgumentNullException(nameof(userChangelogReport));
        }

        public static global::System.String ClientName => "IndicoGqlClient";
        public global::IndicoV2.StrawberryShake.IDocumentExtractionMutation DocumentExtraction => _documentExtraction;
        public global::IndicoV2.StrawberryShake.IWorkflowGetStatusQuery WorkflowGetStatus => _workflowGetStatus;
        public global::IndicoV2.StrawberryShake.IWorkflowAddDataMutation WorkflowAddData => _workflowAddData;
        public global::IndicoV2.StrawberryShake.IListWorkflowsQuery ListWorkflows => _listWorkflows;
        public global::IndicoV2.StrawberryShake.IWorkflowSubmissionMutation WorkflowSubmission => _workflowSubmission;
        public global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionMutation WorkflowUrlSubmission => _workflowUrlSubmission;
        public global::IndicoV2.StrawberryShake.IListSubmissionsQuery ListSubmissions => _listSubmissions;
        public global::IndicoV2.StrawberryShake.IUpdateSubmissionMutation UpdateSubmission => _updateSubmission;
        public global::IndicoV2.StrawberryShake.IGetSubmissionQuery GetSubmission => _getSubmission;
        public global::IndicoV2.StrawberryShake.ICreateSubmissionResultsMutation CreateSubmissionResults => _createSubmissionResults;
        public global::IndicoV2.StrawberryShake.IJobStatusQuery JobStatus => _jobStatus;
        public global::IndicoV2.StrawberryShake.IDatasetUploadStatusQuery DatasetUploadStatus => _datasetUploadStatus;
        public global::IndicoV2.StrawberryShake.IDataSetAddFilesMutation DataSetAddFiles => _dataSetAddFiles;
        public global::IndicoV2.StrawberryShake.IDataSetProcessFilesMutation DataSetProcessFiles => _dataSetProcessFiles;
        public global::IndicoV2.StrawberryShake.IDataSetProcessCsvMutation DataSetProcessCsv => _dataSetProcessCsv;
        public global::IndicoV2.StrawberryShake.IDataSetGetDatasetsQuery DataSetGetDatasets => _dataSetGetDatasets;
        public global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullQuery DataSetGetDatasetsFull => _dataSetGetDatasetsFull;
        public global::IndicoV2.StrawberryShake.ISubmitReviewMutation SubmitReview => _submitReview;
        public global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteMutation SubmitReviewForceComplete => _submitReviewForceComplete;
        public global::IndicoV2.StrawberryShake.IGetReviewsQuery GetReviews => _getReviews;
        public global::IndicoV2.StrawberryShake.IModelGroupQueryQuery ModelGroupQuery => _modelGroupQuery;
        public global::IndicoV2.StrawberryShake.IModelLoadMutation ModelLoad => _modelLoad;
        public global::IndicoV2.StrawberryShake.IPredictModelMutation PredictModel => _predictModel;
        public global::IndicoV2.StrawberryShake.IModelGroupProgressQueryQuery ModelGroupProgressQuery => _modelGroupProgressQuery;
        public global::IndicoV2.StrawberryShake.IUserSummaryQuery UserSummary => _userSummary;
        public global::IndicoV2.StrawberryShake.IUserSnapshotQuery UserSnapshot => _userSnapshot;
        public global::IndicoV2.StrawberryShake.IUserChangelogQuery UserChangelog => _userChangelog;
        public global::IndicoV2.StrawberryShake.IUserSnapshotReportMutation UserSnapshotReport => _userSnapshotReport;
        public global::IndicoV2.StrawberryShake.IUserChangelogReportMutation UserChangelogReport => _userChangelogReport;
    }

    /// <summary>
    /// Represents the IndicoGqlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IIndicoGqlClient
    {
        global::IndicoV2.StrawberryShake.IDocumentExtractionMutation DocumentExtraction
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IWorkflowGetStatusQuery WorkflowGetStatus
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IWorkflowAddDataMutation WorkflowAddData
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IListWorkflowsQuery ListWorkflows
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IWorkflowSubmissionMutation WorkflowSubmission
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionMutation WorkflowUrlSubmission
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IListSubmissionsQuery ListSubmissions
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IUpdateSubmissionMutation UpdateSubmission
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IGetSubmissionQuery GetSubmission
        {
            get;
        }

        global::IndicoV2.StrawberryShake.ICreateSubmissionResultsMutation CreateSubmissionResults
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IJobStatusQuery JobStatus
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IDatasetUploadStatusQuery DatasetUploadStatus
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IDataSetAddFilesMutation DataSetAddFiles
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IDataSetProcessFilesMutation DataSetProcessFiles
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IDataSetProcessCsvMutation DataSetProcessCsv
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IDataSetGetDatasetsQuery DataSetGetDatasets
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullQuery DataSetGetDatasetsFull
        {
            get;
        }

        global::IndicoV2.StrawberryShake.ISubmitReviewMutation SubmitReview
        {
            get;
        }

        global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteMutation SubmitReviewForceComplete
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IGetReviewsQuery GetReviews
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IModelGroupQueryQuery ModelGroupQuery
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IModelLoadMutation ModelLoad
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IPredictModelMutation PredictModel
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IModelGroupProgressQueryQuery ModelGroupProgressQuery
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IUserSummaryQuery UserSummary
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IUserSnapshotQuery UserSnapshot
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IUserChangelogQuery UserChangelog
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IUserSnapshotReportMutation UserSnapshotReport
        {
            get;
        }

        global::IndicoV2.StrawberryShake.IUserChangelogReportMutation UserChangelogReport
        {
            get;
        }
    }
}

namespace IndicoV2.StrawberryShake.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowEntity
    {
        public WorkflowEntity(global::IndicoV2.StrawberryShake.WorkflowStatus? status = default !, global::System.Int32? id = default !, global::System.String? name = default !, global::System.Boolean? reviewEnabled = default !)
        {
            Status = status;
            Id = id;
            Name = name;
            ReviewEnabled = reviewEnabled;
        }

        ///<summary>Current status of the workflow</summary>
        public global::IndicoV2.StrawberryShake.WorkflowStatus? Status
        {
            get;
        }

        ///<summary>Unique ID of the workflow</summary>
        public global::System.Int32? Id
        {
            get;
        }

        ///<summary>Workflow name</summary>
        public global::System.String? Name
        {
            get;
        }

        ///<summary>DEPRECATED: Status of the Review queue</summary>
        public global::System.Boolean? ReviewEnabled
        {
            get;
        }
    }

    ///<summary>Object containing data associated with a workflow submission</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionEntity
    {
        public SubmissionEntity(global::System.Int32? id = default !, global::System.Int32? datasetId = default !, global::System.Int32? workflowId = default !, global::IndicoV2.StrawberryShake.SubmissionStatus? status = default !, global::System.DateTimeOffset? createdAt = default !, global::System.DateTimeOffset? updatedAt = default !, global::System.Int32? createdBy = default !, global::System.Int32? updatedBy = default !, global::System.DateTimeOffset? completedAt = default !, global::System.String? errors = default !, global::System.Boolean? filesDeleted = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? inputFiles = default !, global::System.String? inputFile = default !, global::System.String? inputFilename = default !, global::System.String? resultFile = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? outputFiles = default !, global::System.Boolean? retrieved = default !, global::StrawberryShake.EntityId? autoReview = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? retries = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? reviews = default !, global::System.Boolean? reviewInProgress = default !)
        {
            Id = id;
            DatasetId = datasetId;
            WorkflowId = workflowId;
            Status = status;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            CreatedBy = createdBy;
            UpdatedBy = updatedBy;
            CompletedAt = completedAt;
            Errors = errors;
            FilesDeleted = filesDeleted;
            InputFiles = inputFiles;
            InputFile = inputFile;
            InputFilename = inputFilename;
            ResultFile = resultFile;
            OutputFiles = outputFiles;
            Retrieved = retrieved;
            AutoReview = autoReview;
            Retries = retries;
            Reviews = reviews;
            ReviewInProgress = reviewInProgress;
        }

        ///<summary>Unique ID of the submission</summary>
        public global::System.Int32? Id
        {
            get;
        }

        ///<summary>ID of the dataset associated with the submission</summary>
        public global::System.Int32? DatasetId
        {
            get;
        }

        ///<summary>ID of the workflow associated with the submission</summary>
        public global::System.Int32? WorkflowId
        {
            get;
        }

        ///<summary>Current status of the submission process</summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? Status
        {
            get;
        }

        ///<summary>Datetime the submission was created</summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        ///<summary>Datetime the submission was updated</summary>
        public global::System.DateTimeOffset? UpdatedAt
        {
            get;
        }

        ///<summary>ID of the user who created the submission</summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        ///<summary>ID of the user who updated the submission</summary>
        public global::System.Int32? UpdatedBy
        {
            get;
        }

        ///<summary>Datetime the submission reached a completed state</summary>
        public global::System.DateTimeOffset? CompletedAt
        {
            get;
        }

        ///<summary>Errors occurred during this submission</summary>
        public global::System.String? Errors
        {
            get;
        }

        ///<summary>Submission files have been deleted from file store</summary>
        public global::System.Boolean? FilesDeleted
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? InputFiles
        {
            get;
        }

        ///<summary>Local URL to first stored input</summary>
        public global::System.String? InputFile
        {
            get;
        }

        ///<summary>Original name of first file</summary>
        public global::System.String? InputFilename
        {
            get;
        }

        ///<summary>Local URL to most recently stored output</summary>
        public global::System.String? ResultFile
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? OutputFiles
        {
            get;
        }

        ///<summary>Submission has been marked as having been retrieved</summary>
        public global::System.Boolean? Retrieved
        {
            get;
        }

        ///<summary>Latest auto review for submission</summary>
        public global::StrawberryShake.EntityId? AutoReview
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Retries
        {
            get;
        }

        ///<summary>completed reviews of this submission, without changes</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Reviews
        {
            get;
        }

        ///<summary>True if the submission is being actively reviewed</summary>
        public global::System.Boolean? ReviewInProgress
        {
            get;
        }
    }

    ///<summary>Each submission can have 1 or more (bundled) files associated with it</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionFileEntity
    {
        public SubmissionFileEntity(global::System.Int32? id = default !, global::System.String? filepath = default !, global::System.String? filename = default !, global::IndicoV2.StrawberryShake.FileType? filetype = default !, global::System.Int32? submissionId = default !, global::System.Int32? fileSize = default !, global::System.Int32? numPages = default !)
        {
            Id = id;
            Filepath = filepath;
            Filename = filename;
            Filetype = filetype;
            SubmissionId = submissionId;
            FileSize = fileSize;
            NumPages = numPages;
        }

        ///<summary>Unique ID of this file</summary>
        public global::System.Int32? Id
        {
            get;
        }

        ///<summary>Local URL to stored input</summary>
        public global::System.String? Filepath
        {
            get;
        }

        ///<summary>Name of original file</summary>
        public global::System.String? Filename
        {
            get;
        }

        ///<summary>Type of file</summary>
        public global::IndicoV2.StrawberryShake.FileType? Filetype
        {
            get;
        }

        ///<summary>ID of the submission this file is associated with</summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        ///<summary>Size of file in bytes</summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        ///<summary>Number of pages in file</summary>
        public global::System.Int32? NumPages
        {
            get;
        }
    }

    ///<summary>Each submission can have 1 or more output files created during the workflow</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionOutputEntity
    {
        public SubmissionOutputEntity(global::System.Int32? id = default !, global::System.String? filepath = default !, global::System.Int32? submissionId = default !, global::System.Int32? componentId = default !, global::System.DateTimeOffset? createdAt = default !)
        {
            Id = id;
            Filepath = filepath;
            SubmissionId = submissionId;
            ComponentId = componentId;
            CreatedAt = createdAt;
        }

        ///<summary>Unique ID of this output</summary>
        public global::System.Int32? Id
        {
            get;
        }

        ///<summary>Local URL to stored input</summary>
        public global::System.String? Filepath
        {
            get;
        }

        ///<summary>ID of the submission this file is associated with</summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        ///<summary>ID of the workflow component that made this file</summary>
        public global::System.Int32? ComponentId
        {
            get;
        }

        ///<summary>Datetime the output file was created</summary>
        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }
    }

    ///<summary>Represents a review for a submission created by a machine (AUTO_REVIEW) or reviewer</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ReviewEntity
    {
        public ReviewEntity(global::System.Int32? id = default !, global::System.Int32? submissionId = default !, global::System.String? createdAt = default !, global::System.Int32? createdBy = default !, global::System.String? startedAt = default !, global::System.String? completedAt = default !, global::System.Boolean? rejected = default !, global::IndicoV2.StrawberryShake.ReviewType? reviewType = default !, global::System.String? notes = default !, global::System.String? changes = default !)
        {
            Id = id;
            SubmissionId = submissionId;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            StartedAt = startedAt;
            CompletedAt = completedAt;
            Rejected = rejected;
            ReviewType = reviewType;
            Notes = notes;
            Changes = changes;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.Int32? SubmissionId
        {
            get;
        }

        ///<summary>When this user first opened the file. See started_at as well</summary>
        public global::System.String? CreatedAt
        {
            get;
        }

        ///<summary>Reviewer id</summary>
        public global::System.Int32? CreatedBy
        {
            get;
        }

        ///<summary>When this review was started. Differs from created_at because a reviewer may restart their review at any time</summary>
        public global::System.String? StartedAt
        {
            get;
        }

        ///<summary>When this review was completed by the reviewer</summary>
        public global::System.String? CompletedAt
        {
            get;
        }

        public global::System.Boolean? Rejected
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ReviewType? ReviewType
        {
            get;
        }

        public global::System.String? Notes
        {
            get;
        }

        ///<summary>Changes for this review. This field is not generally available. Use submission result files instead</summary>
        public global::System.String? Changes
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionRetryEntity
    {
        public SubmissionRetryEntity(global::System.Int32? id = default !, global::System.Int32? submissionId = default !, global::System.String? previousErrors = default !, global::IndicoV2.StrawberryShake.SubmissionStatus? previousStatus = default !, global::System.String? retryErrors = default !)
        {
            Id = id;
            SubmissionId = submissionId;
            PreviousErrors = previousErrors;
            PreviousStatus = previousStatus;
            RetryErrors = retryErrors;
        }

        ///<summary>Unique ID of the submission retry</summary>
        public global::System.Int32? Id
        {
            get;
        }

        ///<summary>Unique ID of the associated submission</summary>
        public global::System.Int32? SubmissionId
        {
            get;
        }

        ///<summary>Errors from previous submission</summary>
        public global::System.String? PreviousErrors
        {
            get;
        }

        ///<summary>Status of submission before it was retried</summary>
        public global::IndicoV2.StrawberryShake.SubmissionStatus? PreviousStatus
        {
            get;
        }

        ///<summary>Errors that occurred during the retrying of this submission</summary>
        public global::System.String? RetryErrors
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobEntity
    {
        public JobEntity(global::System.String? id = default !, global::System.Boolean? ready = default !, global::IndicoV2.StrawberryShake.JobStatus? status = default !, global::System.String? result = default !)
        {
            Id = id;
            Ready = ready;
            Status = status;
            Result = result;
        }

        public global::System.String? Id
        {
            get;
        }

        public global::System.Boolean? Ready
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.JobStatus? Status
        {
            get;
        }

        public global::System.String? Result
        {
            get;
        }
    }

    ///<summary>This is the beginning of working with Indico! A datasetrepresents all the possible training data you'd like to work withto build one or more workflows. Includes users you'd like to workon the dataset with, the source datafiles, any labelsets for the files,etc</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetEntity
    {
        public DatasetEntity(global::System.Int32? id = default !, global::IndicoV2.StrawberryShake.DatasetStatus? status = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? files = default !, global::System.String? name = default !, global::System.Int32? rowCount = default !, global::System.Int32? numModelGroups = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? modelGroups = default !)
        {
            Id = id;
            Status = status;
            Files = files;
            Name = name;
            RowCount = rowCount;
            NumModelGroups = numModelGroups;
            ModelGroups = modelGroups;
        }

        public global::System.Int32? Id
        {
            get;
        }

        ///<summary>Status of this dataset which allows it to be used to create workflows, etc</summary>
        public global::IndicoV2.StrawberryShake.DatasetStatus? Status
        {
            get;
        }

        ///<summary>All the source files added to this dataset</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Files
        {
            get;
        }

        ///<summary>Name of this dataset</summary>
        public global::System.String? Name
        {
            get;
        }

        ///<summary>Number of rows in the dataset that can be used in model training</summary>
        public global::System.Int32? RowCount
        {
            get;
        }

        ///<summary>Number of model groups belonging to this Dataset</summary>
        public global::System.Int32? NumModelGroups
        {
            get;
        }

        ///<summary>All model groups that were created from this dataset</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? ModelGroups
        {
            get;
        }
    }

    ///<summary>Represents 1 source file within a DatasetMay be a CSV, which other DataFiles can spawn fromor an image or pdf, etc, which is what models and workflowswill use for training data</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataFileEntity
    {
        public DataFileEntity(global::System.Int32? id = default !, global::System.String? name = default !, global::System.Boolean? deleted = default !, global::System.Int32? fileSize = default !, global::System.String? rainbowUrl = default !, global::IndicoV2.StrawberryShake.FileType? fileType = default !, global::System.String? fileHash = default !, global::IndicoV2.StrawberryShake.FileStatus? status = default !, global::System.String? statusMeta = default !, global::IndicoV2.StrawberryShake.FileFailureType? failureType = default !)
        {
            Id = id;
            Name = name;
            Deleted = deleted;
            FileSize = fileSize;
            RainbowUrl = rainbowUrl;
            FileType = fileType;
            FileHash = fileHash;
            Status = status;
            StatusMeta = statusMeta;
            FailureType = failureType;
        }

        public global::System.Int32? Id
        {
            get;
        }

        ///<summary>Name of the uploaded file</summary>
        public global::System.String? Name
        {
            get;
        }

        ///<summary>This datafile was deleted from the dataset</summary>
        public global::System.Boolean? Deleted
        {
            get;
        }

        ///<summary>Size of the datafile in bytes</summary>
        public global::System.Int32? FileSize
        {
            get;
        }

        ///<summary>Indico URL to the source file</summary>
        public global::System.String? RainbowUrl
        {
            get;
        }

        ///<summary>Type of the datafile - UNKNOWN if not processed yet</summary>
        public global::IndicoV2.StrawberryShake.FileType? FileType
        {
            get;
        }

        ///<summary>Redundant representation of the rainbow_url</summary>
        public global::System.String? FileHash
        {
            get;
        }

        ///<summary>Status of the file as it's being processed for the dataset</summary>
        public global::IndicoV2.StrawberryShake.FileStatus? Status
        {
            get;
        }

        ///<summary>More information about the current status, including failure information</summary>
        public global::System.String? StatusMeta
        {
            get;
        }

        ///<summary>If this Datafile failed processing, this is why</summary>
        public global::IndicoV2.StrawberryShake.FileFailureType? FailureType
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupEntity
    {
        public ModelGroupEntity(global::System.Int32? id = default !, global::System.String? name = default !, global::IndicoV2.StrawberryShake.ModelStatus? status = default !, global::StrawberryShake.EntityId? selectedModel = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? models = default !)
        {
            Id = id;
            Name = name;
            Status = status;
            SelectedModel = selectedModel;
            Models = models;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }

        public global::StrawberryShake.EntityId? SelectedModel
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Models
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelEntity
    {
        public ModelEntity(global::System.Int32? id = default !, global::IndicoV2.StrawberryShake.ModelStatus? status = default !, global::IndicoV2.StrawberryShake.State.TrainingProgressData? trainingProgress = default !)
        {
            Id = id;
            Status = status;
            TrainingProgress = trainingProgress;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.ModelStatus? Status
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.State.TrainingProgressData? TrainingProgress
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotEntity
    {
        public UserSnapshotEntity(global::System.Int32? id = default !, global::System.String? name = default !, global::System.DateTimeOffset? createdAt = default !, global::System.Boolean? enabled = default !, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.AppRole?>? roles = default !, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? datasets = default !)
        {
            Id = id;
            Name = name;
            CreatedAt = createdAt;
            Enabled = enabled;
            Roles = roles;
            Datasets = datasets;
        }

        public global::System.Int32? Id
        {
            get;
        }

        public global::System.String? Name
        {
            get;
        }

        public global::System.DateTimeOffset? CreatedAt
        {
            get;
        }

        public global::System.Boolean? Enabled
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.AppRole?>? Roles
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? Datasets
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogEntity
    {
        public UserChangelogEntity(global::System.String? id = default !, global::System.DateTimeOffset? date = default !, global::System.String? userEmail = default !, global::System.String? updaterEmail = default !, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? previousDatasets = default !, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserChangeType?>? changesMade = default !)
        {
            Id = id;
            Date = date;
            UserEmail = userEmail;
            UpdaterEmail = updaterEmail;
            PreviousDatasets = previousDatasets;
            ChangesMade = changesMade;
        }

        ///<summary>Unique combination of date and user_id</summary>
        public global::System.String? Id
        {
            get;
        }

        public global::System.DateTimeOffset? Date
        {
            get;
        }

        public global::System.String? UserEmail
        {
            get;
        }

        public global::System.String? UpdaterEmail
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? PreviousDatasets
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserChangeType?>? ChangesMade
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtractionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.DocumentExtractionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DocumentExtractionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IDocumentExtractionResult);
        public DocumentExtractionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DocumentExtractionResultInfo info)
            {
                return new DocumentExtractionResult(MapIDocumentExtraction_DocumentExtraction(info.DocumentExtraction, snapshot));
            }

            throw new global::System.ArgumentException("DocumentExtractionResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IDocumentExtraction_DocumentExtraction? MapIDocumentExtraction_DocumentExtraction(global::IndicoV2.StrawberryShake.State.DocumentExtractionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDocumentExtraction_DocumentExtraction returnValue = default !;
            if (data?.__typename.Equals("DocumentExtraction", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DocumentExtraction_DocumentExtraction_DocumentExtraction(data.JobIds);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtractionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DocumentExtractionResultInfo(global::IndicoV2.StrawberryShake.State.DocumentExtractionData? documentExtraction, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DocumentExtraction = documentExtraction;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Extract text from a document using one of our OCR engine providers.
        /// Returns: List of ids of the document processing jobs kicked off by this mutation. Can be used to query for status and results.
        /// </summary>
        public global::IndicoV2.StrawberryShake.State.DocumentExtractionData? DocumentExtraction
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DocumentExtractionResultInfo(DocumentExtraction, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatusResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.WorkflowGetStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, WorkflowGetStatus_Workflows_Workflows_Workflow> _workflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper;
        public WorkflowGetStatusResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, WorkflowGetStatus_Workflows_Workflows_Workflow> workflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _workflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper = workflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper ?? throw new global::System.ArgumentNullException(nameof(workflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult);
        public WorkflowGetStatusResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is WorkflowGetStatusResultInfo info)
            {
                return new WorkflowGetStatusResult(MapIWorkflowGetStatus_Workflows(info.Workflows, snapshot));
            }

            throw new global::System.ArgumentException("WorkflowGetStatusResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows? MapIWorkflowGetStatus_Workflows(global::IndicoV2.StrawberryShake.State.WorkflowPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IWorkflowGetStatus_Workflows returnValue = default !;
            if (data?.__typename.Equals("WorkflowPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new WorkflowGetStatus_Workflows_WorkflowPage(MapIWorkflowGetStatus_Workflows_WorkflowsArray(data.Workflows, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows_Workflows?>? MapIWorkflowGetStatus_Workflows_WorkflowsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var workflows = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows_Workflows?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                workflows.Add(MapIWorkflowGetStatus_Workflows_Workflows(child, snapshot));
            }

            return workflows;
        }

        private global::IndicoV2.StrawberryShake.IWorkflowGetStatus_Workflows_Workflows? MapIWorkflowGetStatus_Workflows_Workflows(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                return _workflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.WorkflowEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatusResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public WorkflowGetStatusResultInfo(global::IndicoV2.StrawberryShake.State.WorkflowPageData? workflows, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Workflows = workflows;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.WorkflowPageData? Workflows
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new WorkflowGetStatusResultInfo(Workflows, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, WorkflowGetStatus_Workflows_Workflows_Workflow>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public WorkflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public WorkflowGetStatus_Workflows_Workflows_Workflow Map(global::IndicoV2.StrawberryShake.State.WorkflowEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new WorkflowGetStatus_Workflows_Workflows_Workflow(entity.Status);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.WorkflowAddDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, WorkflowAddData_AddDataToWorkflow_Workflow_Workflow> _workflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper;
        public WorkflowAddDataResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, WorkflowAddData_AddDataToWorkflow_Workflow_Workflow> workflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _workflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper = workflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper ?? throw new global::System.ArgumentNullException(nameof(workflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IWorkflowAddDataResult);
        public WorkflowAddDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is WorkflowAddDataResultInfo info)
            {
                return new WorkflowAddDataResult(MapIWorkflowAddData_AddDataToWorkflow(info.AddDataToWorkflow, snapshot));
            }

            throw new global::System.ArgumentException("WorkflowAddDataResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow? MapIWorkflowAddData_AddDataToWorkflow(global::IndicoV2.StrawberryShake.State.AddDataToWorkflowData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IWorkflowAddData_AddDataToWorkflow returnValue = default !;
            if (data?.__typename.Equals("AddDataToWorkflow", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new WorkflowAddData_AddDataToWorkflow_AddDataToWorkflow(MapIWorkflowAddData_AddDataToWorkflow_Workflow(data.Workflow, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::IndicoV2.StrawberryShake.IWorkflowAddData_AddDataToWorkflow_Workflow? MapIWorkflowAddData_AddDataToWorkflow_Workflow(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                return _workflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.WorkflowEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public WorkflowAddDataResultInfo(global::IndicoV2.StrawberryShake.State.AddDataToWorkflowData? addDataToWorkflow, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddDataToWorkflow = addDataToWorkflow;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.AddDataToWorkflowData? AddDataToWorkflow
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new WorkflowAddDataResultInfo(AddDataToWorkflow, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, WorkflowAddData_AddDataToWorkflow_Workflow_Workflow>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public WorkflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public WorkflowAddData_AddDataToWorkflow_Workflow_Workflow Map(global::IndicoV2.StrawberryShake.State.WorkflowEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new WorkflowAddData_AddDataToWorkflow_Workflow_Workflow(entity.Id, entity.Name, entity.Status);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflowsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ListWorkflowsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, ListWorkflows_Workflows_Workflows_Workflow> _listWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper;
        public ListWorkflowsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, ListWorkflows_Workflows_Workflows_Workflow> listWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _listWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper = listWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IListWorkflowsResult);
        public ListWorkflowsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ListWorkflowsResultInfo info)
            {
                return new ListWorkflowsResult(MapIListWorkflows_Workflows(info.Workflows, snapshot));
            }

            throw new global::System.ArgumentException("ListWorkflowsResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IListWorkflows_Workflows? MapIListWorkflows_Workflows(global::IndicoV2.StrawberryShake.State.WorkflowPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IListWorkflows_Workflows returnValue = default !;
            if (data?.__typename.Equals("WorkflowPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ListWorkflows_Workflows_WorkflowPage(MapIListWorkflows_Workflows_WorkflowsArray(data.Workflows, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListWorkflows_Workflows_Workflows?>? MapIListWorkflows_Workflows_WorkflowsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var workflows = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListWorkflows_Workflows_Workflows?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                workflows.Add(MapIListWorkflows_Workflows_Workflows(child, snapshot));
            }

            return workflows;
        }

        private global::IndicoV2.StrawberryShake.IListWorkflows_Workflows_Workflows? MapIListWorkflows_Workflows_Workflows(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                return _listWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.WorkflowEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflowsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ListWorkflowsResultInfo(global::IndicoV2.StrawberryShake.State.WorkflowPageData? workflows, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Workflows = workflows;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.WorkflowPageData? Workflows
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ListWorkflowsResultInfo(Workflows, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, ListWorkflows_Workflows_Workflows_Workflow>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ListWorkflows_Workflows_Workflows_Workflow Map(global::IndicoV2.StrawberryShake.State.WorkflowEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListWorkflows_Workflows_Workflows_Workflow(entity.Id, entity.Name, entity.ReviewEnabled);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowSubmissionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.WorkflowSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public WorkflowSubmissionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult);
        public WorkflowSubmissionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is WorkflowSubmissionResultInfo info)
            {
                return new WorkflowSubmissionResult(MapIWorkflowSubmission_WorkflowSubmission(info.WorkflowSubmission, snapshot));
            }

            throw new global::System.ArgumentException("WorkflowSubmissionResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IWorkflowSubmission_WorkflowSubmission? MapIWorkflowSubmission_WorkflowSubmission(global::IndicoV2.StrawberryShake.State.SubmissionResultData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IWorkflowSubmission_WorkflowSubmission returnValue = default !;
            if (data?.__typename.Equals("SubmissionResult", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new WorkflowSubmission_WorkflowSubmission_SubmissionResult(data.JobIds, data.SubmissionIds);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowSubmissionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public WorkflowSubmissionResultInfo(global::IndicoV2.StrawberryShake.State.SubmissionResultData? workflowSubmission, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            WorkflowSubmission = workflowSubmission;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Submit files to a workflow for processing
        /// Returns: SubmissionResult object which contains ids that can be queried for status and results.
        /// </summary>
        public global::IndicoV2.StrawberryShake.State.SubmissionResultData? WorkflowSubmission
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new WorkflowSubmissionResultInfo(WorkflowSubmission, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowUrlSubmissionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.WorkflowUrlSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public WorkflowUrlSubmissionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult);
        public WorkflowUrlSubmissionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is WorkflowUrlSubmissionResultInfo info)
            {
                return new WorkflowUrlSubmissionResult(MapIWorkflowUrlSubmission_WorkflowUrlSubmission(info.WorkflowUrlSubmission, snapshot));
            }

            throw new global::System.ArgumentException("WorkflowUrlSubmissionResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IWorkflowUrlSubmission_WorkflowUrlSubmission? MapIWorkflowUrlSubmission_WorkflowUrlSubmission(global::IndicoV2.StrawberryShake.State.SubmissionResultData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IWorkflowUrlSubmission_WorkflowUrlSubmission returnValue = default !;
            if (data?.__typename.Equals("SubmissionResult", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new WorkflowUrlSubmission_WorkflowUrlSubmission_SubmissionResult(data.JobIds, data.SubmissionIds);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowUrlSubmissionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public WorkflowUrlSubmissionResultInfo(global::IndicoV2.StrawberryShake.State.SubmissionResultData? workflowUrlSubmission, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            WorkflowUrlSubmission = workflowUrlSubmission;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.SubmissionResultData? WorkflowUrlSubmission
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new WorkflowUrlSubmissionResultInfo(WorkflowUrlSubmission, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ListSubmissionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, ListSubmissions_Submissions_Submissions_Submission> _listSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile> _listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput> _listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_AutoReview_Review> _listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry> _listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_Reviews_Review> _listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper;
        public ListSubmissionsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, ListSubmissions_Submissions_Submissions_Submission> listSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile> listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput> listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_AutoReview_Review> listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry> listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_Reviews_Review> listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _listSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper = listSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper));
            _listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper = listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper));
            _listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper = listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper));
            _listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper = listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper));
            _listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper = listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper));
            _listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper = listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IListSubmissionsResult);
        public ListSubmissionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ListSubmissionsResultInfo info)
            {
                return new ListSubmissionsResult(MapIListSubmissions_Submissions(info.Submissions, snapshot));
            }

            throw new global::System.ArgumentException("ListSubmissionsResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions? MapIListSubmissions_Submissions(global::IndicoV2.StrawberryShake.State.SubmissionPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IListSubmissions_Submissions returnValue = default !;
            if (data?.__typename.Equals("SubmissionPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ListSubmissions_Submissions_SubmissionPage(MapIListSubmissions_Submissions_SubmissionsArray(data.Submissions, snapshot), MapIListSubmissions_Submissions_PageInfo(data.PageInfo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions?>? MapIListSubmissions_Submissions_SubmissionsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissions = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissions.Add(MapIListSubmissions_Submissions_Submissions(child, snapshot));
            }

            return submissions;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions? MapIListSubmissions_Submissions_Submissions(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles?>? MapIListSubmissions_Submissions_Submissions_InputFilesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionFiles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionFiles.Add(MapIListSubmissions_Submissions_Submissions_InputFiles(child, snapshot));
            }

            return submissionFiles;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles? MapIListSubmissions_Submissions_Submissions_InputFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionFile", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles?>? MapIListSubmissions_Submissions_Submissions_OutputFilesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionOutputs = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionOutputs.Add(MapIListSubmissions_Submissions_Submissions_OutputFiles(child, snapshot));
            }

            return submissionOutputs;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles? MapIListSubmissions_Submissions_Submissions_OutputFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionOutput", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_AutoReview? MapIListSubmissions_Submissions_Submissions_AutoReview(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries?>? MapIListSubmissions_Submissions_Submissions_RetriesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionRetrys = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionRetrys.Add(MapIListSubmissions_Submissions_Submissions_Retries(child, snapshot));
            }

            return submissionRetrys;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries? MapIListSubmissions_Submissions_Submissions_Retries(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionRetry", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews?>? MapIListSubmissions_Submissions_Submissions_ReviewsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var reviews = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                reviews.Add(MapIListSubmissions_Submissions_Submissions_Reviews(child, snapshot));
            }

            return reviews;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews? MapIListSubmissions_Submissions_Submissions_Reviews(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_PageInfo? MapIListSubmissions_Submissions_PageInfo(global::IndicoV2.StrawberryShake.State.PageInfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IListSubmissions_Submissions_PageInfo returnValue = default !;
            if (data?.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ListSubmissions_Submissions_PageInfo_PageInfo(data.StartCursor, data.EndCursor, data.HasNextPage, data.AggregateCount);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ListSubmissionsResultInfo(global::IndicoV2.StrawberryShake.State.SubmissionPageData? submissions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Submissions = submissions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.SubmissionPageData? Submissions
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ListSubmissionsResultInfo(Submissions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, ListSubmissions_Submissions_Submissions_Submission>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile> _listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput> _listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_AutoReview_Review> _listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry> _listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_Reviews_Review> _listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper;
        public ListSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile> listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput> listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_AutoReview_Review> listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry> listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_Reviews_Review> listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper = listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper));
            _listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper = listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper));
            _listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper = listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper));
            _listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper = listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper));
            _listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper = listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper));
        }

        public ListSubmissions_Submissions_Submissions_Submission Map(global::IndicoV2.StrawberryShake.State.SubmissionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListSubmissions_Submissions_Submissions_Submission(entity.Id, entity.DatasetId, entity.WorkflowId, entity.Status, entity.CreatedAt, entity.UpdatedAt, entity.CreatedBy, entity.UpdatedBy, entity.CompletedAt, entity.Errors, entity.FilesDeleted, MapIListSubmissions_Submissions_Submissions_InputFilesArray(entity.InputFiles, snapshot), entity.InputFile, entity.InputFilename, entity.ResultFile, MapIListSubmissions_Submissions_Submissions_OutputFilesArray(entity.OutputFiles, snapshot), entity.Retrieved, MapIListSubmissions_Submissions_Submissions_AutoReview(entity.AutoReview, snapshot), MapIListSubmissions_Submissions_Submissions_RetriesArray(entity.Retries, snapshot), MapIListSubmissions_Submissions_Submissions_ReviewsArray(entity.Reviews, snapshot), entity.ReviewInProgress);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles?>? MapIListSubmissions_Submissions_Submissions_InputFilesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionFiles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionFiles.Add(MapIListSubmissions_Submissions_Submissions_InputFiles(child, snapshot));
            }

            return submissionFiles;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_InputFiles? MapIListSubmissions_Submissions_Submissions_InputFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionFile", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles?>? MapIListSubmissions_Submissions_Submissions_OutputFilesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionOutputs = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionOutputs.Add(MapIListSubmissions_Submissions_Submissions_OutputFiles(child, snapshot));
            }

            return submissionOutputs;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_OutputFiles? MapIListSubmissions_Submissions_Submissions_OutputFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionOutput", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_AutoReview? MapIListSubmissions_Submissions_Submissions_AutoReview(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries?>? MapIListSubmissions_Submissions_Submissions_RetriesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionRetrys = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionRetrys.Add(MapIListSubmissions_Submissions_Submissions_Retries(child, snapshot));
            }

            return submissionRetrys;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Retries? MapIListSubmissions_Submissions_Submissions_Retries(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionRetry", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews?>? MapIListSubmissions_Submissions_Submissions_ReviewsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var reviews = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                reviews.Add(MapIListSubmissions_Submissions_Submissions_Reviews(child, snapshot));
            }

            return reviews;
        }

        private global::IndicoV2.StrawberryShake.IListSubmissions_Submissions_Submissions_Reviews? MapIListSubmissions_Submissions_Submissions_Reviews(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _listSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile Map(global::IndicoV2.StrawberryShake.State.SubmissionFileEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile(entity.Id, entity.Filepath, entity.Filename, entity.Filetype, entity.SubmissionId, entity.FileSize, entity.NumPages);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput Map(global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput(entity.Id, entity.Filepath, entity.SubmissionId, entity.ComponentId, entity.CreatedAt);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_AutoReview_Review>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ListSubmissions_Submissions_Submissions_AutoReview_Review Map(global::IndicoV2.StrawberryShake.State.ReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListSubmissions_Submissions_Submissions_AutoReview_Review(entity.Id, entity.SubmissionId, entity.CreatedAt, entity.CreatedBy, entity.StartedAt, entity.CompletedAt, entity.Rejected, entity.ReviewType, entity.Notes);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry Map(global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry(entity.Id, entity.SubmissionId, entity.PreviousErrors, entity.PreviousStatus, entity.RetryErrors);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, ListSubmissions_Submissions_Submissions_Reviews_Review>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ListSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ListSubmissions_Submissions_Submissions_Reviews_Review Map(global::IndicoV2.StrawberryShake.State.ReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ListSubmissions_Submissions_Submissions_Reviews_Review(entity.Id, entity.SubmissionId, entity.CreatedAt, entity.CreatedBy, entity.StartedAt, entity.CompletedAt, entity.Rejected, entity.ReviewType, entity.Notes);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmissionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.UpdateSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, UpdateSubmission_UpdateSubmission_Submission> _updateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper;
        public UpdateSubmissionResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, UpdateSubmission_UpdateSubmission_Submission> updateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _updateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper = updateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IUpdateSubmissionResult);
        public UpdateSubmissionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateSubmissionResultInfo info)
            {
                return new UpdateSubmissionResult(MapIUpdateSubmission_UpdateSubmission(info.UpdateSubmission, snapshot));
            }

            throw new global::System.ArgumentException("UpdateSubmissionResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IUpdateSubmission_UpdateSubmission? MapIUpdateSubmission_UpdateSubmission(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                return _updateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmissionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateSubmissionResultInfo(global::StrawberryShake.EntityId? updateSubmission, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateSubmission = updateSubmission;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? UpdateSubmission
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateSubmissionResultInfo(UpdateSubmission, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, UpdateSubmission_UpdateSubmission_Submission>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UpdateSubmission_UpdateSubmission_Submission Map(global::IndicoV2.StrawberryShake.State.SubmissionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UpdateSubmission_UpdateSubmission_Submission(entity.Id, entity.DatasetId, entity.WorkflowId, entity.Status, entity.InputFile, entity.InputFilename, entity.ResultFile, entity.Retrieved);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmissionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.GetSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, GetSubmission_Submission_Submission> _getSubmission_Submission_SubmissionFromSubmissionEntityMapper;
        public GetSubmissionResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, GetSubmission_Submission_Submission> getSubmission_Submission_SubmissionFromSubmissionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSubmission_Submission_SubmissionFromSubmissionEntityMapper = getSubmission_Submission_SubmissionFromSubmissionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSubmission_Submission_SubmissionFromSubmissionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IGetSubmissionResult);
        public GetSubmissionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSubmissionResultInfo info)
            {
                return new GetSubmissionResult(MapIGetSubmission_Submission(info.Submission, snapshot));
            }

            throw new global::System.ArgumentException("GetSubmissionResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IGetSubmission_Submission? MapIGetSubmission_Submission(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                return _getSubmission_Submission_SubmissionFromSubmissionEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmissionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSubmissionResultInfo(global::StrawberryShake.EntityId? submission, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Submission = submission;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Submission
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSubmissionResultInfo(Submission, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_SubmissionFromSubmissionEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, GetSubmission_Submission_Submission>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, GetSubmission_Submission_InputFiles_SubmissionFile> _getSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, GetSubmission_Submission_OutputFiles_SubmissionOutput> _getSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetSubmission_Submission_AutoReview_Review> _getSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, GetSubmission_Submission_Retries_SubmissionRetry> _getSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetSubmission_Submission_Reviews_Review> _getSubmission_Submission_Reviews_ReviewFromReviewEntityMapper;
        public GetSubmission_Submission_SubmissionFromSubmissionEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, GetSubmission_Submission_InputFiles_SubmissionFile> getSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, GetSubmission_Submission_OutputFiles_SubmissionOutput> getSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetSubmission_Submission_AutoReview_Review> getSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, GetSubmission_Submission_Retries_SubmissionRetry> getSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetSubmission_Submission_Reviews_Review> getSubmission_Submission_Reviews_ReviewFromReviewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper = getSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper));
            _getSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper = getSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper));
            _getSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper = getSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper));
            _getSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper = getSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper));
            _getSubmission_Submission_Reviews_ReviewFromReviewEntityMapper = getSubmission_Submission_Reviews_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getSubmission_Submission_Reviews_ReviewFromReviewEntityMapper));
        }

        public GetSubmission_Submission_Submission Map(global::IndicoV2.StrawberryShake.State.SubmissionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSubmission_Submission_Submission(entity.Id, entity.DatasetId, entity.WorkflowId, entity.Status, entity.CreatedAt, entity.UpdatedAt, entity.CreatedBy, entity.UpdatedBy, entity.CompletedAt, entity.Errors, entity.FilesDeleted, MapIGetSubmission_Submission_InputFilesArray(entity.InputFiles, snapshot), entity.InputFile, entity.InputFilename, entity.ResultFile, MapIGetSubmission_Submission_OutputFilesArray(entity.OutputFiles, snapshot), entity.Retrieved, MapIGetSubmission_Submission_AutoReview(entity.AutoReview, snapshot), MapIGetSubmission_Submission_RetriesArray(entity.Retries, snapshot), MapIGetSubmission_Submission_ReviewsArray(entity.Reviews, snapshot), entity.ReviewInProgress);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_InputFiles?>? MapIGetSubmission_Submission_InputFilesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionFiles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_InputFiles?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionFiles.Add(MapIGetSubmission_Submission_InputFiles(child, snapshot));
            }

            return submissionFiles;
        }

        private global::IndicoV2.StrawberryShake.IGetSubmission_Submission_InputFiles? MapIGetSubmission_Submission_InputFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionFile", global::System.StringComparison.Ordinal))
            {
                return _getSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_OutputFiles?>? MapIGetSubmission_Submission_OutputFilesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionOutputs = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_OutputFiles?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionOutputs.Add(MapIGetSubmission_Submission_OutputFiles(child, snapshot));
            }

            return submissionOutputs;
        }

        private global::IndicoV2.StrawberryShake.IGetSubmission_Submission_OutputFiles? MapIGetSubmission_Submission_OutputFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionOutput", global::System.StringComparison.Ordinal))
            {
                return _getSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.IGetSubmission_Submission_AutoReview? MapIGetSubmission_Submission_AutoReview(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _getSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Retries?>? MapIGetSubmission_Submission_RetriesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var submissionRetrys = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Retries?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                submissionRetrys.Add(MapIGetSubmission_Submission_Retries(child, snapshot));
            }

            return submissionRetrys;
        }

        private global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Retries? MapIGetSubmission_Submission_Retries(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("SubmissionRetry", global::System.StringComparison.Ordinal))
            {
                return _getSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Reviews?>? MapIGetSubmission_Submission_ReviewsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var reviews = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Reviews?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                reviews.Add(MapIGetSubmission_Submission_Reviews(child, snapshot));
            }

            return reviews;
        }

        private global::IndicoV2.StrawberryShake.IGetSubmission_Submission_Reviews? MapIGetSubmission_Submission_Reviews(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _getSubmission_Submission_Reviews_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, GetSubmission_Submission_InputFiles_SubmissionFile>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSubmission_Submission_InputFiles_SubmissionFile Map(global::IndicoV2.StrawberryShake.State.SubmissionFileEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSubmission_Submission_InputFiles_SubmissionFile(entity.Id, entity.Filepath, entity.Filename, entity.Filetype, entity.SubmissionId, entity.FileSize, entity.NumPages);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, GetSubmission_Submission_OutputFiles_SubmissionOutput>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSubmission_Submission_OutputFiles_SubmissionOutput Map(global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSubmission_Submission_OutputFiles_SubmissionOutput(entity.Id, entity.Filepath, entity.SubmissionId, entity.ComponentId, entity.CreatedAt);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetSubmission_Submission_AutoReview_Review>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSubmission_Submission_AutoReview_Review Map(global::IndicoV2.StrawberryShake.State.ReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSubmission_Submission_AutoReview_Review(entity.Id, entity.SubmissionId, entity.CreatedAt, entity.CreatedBy, entity.StartedAt, entity.CompletedAt, entity.Rejected, entity.ReviewType, entity.Notes);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, GetSubmission_Submission_Retries_SubmissionRetry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSubmission_Submission_Retries_SubmissionRetry Map(global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSubmission_Submission_Retries_SubmissionRetry(entity.Id, entity.SubmissionId, entity.PreviousErrors, entity.PreviousStatus, entity.RetryErrors);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmission_Submission_Reviews_ReviewFromReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetSubmission_Submission_Reviews_Review>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSubmission_Submission_Reviews_ReviewFromReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetSubmission_Submission_Reviews_Review Map(global::IndicoV2.StrawberryShake.State.ReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetSubmission_Submission_Reviews_Review(entity.Id, entity.SubmissionId, entity.CreatedAt, entity.CreatedBy, entity.StartedAt, entity.CompletedAt, entity.Rejected, entity.ReviewType, entity.Notes);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CreateSubmissionResultsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.CreateSubmissionResultsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateSubmissionResultsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult);
        public CreateSubmissionResultsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateSubmissionResultsResultInfo info)
            {
                return new CreateSubmissionResultsResult(MapICreateSubmissionResults_SubmissionResults(info.SubmissionResults, snapshot));
            }

            throw new global::System.ArgumentException("CreateSubmissionResultsResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.ICreateSubmissionResults_SubmissionResults? MapICreateSubmissionResults_SubmissionResults(global::IndicoV2.StrawberryShake.State.SubmissionResultsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateSubmissionResults_SubmissionResults returnValue = default !;
            if (data?.__typename.Equals("SubmissionResults", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateSubmissionResults_SubmissionResults_SubmissionResults(data.JobId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CreateSubmissionResultsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateSubmissionResultsResultInfo(global::IndicoV2.StrawberryShake.State.SubmissionResultsData? submissionResults, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SubmissionResults = submissionResults;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.SubmissionResultsData? SubmissionResults
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateSubmissionResultsResultInfo(SubmissionResults, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatus_1ResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.JobStatus_1Result>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.JobEntity, JobStatus_Job_Job> _jobStatus_Job_JobFromJobEntityMapper;
        public JobStatus_1ResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.JobEntity, JobStatus_Job_Job> jobStatus_Job_JobFromJobEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _jobStatus_Job_JobFromJobEntityMapper = jobStatus_Job_JobFromJobEntityMapper ?? throw new global::System.ArgumentNullException(nameof(jobStatus_Job_JobFromJobEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IJobStatusResult);
        public JobStatus_1Result Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is JobStatus_1ResultInfo info)
            {
                return new JobStatus_1Result(MapIJobStatus_Job(info.Job, snapshot));
            }

            throw new global::System.ArgumentException("JobStatus_1ResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IJobStatus_Job? MapIJobStatus_Job(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Job", global::System.StringComparison.Ordinal))
            {
                return _jobStatus_Job_JobFromJobEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.JobEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatus_1ResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public JobStatus_1ResultInfo(global::StrawberryShake.EntityId? job, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Job = job;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Job
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new JobStatus_1ResultInfo(Job, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatus_Job_JobFromJobEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.JobEntity, JobStatus_Job_Job>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public JobStatus_Job_JobFromJobEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public JobStatus_Job_Job Map(global::IndicoV2.StrawberryShake.State.JobEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new JobStatus_Job_Job(entity.Id, entity.Ready, entity.Status, entity.Result);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatusResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.DatasetUploadStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DatasetUploadStatus_Dataset_Dataset> _datasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper;
        public DatasetUploadStatusResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DatasetUploadStatus_Dataset_Dataset> datasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _datasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper = datasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(datasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult);
        public DatasetUploadStatusResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DatasetUploadStatusResultInfo info)
            {
                return new DatasetUploadStatusResult(MapIDatasetUploadStatus_Dataset(info.Dataset, snapshot));
            }

            throw new global::System.ArgumentException("DatasetUploadStatusResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset? MapIDatasetUploadStatus_Dataset(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                return _datasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.DatasetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatusResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DatasetUploadStatusResultInfo(global::StrawberryShake.EntityId? dataset, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Dataset = dataset;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single dataset by id
        /// </summary>
        public global::StrawberryShake.EntityId? Dataset
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DatasetUploadStatusResultInfo(Dataset, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DatasetUploadStatus_Dataset_Dataset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DataFileEntity, DatasetUploadStatus_Dataset_Files_DataFile> _datasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper;
        public DatasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DataFileEntity, DatasetUploadStatus_Dataset_Files_DataFile> datasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _datasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper = datasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper ?? throw new global::System.ArgumentNullException(nameof(datasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper));
        }

        public DatasetUploadStatus_Dataset_Dataset Map(global::IndicoV2.StrawberryShake.State.DatasetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DatasetUploadStatus_Dataset_Dataset(entity.Id, entity.Status, MapIDatasetUploadStatus_Dataset_FilesArray(entity.Files, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset_Files?>? MapIDatasetUploadStatus_Dataset_FilesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var dataFiles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset_Files?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                dataFiles.Add(MapIDatasetUploadStatus_Dataset_Files(child, snapshot));
            }

            return dataFiles;
        }

        private global::IndicoV2.StrawberryShake.IDatasetUploadStatus_Dataset_Files? MapIDatasetUploadStatus_Dataset_Files(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DataFile", global::System.StringComparison.Ordinal))
            {
                return _datasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.DataFileEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DataFileEntity, DatasetUploadStatus_Dataset_Files_DataFile>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DatasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DatasetUploadStatus_Dataset_Files_DataFile Map(global::IndicoV2.StrawberryShake.State.DataFileEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DatasetUploadStatus_Dataset_Files_DataFile(entity.Id, entity.Name, entity.Deleted, entity.FileSize, entity.RainbowUrl, entity.FileType, entity.FileHash, entity.Status, entity.StatusMeta, entity.FailureType);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFilesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.DataSetAddFilesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetAddFiles_AddDatasetFiles_Dataset> _dataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper;
        public DataSetAddFilesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetAddFiles_AddDatasetFiles_Dataset> dataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _dataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper = dataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(dataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IDataSetAddFilesResult);
        public DataSetAddFilesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DataSetAddFilesResultInfo info)
            {
                return new DataSetAddFilesResult(MapIDataSetAddFiles_AddDatasetFiles(info.AddDatasetFiles, snapshot));
            }

            throw new global::System.ArgumentException("DataSetAddFilesResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IDataSetAddFiles_AddDatasetFiles? MapIDataSetAddFiles_AddDatasetFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                return _dataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.DatasetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFilesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DataSetAddFilesResultInfo(global::StrawberryShake.EntityId? addDatasetFiles, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddDatasetFiles = addDatasetFiles;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Add some uploaded files of any type to the dataset. We recommend
        /// autoprocess=True, otherwise AddDataFiles or AddDataCSV should be
        /// called after the files are added
        /// </summary>
        public global::StrawberryShake.EntityId? AddDatasetFiles
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DataSetAddFilesResultInfo(AddDatasetFiles, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetAddFiles_AddDatasetFiles_Dataset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DataSetAddFiles_AddDatasetFiles_Dataset Map(global::IndicoV2.StrawberryShake.State.DatasetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DataSetAddFiles_AddDatasetFiles_Dataset(entity.Id, entity.Status);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFilesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.DataSetProcessFilesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetProcessFiles_AddDataFiles_Dataset> _dataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper;
        public DataSetProcessFilesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetProcessFiles_AddDataFiles_Dataset> dataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _dataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper = dataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(dataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult);
        public DataSetProcessFilesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DataSetProcessFilesResultInfo info)
            {
                return new DataSetProcessFilesResult(MapIDataSetProcessFiles_AddDataFiles(info.AddDataFiles, snapshot));
            }

            throw new global::System.ArgumentException("DataSetProcessFilesResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IDataSetProcessFiles_AddDataFiles? MapIDataSetProcessFiles_AddDataFiles(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                return _dataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.DatasetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFilesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DataSetProcessFilesResultInfo(global::StrawberryShake.EntityId? addDataFiles, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddDataFiles = addDataFiles;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Start processing recently added non-CSV data files to the dataset
        /// </summary>
        public global::StrawberryShake.EntityId? AddDataFiles
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DataSetProcessFilesResultInfo(AddDataFiles, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetProcessFiles_AddDataFiles_Dataset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DataSetProcessFiles_AddDataFiles_Dataset Map(global::IndicoV2.StrawberryShake.State.DatasetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DataSetProcessFiles_AddDataFiles_Dataset(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsvResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.DataSetProcessCsvResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetProcessCsv_AddDataCsv_Dataset> _dataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper;
        public DataSetProcessCsvResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetProcessCsv_AddDataCsv_Dataset> dataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _dataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper = dataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(dataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult);
        public DataSetProcessCsvResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DataSetProcessCsvResultInfo info)
            {
                return new DataSetProcessCsvResult(MapIDataSetProcessCsv_AddDataCsv(info.AddDataCsv, snapshot));
            }

            throw new global::System.ArgumentException("DataSetProcessCsvResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IDataSetProcessCsv_AddDataCsv? MapIDataSetProcessCsv_AddDataCsv(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                return _dataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.DatasetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsvResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DataSetProcessCsvResultInfo(global::StrawberryShake.EntityId? addDataCsv, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddDataCsv = addDataCsv;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Start processing recently added CSV data files to the dataset
        /// </summary>
        public global::StrawberryShake.EntityId? AddDataCsv
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DataSetProcessCsvResultInfo(AddDataCsv, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetProcessCsv_AddDataCsv_Dataset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DataSetProcessCsv_AddDataCsv_Dataset Map(global::IndicoV2.StrawberryShake.State.DatasetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DataSetProcessCsv_AddDataCsv_Dataset(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.DataSetGetDatasetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetGetDatasets_Datasets_Dataset> _dataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper;
        public DataSetGetDatasetsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetGetDatasets_Datasets_Dataset> dataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _dataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper = dataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(dataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult);
        public DataSetGetDatasetsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DataSetGetDatasetsResultInfo info)
            {
                return new DataSetGetDatasetsResult(MapIDataSetGetDatasets_DatasetsArray(info.Datasets, snapshot));
            }

            throw new global::System.ArgumentException("DataSetGetDatasetsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasets_Datasets?>? MapIDataSetGetDatasets_DatasetsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var datasets = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IDataSetGetDatasets_Datasets?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                datasets.Add(MapIDataSetGetDatasets_Datasets(child, snapshot));
            }

            return datasets;
        }

        private global::IndicoV2.StrawberryShake.IDataSetGetDatasets_Datasets? MapIDataSetGetDatasets_Datasets(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                return _dataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.DatasetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DataSetGetDatasetsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? datasets, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Datasets = datasets;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Datasets
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DataSetGetDatasetsResultInfo(Datasets, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetGetDatasets_Datasets_Dataset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DataSetGetDatasets_Datasets_Dataset Map(global::IndicoV2.StrawberryShake.State.DatasetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DataSetGetDatasets_Datasets_Dataset(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFullResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.DataSetGetDatasetsFullResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset> _dataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup> _dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper;
        public DataSetGetDatasetsFullResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset> dataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup> dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _dataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper = dataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(dataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper));
            _dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper = dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper ?? throw new global::System.ArgumentNullException(nameof(dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult);
        public DataSetGetDatasetsFullResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DataSetGetDatasetsFullResultInfo info)
            {
                return new DataSetGetDatasetsFullResult(MapIDataSetGetDatasetsFull_DatasetsPage(info.DatasetsPage, snapshot));
            }

            throw new global::System.ArgumentException("DataSetGetDatasetsFullResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage? MapIDataSetGetDatasetsFull_DatasetsPage(global::IndicoV2.StrawberryShake.State.DatasetPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDataSetGetDatasetsFull_DatasetsPage returnValue = default !;
            if (data?.__typename.Equals("DatasetPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DataSetGetDatasetsFull_DatasetsPage_DatasetPage(MapIDataSetGetDatasetsFull_DatasetsPage_DatasetsArray(data.Datasets, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets?>? MapIDataSetGetDatasetsFull_DatasetsPage_DatasetsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var datasets = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                datasets.Add(MapIDataSetGetDatasetsFull_DatasetsPage_Datasets(child, snapshot));
            }

            return datasets;
        }

        private global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets? MapIDataSetGetDatasetsFull_DatasetsPage_Datasets(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                return _dataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.DatasetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups?>? MapIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var modelGroups = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                modelGroups.Add(MapIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups(child, snapshot));
            }

            return modelGroups;
        }

        private global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups? MapIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ModelGroup", global::System.StringComparison.Ordinal))
            {
                return _dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelGroupEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFullResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DataSetGetDatasetsFullResultInfo(global::IndicoV2.StrawberryShake.State.DatasetPageData? datasetsPage, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DatasetsPage = datasetsPage;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.DatasetPageData? DatasetsPage
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DataSetGetDatasetsFullResultInfo(DatasetsPage, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup> _dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper;
        public DataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup> dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper = dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper ?? throw new global::System.ArgumentNullException(nameof(dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper));
        }

        public DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset Map(global::IndicoV2.StrawberryShake.State.DatasetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset(entity.Id, entity.Name, entity.Status, entity.RowCount, entity.NumModelGroups, MapIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsArray(entity.ModelGroups, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups?>? MapIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var modelGroups = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                modelGroups.Add(MapIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups(child, snapshot));
            }

            return modelGroups;
        }

        private global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups? MapIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ModelGroup", global::System.StringComparison.Ordinal))
            {
                return _dataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelGroupEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup Map(global::IndicoV2.StrawberryShake.State.ModelGroupEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.SubmitReviewResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SubmitReviewResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.ISubmitReviewResult);
        public SubmitReviewResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SubmitReviewResultInfo info)
            {
                return new SubmitReviewResult(MapISubmitReview_SubmitAutoReview(info.SubmitAutoReview, snapshot));
            }

            throw new global::System.ArgumentException("SubmitReviewResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.ISubmitReview_SubmitAutoReview? MapISubmitReview_SubmitAutoReview(global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISubmitReview_SubmitAutoReview returnValue = default !;
            if (data?.__typename.Equals("SubmitAutoReview", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SubmitReview_SubmitAutoReview_SubmitAutoReview(data.JobId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SubmitReviewResultInfo(global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? submitAutoReview, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SubmitAutoReview = submitAutoReview;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? SubmitAutoReview
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SubmitReviewResultInfo(SubmitAutoReview, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewForceCompleteResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.SubmitReviewForceCompleteResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public SubmitReviewForceCompleteResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult);
        public SubmitReviewForceCompleteResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is SubmitReviewForceCompleteResultInfo info)
            {
                return new SubmitReviewForceCompleteResult(MapISubmitReviewForceComplete_SubmitAutoReview(info.SubmitAutoReview, snapshot));
            }

            throw new global::System.ArgumentException("SubmitReviewForceCompleteResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.ISubmitReviewForceComplete_SubmitAutoReview? MapISubmitReviewForceComplete_SubmitAutoReview(global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ISubmitReviewForceComplete_SubmitAutoReview returnValue = default !;
            if (data?.__typename.Equals("SubmitAutoReview", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new SubmitReviewForceComplete_SubmitAutoReview_SubmitAutoReview(data.JobId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewForceCompleteResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public SubmitReviewForceCompleteResultInfo(global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? submitAutoReview, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SubmitAutoReview = submitAutoReview;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? SubmitAutoReview
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new SubmitReviewForceCompleteResultInfo(SubmitAutoReview, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviewsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.GetReviewsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, GetReviews_Submission_Submission> _getReviews_Submission_SubmissionFromSubmissionEntityMapper;
        public GetReviewsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, GetReviews_Submission_Submission> getReviews_Submission_SubmissionFromSubmissionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getReviews_Submission_SubmissionFromSubmissionEntityMapper = getReviews_Submission_SubmissionFromSubmissionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getReviews_Submission_SubmissionFromSubmissionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IGetReviewsResult);
        public GetReviewsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetReviewsResultInfo info)
            {
                return new GetReviewsResult(MapIGetReviews_Submission(info.Submission, snapshot));
            }

            throw new global::System.ArgumentException("GetReviewsResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IGetReviews_Submission? MapIGetReviews_Submission(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                return _getReviews_Submission_SubmissionFromSubmissionEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.SubmissionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviewsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetReviewsResultInfo(global::StrawberryShake.EntityId? submission, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Submission = submission;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Submission
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetReviewsResultInfo(Submission, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviews_Submission_SubmissionFromSubmissionEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, GetReviews_Submission_Submission>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetReviews_Submission_Reviews_Review> _getReviews_Submission_Reviews_ReviewFromReviewEntityMapper;
        public GetReviews_Submission_SubmissionFromSubmissionEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetReviews_Submission_Reviews_Review> getReviews_Submission_Reviews_ReviewFromReviewEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getReviews_Submission_Reviews_ReviewFromReviewEntityMapper = getReviews_Submission_Reviews_ReviewFromReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getReviews_Submission_Reviews_ReviewFromReviewEntityMapper));
        }

        public GetReviews_Submission_Submission Map(global::IndicoV2.StrawberryShake.State.SubmissionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetReviews_Submission_Submission(entity.Id, MapIGetReviews_Submission_ReviewsArray(entity.Reviews, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IGetReviews_Submission_Reviews?>? MapIGetReviews_Submission_ReviewsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var reviews = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IGetReviews_Submission_Reviews?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                reviews.Add(MapIGetReviews_Submission_Reviews(child, snapshot));
            }

            return reviews;
        }

        private global::IndicoV2.StrawberryShake.IGetReviews_Submission_Reviews? MapIGetReviews_Submission_Reviews(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                return _getReviews_Submission_Reviews_ReviewFromReviewEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviews_Submission_Reviews_ReviewFromReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, GetReviews_Submission_Reviews_Review>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetReviews_Submission_Reviews_ReviewFromReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetReviews_Submission_Reviews_Review Map(global::IndicoV2.StrawberryShake.State.ReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetReviews_Submission_Reviews_Review(entity.Id, entity.SubmissionId, entity.CreatedAt, entity.CreatedBy, entity.StartedAt, entity.CompletedAt, entity.Rejected, entity.ReviewType, entity.Notes, entity.Changes);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQueryResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ModelGroupQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup> _modelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model> _modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper;
        public ModelGroupQueryResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup> modelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model> modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _modelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper = modelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper ?? throw new global::System.ArgumentNullException(nameof(modelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper));
            _modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper = modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper ?? throw new global::System.ArgumentNullException(nameof(modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IModelGroupQueryResult);
        public ModelGroupQueryResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ModelGroupQueryResultInfo info)
            {
                return new ModelGroupQueryResult(MapIModelGroupQuery_ModelGroups(info.ModelGroups, snapshot));
            }

            throw new global::System.ArgumentException("ModelGroupQueryResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups? MapIModelGroupQuery_ModelGroups(global::IndicoV2.StrawberryShake.State.ModelGroupPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IModelGroupQuery_ModelGroups returnValue = default !;
            if (data?.__typename.Equals("ModelGroupPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ModelGroupQuery_ModelGroups_ModelGroupPage(MapIModelGroupQuery_ModelGroups_ModelGroupsArray(data.ModelGroups, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups?>? MapIModelGroupQuery_ModelGroups_ModelGroupsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var modelGroups = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                modelGroups.Add(MapIModelGroupQuery_ModelGroups_ModelGroups(child, snapshot));
            }

            return modelGroups;
        }

        private global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups? MapIModelGroupQuery_ModelGroups_ModelGroups(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ModelGroup", global::System.StringComparison.Ordinal))
            {
                return _modelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelGroupEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel? MapIModelGroupQuery_ModelGroups_ModelGroups_SelectedModel(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Model", global::System.StringComparison.Ordinal))
            {
                return _modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQueryResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ModelGroupQueryResultInfo(global::IndicoV2.StrawberryShake.State.ModelGroupPageData? modelGroups, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ModelGroups = modelGroups;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.ModelGroupPageData? ModelGroups
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ModelGroupQueryResultInfo(ModelGroups, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model> _modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper;
        public ModelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model> modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper = modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper ?? throw new global::System.ArgumentNullException(nameof(modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper));
        }

        public ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup Map(global::IndicoV2.StrawberryShake.State.ModelGroupEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup(entity.Id, entity.Name, entity.Status, MapIModelGroupQuery_ModelGroups_ModelGroups_SelectedModel(entity.SelectedModel, snapshot));
        }

        private global::IndicoV2.StrawberryShake.IModelGroupQuery_ModelGroups_ModelGroups_SelectedModel? MapIModelGroupQuery_ModelGroups_ModelGroups_SelectedModel(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Model", global::System.StringComparison.Ordinal))
            {
                return _modelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model Map(global::IndicoV2.StrawberryShake.State.ModelEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model(entity.Id, entity.Status);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoadResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ModelLoadResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ModelLoadResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IModelLoadResult);
        public ModelLoadResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ModelLoadResultInfo info)
            {
                return new ModelLoadResult(MapIModelLoad_ModelLoad(info.ModelLoad, snapshot));
            }

            throw new global::System.ArgumentException("ModelLoadResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IModelLoad_ModelLoad? MapIModelLoad_ModelLoad(global::IndicoV2.StrawberryShake.State.ModelLoadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IModelLoad_ModelLoad returnValue = default !;
            if (data?.__typename.Equals("ModelLoad", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ModelLoad_ModelLoad_ModelLoad(data.Status);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoadResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ModelLoadResultInfo(global::IndicoV2.StrawberryShake.State.ModelLoadData? modelLoad, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ModelLoad = modelLoad;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.ModelLoadData? ModelLoad
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ModelLoadResultInfo(ModelLoad, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PredictModelResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.PredictModelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PredictModelResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IPredictModelResult);
        public PredictModelResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PredictModelResultInfo info)
            {
                return new PredictModelResult(MapIPredictModel_ModelPredict(info.ModelPredict, snapshot));
            }

            throw new global::System.ArgumentException("PredictModelResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IPredictModel_ModelPredict? MapIPredictModel_ModelPredict(global::IndicoV2.StrawberryShake.State.ModelPredictData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IPredictModel_ModelPredict returnValue = default !;
            if (data?.__typename.Equals("ModelPredict", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new PredictModel_ModelPredict_ModelPredict(data.JobId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PredictModelResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PredictModelResultInfo(global::IndicoV2.StrawberryShake.State.ModelPredictData? modelPredict, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ModelPredict = modelPredict;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.ModelPredictData? ModelPredict
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PredictModelResultInfo(ModelPredict, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQueryResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ModelGroupProgressQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup> _modelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model> _modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper;
        public ModelGroupProgressQueryResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup> modelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model> modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _modelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper = modelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper ?? throw new global::System.ArgumentNullException(nameof(modelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper));
            _modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper = modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper ?? throw new global::System.ArgumentNullException(nameof(modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult);
        public ModelGroupProgressQueryResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ModelGroupProgressQueryResultInfo info)
            {
                return new ModelGroupProgressQueryResult(MapIModelGroupProgressQuery_ModelGroups(info.ModelGroups, snapshot));
            }

            throw new global::System.ArgumentException("ModelGroupProgressQueryResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups? MapIModelGroupProgressQuery_ModelGroups(global::IndicoV2.StrawberryShake.State.ModelGroupPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IModelGroupProgressQuery_ModelGroups returnValue = default !;
            if (data?.__typename.Equals("ModelGroupPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ModelGroupProgressQuery_ModelGroups_ModelGroupPage(MapIModelGroupProgressQuery_ModelGroups_ModelGroupsArray(data.ModelGroups, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups?>? MapIModelGroupProgressQuery_ModelGroups_ModelGroupsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var modelGroups = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                modelGroups.Add(MapIModelGroupProgressQuery_ModelGroups_ModelGroups(child, snapshot));
            }

            return modelGroups;
        }

        private global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups? MapIModelGroupProgressQuery_ModelGroups_ModelGroups(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ModelGroup", global::System.StringComparison.Ordinal))
            {
                return _modelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelGroupEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models?>? MapIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var models = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                models.Add(MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models(child, snapshot));
            }

            return models;
        }

        private global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models? MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Model", global::System.StringComparison.Ordinal))
            {
                return _modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress? MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress(global::IndicoV2.StrawberryShake.State.TrainingProgressData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress returnValue = default !;
            if (data?.__typename.Equals("TrainingProgress", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress(data.PercentComplete);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQueryResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ModelGroupProgressQueryResultInfo(global::IndicoV2.StrawberryShake.State.ModelGroupPageData? modelGroups, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ModelGroups = modelGroups;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.ModelGroupPageData? ModelGroups
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ModelGroupProgressQueryResultInfo(ModelGroups, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model> _modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper;
        public ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model> modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper = modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper ?? throw new global::System.ArgumentNullException(nameof(modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper));
        }

        public ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup Map(global::IndicoV2.StrawberryShake.State.ModelGroupEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup(MapIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsArray(entity.Models, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models?>? MapIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var models = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                models.Add(MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models(child, snapshot));
            }

            return models;
        }

        private global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models? MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Model", global::System.StringComparison.Ordinal))
            {
                return _modelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.ModelEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress? MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress(global::IndicoV2.StrawberryShake.State.TrainingProgressData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress returnValue = default !;
            if (data?.__typename.Equals("TrainingProgress", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress(data.PercentComplete);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model Map(global::IndicoV2.StrawberryShake.State.ModelEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model(entity.Id, entity.Status, MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress(entity.TrainingProgress, snapshot));
        }

        private global::IndicoV2.StrawberryShake.IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress? MapIModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress(global::IndicoV2.StrawberryShake.State.TrainingProgressData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress returnValue = default !;
            if (data?.__typename.Equals("TrainingProgress", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress_TrainingProgress(data.PercentComplete);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummaryResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.UserSummaryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UserSummaryResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IUserSummaryResult);
        public UserSummaryResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UserSummaryResultInfo info)
            {
                return new UserSummaryResult(MapIUserSummary_UserSummary(info.UserSummary, snapshot));
            }

            throw new global::System.ArgumentException("UserSummaryResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IUserSummary_UserSummary? MapIUserSummary_UserSummary(global::IndicoV2.StrawberryShake.State.UserSummaryData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSummary_UserSummary returnValue = default !;
            if (data?.__typename.Equals("UserSummary", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSummary_UserSummary_UserSummary(MapIUserSummary_UserSummary_Users(data.Users, snapshot), MapIUserSummary_UserSummary_AppRolesArray(data.AppRoles, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_Users? MapIUserSummary_UserSummary_Users(global::IndicoV2.StrawberryShake.State.EnabledCountData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSummary_UserSummary_Users returnValue = default !;
            if (data?.__typename.Equals("EnabledCount", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSummary_UserSummary_Users_EnabledCount(data.Enabled, data.Disabled);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_AppRoles?>? MapIUserSummary_UserSummary_AppRolesArray(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.AppRoleCountData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var appRoleCounts = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_AppRoles?>();
            foreach (global::IndicoV2.StrawberryShake.State.AppRoleCountData? child in list)
            {
                appRoleCounts.Add(MapIUserSummary_UserSummary_AppRoles(child, snapshot));
            }

            return appRoleCounts;
        }

        private global::IndicoV2.StrawberryShake.IUserSummary_UserSummary_AppRoles? MapIUserSummary_UserSummary_AppRoles(global::IndicoV2.StrawberryShake.State.AppRoleCountData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSummary_UserSummary_AppRoles returnValue = default !;
            if (data?.__typename.Equals("AppRoleCount", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSummary_UserSummary_AppRoles_AppRoleCount(data.Role, data.Count);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummaryResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UserSummaryResultInfo(global::IndicoV2.StrawberryShake.State.UserSummaryData? userSummary, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserSummary = userSummary;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.UserSummaryData? UserSummary
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UserSummaryResultInfo(UserSummary, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.UserSnapshotResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserSnapshotEntity, UserSnapshot_UserSnapshot_Results_UserSnapshot> _userSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper;
        public UserSnapshotResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserSnapshotEntity, UserSnapshot_UserSnapshot_Results_UserSnapshot> userSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _userSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper = userSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper ?? throw new global::System.ArgumentNullException(nameof(userSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IUserSnapshotResult);
        public UserSnapshotResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UserSnapshotResultInfo info)
            {
                return new UserSnapshotResult(MapIUserSnapshot_UserSnapshot(info.UserSnapshot, snapshot));
            }

            throw new global::System.ArgumentException("UserSnapshotResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot? MapIUserSnapshot_UserSnapshot(global::IndicoV2.StrawberryShake.State.UserSnapshotPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSnapshot_UserSnapshot returnValue = default !;
            if (data?.__typename.Equals("UserSnapshotPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSnapshot_UserSnapshot_UserSnapshotPage(MapIUserSnapshot_UserSnapshot_ResultsArray(data.Results, snapshot), MapIUserSnapshot_UserSnapshot_PageInfo(data.PageInfo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results?>? MapIUserSnapshot_UserSnapshot_ResultsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var userSnapshots = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                userSnapshots.Add(MapIUserSnapshot_UserSnapshot_Results(child, snapshot));
            }

            return userSnapshots;
        }

        private global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results? MapIUserSnapshot_UserSnapshot_Results(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("UserSnapshot", global::System.StringComparison.Ordinal))
            {
                return _userSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.UserSnapshotEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets?>? MapIUserSnapshot_UserSnapshot_Results_DatasetsArray(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var datasetRoles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets?>();
            foreach (global::IndicoV2.StrawberryShake.State.DatasetRoleData? child in list)
            {
                datasetRoles.Add(MapIUserSnapshot_UserSnapshot_Results_Datasets(child, snapshot));
            }

            return datasetRoles;
        }

        private global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets? MapIUserSnapshot_UserSnapshot_Results_Datasets(global::IndicoV2.StrawberryShake.State.DatasetRoleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSnapshot_UserSnapshot_Results_Datasets returnValue = default !;
            if (data?.__typename.Equals("DatasetRole", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSnapshot_UserSnapshot_Results_Datasets_DatasetRole(data.DatasetId, data.Role);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_PageInfo? MapIUserSnapshot_UserSnapshot_PageInfo(global::IndicoV2.StrawberryShake.State.PageInfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSnapshot_UserSnapshot_PageInfo returnValue = default !;
            if (data?.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSnapshot_UserSnapshot_PageInfo_PageInfo(data.AggregateCount);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UserSnapshotResultInfo(global::IndicoV2.StrawberryShake.State.UserSnapshotPageData? userSnapshot, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserSnapshot = userSnapshot;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.UserSnapshotPageData? UserSnapshot
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UserSnapshotResultInfo(UserSnapshot, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserSnapshotEntity, UserSnapshot_UserSnapshot_Results_UserSnapshot>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UserSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UserSnapshot_UserSnapshot_Results_UserSnapshot Map(global::IndicoV2.StrawberryShake.State.UserSnapshotEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UserSnapshot_UserSnapshot_Results_UserSnapshot(entity.Id, entity.Name, entity.CreatedAt, entity.Enabled, entity.Roles, MapIUserSnapshot_UserSnapshot_Results_DatasetsArray(entity.Datasets, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets?>? MapIUserSnapshot_UserSnapshot_Results_DatasetsArray(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var datasetRoles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets?>();
            foreach (global::IndicoV2.StrawberryShake.State.DatasetRoleData? child in list)
            {
                datasetRoles.Add(MapIUserSnapshot_UserSnapshot_Results_Datasets(child, snapshot));
            }

            return datasetRoles;
        }

        private global::IndicoV2.StrawberryShake.IUserSnapshot_UserSnapshot_Results_Datasets? MapIUserSnapshot_UserSnapshot_Results_Datasets(global::IndicoV2.StrawberryShake.State.DatasetRoleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSnapshot_UserSnapshot_Results_Datasets returnValue = default !;
            if (data?.__typename.Equals("DatasetRole", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSnapshot_UserSnapshot_Results_Datasets_DatasetRole(data.DatasetId, data.Role);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.UserChangelogResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserChangelogEntity, UserChangelog_UserChangelog_Results_UserChangelog> _userChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper;
        public UserChangelogResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserChangelogEntity, UserChangelog_UserChangelog_Results_UserChangelog> userChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _userChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper = userChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper ?? throw new global::System.ArgumentNullException(nameof(userChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IUserChangelogResult);
        public UserChangelogResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UserChangelogResultInfo info)
            {
                return new UserChangelogResult(MapIUserChangelog_UserChangelog(info.UserChangelog, snapshot));
            }

            throw new global::System.ArgumentException("UserChangelogResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog? MapIUserChangelog_UserChangelog(global::IndicoV2.StrawberryShake.State.UserChangelogPageData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserChangelog_UserChangelog returnValue = default !;
            if (data?.__typename.Equals("UserChangelogPage", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserChangelog_UserChangelog_UserChangelogPage(MapIUserChangelog_UserChangelog_ResultsArray(data.Results, snapshot), MapIUserChangelog_UserChangelog_PageInfo(data.PageInfo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results?>? MapIUserChangelog_UserChangelog_ResultsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var userChangelogs = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                userChangelogs.Add(MapIUserChangelog_UserChangelog_Results(child, snapshot));
            }

            return userChangelogs;
        }

        private global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results? MapIUserChangelog_UserChangelog_Results(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("UserChangelog", global::System.StringComparison.Ordinal))
            {
                return _userChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper.Map(snapshot.GetEntity<global::IndicoV2.StrawberryShake.State.UserChangelogEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets?>? MapIUserChangelog_UserChangelog_Results_PreviousDatasetsArray(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var datasetRoles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets?>();
            foreach (global::IndicoV2.StrawberryShake.State.DatasetRoleData? child in list)
            {
                datasetRoles.Add(MapIUserChangelog_UserChangelog_Results_PreviousDatasets(child, snapshot));
            }

            return datasetRoles;
        }

        private global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets? MapIUserChangelog_UserChangelog_Results_PreviousDatasets(global::IndicoV2.StrawberryShake.State.DatasetRoleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserChangelog_UserChangelog_Results_PreviousDatasets returnValue = default !;
            if (data?.__typename.Equals("DatasetRole", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole(data.DatasetId, data.Role);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_PageInfo? MapIUserChangelog_UserChangelog_PageInfo(global::IndicoV2.StrawberryShake.State.PageInfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserChangelog_UserChangelog_PageInfo returnValue = default !;
            if (data?.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserChangelog_UserChangelog_PageInfo_PageInfo(data.AggregateCount);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UserChangelogResultInfo(global::IndicoV2.StrawberryShake.State.UserChangelogPageData? userChangelog, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserChangelog = userChangelog;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.UserChangelogPageData? UserChangelog
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UserChangelogResultInfo(UserChangelog, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper : global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserChangelogEntity, UserChangelog_UserChangelog_Results_UserChangelog>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UserChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UserChangelog_UserChangelog_Results_UserChangelog Map(global::IndicoV2.StrawberryShake.State.UserChangelogEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UserChangelog_UserChangelog_Results_UserChangelog(entity.Id, entity.Date, entity.UserEmail, entity.UpdaterEmail, MapIUserChangelog_UserChangelog_Results_PreviousDatasetsArray(entity.PreviousDatasets, snapshot), entity.ChangesMade);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets?>? MapIUserChangelog_UserChangelog_Results_PreviousDatasetsArray(global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var datasetRoles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets?>();
            foreach (global::IndicoV2.StrawberryShake.State.DatasetRoleData? child in list)
            {
                datasetRoles.Add(MapIUserChangelog_UserChangelog_Results_PreviousDatasets(child, snapshot));
            }

            return datasetRoles;
        }

        private global::IndicoV2.StrawberryShake.IUserChangelog_UserChangelog_Results_PreviousDatasets? MapIUserChangelog_UserChangelog_Results_PreviousDatasets(global::IndicoV2.StrawberryShake.State.DatasetRoleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserChangelog_UserChangelog_Results_PreviousDatasets returnValue = default !;
            if (data?.__typename.Equals("DatasetRole", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserChangelog_UserChangelog_Results_PreviousDatasets_DatasetRole(data.DatasetId, data.Role);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotReportResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.UserSnapshotReportResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UserSnapshotReportResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IUserSnapshotReportResult);
        public UserSnapshotReportResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UserSnapshotReportResultInfo info)
            {
                return new UserSnapshotReportResult(MapIUserSnapshotReport_UserSnapshotReport(info.UserSnapshotReport, snapshot));
            }

            throw new global::System.ArgumentException("UserSnapshotReportResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IUserSnapshotReport_UserSnapshotReport? MapIUserSnapshotReport_UserSnapshotReport(global::IndicoV2.StrawberryShake.State.GenerateUserSnapshotReportData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserSnapshotReport_UserSnapshotReport returnValue = default !;
            if (data?.__typename.Equals("GenerateUserSnapshotReport", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserSnapshotReport_UserSnapshotReport_GenerateUserSnapshotReport(data.JobId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotReportResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UserSnapshotReportResultInfo(global::IndicoV2.StrawberryShake.State.GenerateUserSnapshotReportData? userSnapshotReport, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserSnapshotReport = userSnapshotReport;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.GenerateUserSnapshotReportData? UserSnapshotReport
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UserSnapshotReportResultInfo(UserSnapshotReport, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogReportResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.UserChangelogReportResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UserChangelogReportResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::IndicoV2.StrawberryShake.IUserChangelogReportResult);
        public UserChangelogReportResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UserChangelogReportResultInfo info)
            {
                return new UserChangelogReportResult(MapIUserChangelogReport_UserChangelogReport(info.UserChangelogReport, snapshot));
            }

            throw new global::System.ArgumentException("UserChangelogReportResultInfo expected.");
        }

        private global::IndicoV2.StrawberryShake.IUserChangelogReport_UserChangelogReport? MapIUserChangelogReport_UserChangelogReport(global::IndicoV2.StrawberryShake.State.GenerateUserChangelogReportData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUserChangelogReport_UserChangelogReport returnValue = default !;
            if (data?.__typename.Equals("GenerateUserChangelogReport", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UserChangelogReport_UserChangelogReport_GenerateUserChangelogReport(data.JobId);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogReportResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UserChangelogReportResultInfo(global::IndicoV2.StrawberryShake.State.GenerateUserChangelogReportData? userChangelogReport, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UserChangelogReport = userChangelogReport;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::IndicoV2.StrawberryShake.State.GenerateUserChangelogReportData? UserChangelogReport
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UserChangelogReportResultInfo(UserChangelogReport, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    internal interface IFileInputInfo
    {
        global::System.Boolean IsFilemetaSet
        {
            get;
        }

        global::System.Boolean IsFilenameSet
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    internal interface ISubmissionFilterInfo
    {
        global::System.Boolean IsANDSet
        {
            get;
        }

        global::System.Boolean IsORSet
        {
            get;
        }

        global::System.Boolean IsAndsSet
        {
            get;
        }

        global::System.Boolean IsCreatedAtSet
        {
            get;
        }

        global::System.Boolean IsFilesDeletedSet
        {
            get;
        }

        global::System.Boolean IsFiletypeSet
        {
            get;
        }

        global::System.Boolean IsInputFilenameSet
        {
            get;
        }

        global::System.Boolean IsOrsSet
        {
            get;
        }

        global::System.Boolean IsRetrievedSet
        {
            get;
        }

        global::System.Boolean IsReviewInProgressSet
        {
            get;
        }

        global::System.Boolean IsReviewsSet
        {
            get;
        }

        global::System.Boolean IsStatusSet
        {
            get;
        }

        global::System.Boolean IsUpdatedAtSet
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    internal interface IDateRangeFilterInfo
    {
        global::System.Boolean IsFromSet
        {
            get;
        }

        global::System.Boolean IsToSet
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    internal interface IReviewFilterInfo
    {
        global::System.Boolean IsANDSet
        {
            get;
        }

        global::System.Boolean IsORSet
        {
            get;
        }

        global::System.Boolean IsAndsSet
        {
            get;
        }

        global::System.Boolean IsCreatedBySet
        {
            get;
        }

        global::System.Boolean IsOrsSet
        {
            get;
        }

        global::System.Boolean IsRejectedSet
        {
            get;
        }

        global::System.Boolean IsReviewTypeSet
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    internal interface IUserReportFilterInfo
    {
        global::System.Boolean IsANDSet
        {
            get;
        }

        global::System.Boolean IsORSet
        {
            get;
        }

        global::System.Boolean IsAndsSet
        {
            get;
        }

        global::System.Boolean IsOrsSet
        {
            get;
        }

        global::System.Boolean IsUserEmailSet
        {
            get;
        }

        global::System.Boolean IsUserIdSet
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtractionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDocumentExtractionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDocumentExtractionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DocumentExtractionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDocumentExtractionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDocumentExtractionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDocumentExtractionResult Result, DocumentExtractionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDocumentExtractionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDocumentExtractionResult, DocumentExtractionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DocumentExtractionResultInfo(DeserializeIDocumentExtraction_DocumentExtraction(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "documentExtraction")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.DocumentExtractionData? DeserializeIDocumentExtraction_DocumentExtraction(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DocumentExtraction", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.DocumentExtractionData(typename, jobIds: DeserializeStringArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobIds")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? DeserializeStringArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeString(child));
            }

            return @strings;
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowGetStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.WorkflowStatus> _workflowStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public WorkflowGetStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _workflowStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.WorkflowStatus>("WorkflowStatus") ?? throw new global::System.ArgumentException("No serializer for type `WorkflowStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IWorkflowGetStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IWorkflowGetStatusResult Result, WorkflowGetStatusResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IWorkflowGetStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IWorkflowGetStatusResult, WorkflowGetStatusResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.WorkflowPageData? workflowsId = default !;
            _entityStore.Update(session =>
            {
                workflowsId = DeserializeIWorkflowGetStatus_Workflows(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflows"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new WorkflowGetStatusResultInfo(workflowsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.WorkflowPageData? DeserializeIWorkflowGetStatus_Workflows(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("WorkflowPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.WorkflowPageData(typename, workflows: UpdateIWorkflowGetStatus_Workflows_WorkflowsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflows"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIWorkflowGetStatus_Workflows_WorkflowsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var workflows = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                workflows.Add(UpdateIWorkflowGetStatus_Workflows_WorkflowsEntity(session, child, entityIds));
            }

            return workflows;
        }

        private global::StrawberryShake.EntityId? UpdateIWorkflowGetStatus_Workflows_WorkflowsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.WorkflowEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.WorkflowEntity(DeserializeWorkflowStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), entity.Id, entity.Name, entity.ReviewEnabled));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.WorkflowEntity(DeserializeWorkflowStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.WorkflowStatus? DeserializeWorkflowStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _workflowStatusParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowAddDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowAddDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowAddDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.WorkflowStatus> _workflowStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public WorkflowAddDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowAddDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _workflowStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.WorkflowStatus>("WorkflowStatus") ?? throw new global::System.ArgumentException("No serializer for type `WorkflowStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IWorkflowAddDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IWorkflowAddDataResult Result, WorkflowAddDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IWorkflowAddDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IWorkflowAddDataResult, WorkflowAddDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.AddDataToWorkflowData? addDataToWorkflowId = default !;
            _entityStore.Update(session =>
            {
                addDataToWorkflowId = DeserializeIWorkflowAddData_AddDataToWorkflow(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addDataToWorkflow"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new WorkflowAddDataResultInfo(addDataToWorkflowId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.AddDataToWorkflowData? DeserializeIWorkflowAddData_AddDataToWorkflow(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddDataToWorkflow", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.AddDataToWorkflowData(typename, workflow: UpdateIWorkflowAddData_AddDataToWorkflow_WorkflowEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflow"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIWorkflowAddData_AddDataToWorkflow_WorkflowEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.WorkflowEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.WorkflowEntity(DeserializeWorkflowStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.ReviewEnabled));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.WorkflowEntity(DeserializeWorkflowStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.WorkflowStatus? DeserializeWorkflowStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _workflowStatusParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListWorkflowsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListWorkflowsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListWorkflowsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public ListWorkflowsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListWorkflowsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IListWorkflowsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IListWorkflowsResult Result, ListWorkflowsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IListWorkflowsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IListWorkflowsResult, ListWorkflowsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.WorkflowPageData? workflowsId = default !;
            _entityStore.Update(session =>
            {
                workflowsId = DeserializeIListWorkflows_Workflows(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflows"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ListWorkflowsResultInfo(workflowsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.WorkflowPageData? DeserializeIListWorkflows_Workflows(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("WorkflowPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.WorkflowPageData(typename, workflows: UpdateIListWorkflows_Workflows_WorkflowsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflows"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIListWorkflows_Workflows_WorkflowsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var workflows = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                workflows.Add(UpdateIListWorkflows_Workflows_WorkflowsEntity(session, child, entityIds));
            }

            return workflows;
        }

        private global::StrawberryShake.EntityId? UpdateIListWorkflows_Workflows_WorkflowsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.WorkflowEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.WorkflowEntity(entity.Status, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewEnabled"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.WorkflowEntity(default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewEnabled"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowSubmissionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionResultVersion> _submissionResultVersionParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public WorkflowSubmissionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _submissionResultVersionParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionResultVersion>("SubmissionResultVersion") ?? throw new global::System.ArgumentException("No serializer for type `SubmissionResultVersion` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IWorkflowSubmissionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IWorkflowSubmissionResult Result, WorkflowSubmissionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IWorkflowSubmissionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IWorkflowSubmissionResult, WorkflowSubmissionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new WorkflowSubmissionResultInfo(DeserializeIWorkflowSubmission_WorkflowSubmission(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowSubmission")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.SubmissionResultData? DeserializeIWorkflowSubmission_WorkflowSubmission(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubmissionResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.SubmissionResultData(typename, jobIds: DeserializeStringArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobIds")), submissionIds: DeserializeInt32Array(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionIds")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? DeserializeStringArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeString(child));
            }

            return @strings;
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? DeserializeInt32Array(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @ints = new global::System.Collections.Generic.List<global::System.Int32?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @ints.Add(DeserializeInt32(child));
            }

            return @ints;
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowUrlSubmissionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionResultVersion> _submissionResultVersionParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public WorkflowUrlSubmissionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _submissionResultVersionParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionResultVersion>("SubmissionResultVersion") ?? throw new global::System.ArgumentException("No serializer for type `SubmissionResultVersion` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IWorkflowUrlSubmissionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IWorkflowUrlSubmissionResult Result, WorkflowUrlSubmissionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IWorkflowUrlSubmissionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IWorkflowUrlSubmissionResult, WorkflowUrlSubmissionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new WorkflowUrlSubmissionResultInfo(DeserializeIWorkflowUrlSubmission_WorkflowUrlSubmission(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowUrlSubmission")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.SubmissionResultData? DeserializeIWorkflowUrlSubmission_WorkflowUrlSubmission(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubmissionResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.SubmissionResultData(typename, jobIds: DeserializeStringArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobIds")), submissionIds: DeserializeInt32Array(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionIds")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? DeserializeStringArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeString(child));
            }

            return @strings;
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? DeserializeInt32Array(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @ints = new global::System.Collections.Generic.List<global::System.Int32?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @ints.Add(DeserializeInt32(child));
            }

            return @ints;
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ListSubmissionsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListSubmissionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListSubmissionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileType> _fileTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ReviewType> _reviewTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionStatus> _submissionStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM> _sUBMISSION_COLUMN_ENUMParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _inputDateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public ListSubmissionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListSubmissionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _fileTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileType>("FileType") ?? throw new global::System.ArgumentException("No serializer for type `FileType` found.");
            _reviewTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ReviewType>("ReviewType") ?? throw new global::System.ArgumentException("No serializer for type `ReviewType` found.");
            _submissionStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionStatus>("SubmissionStatus") ?? throw new global::System.ArgumentException("No serializer for type `SubmissionStatus` found.");
            _sUBMISSION_COLUMN_ENUMParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUM>("SUBMISSION_COLUMN_ENUM") ?? throw new global::System.ArgumentException("No serializer for type `SUBMISSION_COLUMN_ENUM` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _inputDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("InputDate") ?? throw new global::System.ArgumentException("No serializer for type `InputDate` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IListSubmissionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IListSubmissionsResult Result, ListSubmissionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IListSubmissionsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IListSubmissionsResult, ListSubmissionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.SubmissionPageData? submissionsId = default !;
            _entityStore.Update(session =>
            {
                submissionsId = DeserializeIListSubmissions_Submissions(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissions"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ListSubmissionsResultInfo(submissionsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.SubmissionPageData? DeserializeIListSubmissions_Submissions(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubmissionPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.SubmissionPageData(typename, submissions: UpdateIListSubmissions_Submissions_SubmissionsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissions"), entityIds), pageInfo: DeserializeIListSubmissions_Submissions_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIListSubmissions_Submissions_SubmissionsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var submissions = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                submissions.Add(UpdateIListSubmissions_Submissions_SubmissionsEntity(session, child, entityIds));
            }

            return submissions;
        }

        private global::StrawberryShake.EntityId? UpdateIListSubmissions_Submissions_SubmissionsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowId")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedBy")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filesDeleted")), UpdateIListSubmissions_Submissions_Submissions_InputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFiles"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFile")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFilename")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resultFile")), UpdateIListSubmissions_Submissions_Submissions_OutputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "outputFiles"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retrieved")), UpdateIListSubmissions_Submissions_Submissions_AutoReviewEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "autoReview"), entityIds), UpdateIListSubmissions_Submissions_Submissions_RetriesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retries"), entityIds), UpdateIListSubmissions_Submissions_Submissions_ReviewsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviews"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewInProgress"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowId")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedBy")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filesDeleted")), UpdateIListSubmissions_Submissions_Submissions_InputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFiles"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFile")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFilename")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resultFile")), UpdateIListSubmissions_Submissions_Submissions_OutputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "outputFiles"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retrieved")), UpdateIListSubmissions_Submissions_Submissions_AutoReviewEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "autoReview"), entityIds), UpdateIListSubmissions_Submissions_Submissions_RetriesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retries"), entityIds), UpdateIListSubmissions_Submissions_Submissions_ReviewsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviews"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewInProgress"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::IndicoV2.StrawberryShake.SubmissionStatus? DeserializeSubmissionStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _submissionStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIListSubmissions_Submissions_Submissions_InputFilesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var submissionFiles = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                submissionFiles.Add(UpdateIListSubmissions_Submissions_Submissions_InputFilesEntity(session, child, entityIds));
            }

            return submissionFiles;
        }

        private global::StrawberryShake.EntityId? UpdateIListSubmissions_Submissions_Submissions_InputFilesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubmissionFile", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionFileEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionFileEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), DeserializeFileType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filetype")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileSize")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numPages"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionFileEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), DeserializeFileType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filetype")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileSize")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numPages"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.FileType? DeserializeFileType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _fileTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIListSubmissions_Submissions_Submissions_OutputFilesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var submissionOutputs = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                submissionOutputs.Add(UpdateIListSubmissions_Submissions_Submissions_OutputFilesEntity(session, child, entityIds));
            }

            return submissionOutputs;
        }

        private global::StrawberryShake.EntityId? UpdateIListSubmissions_Submissions_Submissions_OutputFilesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubmissionOutput", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "componentId")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "componentId")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIListSubmissions_Submissions_Submissions_AutoReviewEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), entity.Changes));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.ReviewType? DeserializeReviewType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _reviewTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIListSubmissions_Submissions_Submissions_RetriesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var submissionRetrys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                submissionRetrys.Add(UpdateIListSubmissions_Submissions_Submissions_RetriesEntity(session, child, entityIds));
            }

            return submissionRetrys;
        }

        private global::StrawberryShake.EntityId? UpdateIListSubmissions_Submissions_Submissions_RetriesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubmissionRetry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousErrors")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousStatus")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retryErrors"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousErrors")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousStatus")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retryErrors"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIListSubmissions_Submissions_Submissions_ReviewsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var reviews = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                reviews.Add(UpdateIListSubmissions_Submissions_Submissions_ReviewsEntity(session, child, entityIds));
            }

            return reviews;
        }

        private global::StrawberryShake.EntityId? UpdateIListSubmissions_Submissions_Submissions_ReviewsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), entity.Changes));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.State.PageInfoData? DeserializeIListSubmissions_Submissions_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.PageInfoData(typename, startCursor: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), aggregateCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "aggregateCount")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UpdateSubmissionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUpdateSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUpdateSubmissionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionStatus> _submissionStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateSubmissionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUpdateSubmissionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _submissionStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionStatus>("SubmissionStatus") ?? throw new global::System.ArgumentException("No serializer for type `SubmissionStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateSubmissionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateSubmissionResult Result, UpdateSubmissionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUpdateSubmissionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateSubmissionResult, UpdateSubmissionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? updateSubmissionId = default !;
            _entityStore.Update(session =>
            {
                updateSubmissionId = UpdateIUpdateSubmission_UpdateSubmissionEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateSubmission"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateSubmissionResultInfo(updateSubmissionId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIUpdateSubmission_UpdateSubmissionEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowId")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), entity.CreatedAt, entity.UpdatedAt, entity.CreatedBy, entity.UpdatedBy, entity.CompletedAt, entity.Errors, entity.FilesDeleted, entity.InputFiles, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFile")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFilename")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resultFile")), entity.OutputFiles, DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retrieved")), entity.AutoReview, entity.Retries, entity.Reviews, entity.ReviewInProgress));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowId")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), default !, default !, default !, default !, default !, default !, default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFile")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFilename")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resultFile")), default !, DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retrieved")), default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::IndicoV2.StrawberryShake.SubmissionStatus? DeserializeSubmissionStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _submissionStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetSubmissionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetSubmissionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetSubmissionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionStatus> _submissionStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileType> _fileTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ReviewType> _reviewTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetSubmissionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetSubmissionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _submissionStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.SubmissionStatus>("SubmissionStatus") ?? throw new global::System.ArgumentException("No serializer for type `SubmissionStatus` found.");
            _fileTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileType>("FileType") ?? throw new global::System.ArgumentException("No serializer for type `FileType` found.");
            _reviewTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ReviewType>("ReviewType") ?? throw new global::System.ArgumentException("No serializer for type `ReviewType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetSubmissionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetSubmissionResult Result, GetSubmissionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetSubmissionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetSubmissionResult, GetSubmissionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? submissionId = default !;
            _entityStore.Update(session =>
            {
                submissionId = UpdateIGetSubmission_SubmissionEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submission"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetSubmissionResultInfo(submissionId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetSubmission_SubmissionEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowId")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedBy")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filesDeleted")), UpdateIGetSubmission_Submission_InputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFiles"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFile")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFilename")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resultFile")), UpdateIGetSubmission_Submission_OutputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "outputFiles"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retrieved")), UpdateIGetSubmission_Submission_AutoReviewEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "autoReview"), entityIds), UpdateIGetSubmission_Submission_RetriesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retries"), entityIds), UpdateIGetSubmission_Submission_ReviewsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviews"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewInProgress"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workflowId")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedBy")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filesDeleted")), UpdateIGetSubmission_Submission_InputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFiles"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFile")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "inputFilename")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resultFile")), UpdateIGetSubmission_Submission_OutputFilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "outputFiles"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retrieved")), UpdateIGetSubmission_Submission_AutoReviewEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "autoReview"), entityIds), UpdateIGetSubmission_Submission_RetriesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retries"), entityIds), UpdateIGetSubmission_Submission_ReviewsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviews"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewInProgress"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::IndicoV2.StrawberryShake.SubmissionStatus? DeserializeSubmissionStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _submissionStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetSubmission_Submission_InputFilesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var submissionFiles = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                submissionFiles.Add(UpdateIGetSubmission_Submission_InputFilesEntity(session, child, entityIds));
            }

            return submissionFiles;
        }

        private global::StrawberryShake.EntityId? UpdateIGetSubmission_Submission_InputFilesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubmissionFile", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionFileEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionFileEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), DeserializeFileType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filetype")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileSize")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numPages"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionFileEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")), DeserializeFileType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filetype")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileSize")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numPages"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.FileType? DeserializeFileType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _fileTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetSubmission_Submission_OutputFilesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var submissionOutputs = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                submissionOutputs.Add(UpdateIGetSubmission_Submission_OutputFilesEntity(session, child, entityIds));
            }

            return submissionOutputs;
        }

        private global::StrawberryShake.EntityId? UpdateIGetSubmission_Submission_OutputFilesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubmissionOutput", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "componentId")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filepath")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "componentId")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetSubmission_Submission_AutoReviewEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), entity.Changes));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.ReviewType? DeserializeReviewType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _reviewTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetSubmission_Submission_RetriesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var submissionRetrys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                submissionRetrys.Add(UpdateIGetSubmission_Submission_RetriesEntity(session, child, entityIds));
            }

            return submissionRetrys;
        }

        private global::StrawberryShake.EntityId? UpdateIGetSubmission_Submission_RetriesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubmissionRetry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousErrors")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousStatus")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retryErrors"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousErrors")), DeserializeSubmissionStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousStatus")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "retryErrors"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetSubmission_Submission_ReviewsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var reviews = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                reviews.Add(UpdateIGetSubmission_Submission_ReviewsEntity(session, child, entityIds));
            }

            return reviews;
        }

        private global::StrawberryShake.EntityId? UpdateIGetSubmission_Submission_ReviewsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), entity.Changes));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CreateSubmissionResultsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CreateSubmissionResultsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateSubmissionResultsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateSubmissionResultsResult Result, CreateSubmissionResultsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateSubmissionResultsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateSubmissionResultsResult, CreateSubmissionResultsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateSubmissionResultsResultInfo(DeserializeICreateSubmissionResults_SubmissionResults(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionResults")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.SubmissionResultsData? DeserializeICreateSubmissionResults_SubmissionResults(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubmissionResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.SubmissionResultsData(typename, jobId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class JobStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IJobStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IJobStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.JobStatus> _jobStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        public JobStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IJobStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _jobStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.JobStatus>("JobStatus") ?? throw new global::System.ArgumentException("No serializer for type `JobStatus` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
        }

        public global::StrawberryShake.IOperationResult<IJobStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IJobStatusResult Result, JobStatus_1ResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IJobStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IJobStatusResult, JobStatus_1ResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? jobId = default !;
            _entityStore.Update(session =>
            {
                jobId = UpdateIJobStatus_JobEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "job"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new JobStatus_1ResultInfo(jobId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIJobStatus_JobEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Job", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.JobEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.JobEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ready")), DeserializeJobStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "result"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.JobEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ready")), DeserializeJobStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "result"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::IndicoV2.StrawberryShake.JobStatus? DeserializeJobStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _jobStatusParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetUploadStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.DatasetStatus> _datasetStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileType> _fileTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileStatus> _fileStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileFailureType> _fileFailureTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        public DatasetUploadStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _datasetStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.DatasetStatus>("DatasetStatus") ?? throw new global::System.ArgumentException("No serializer for type `DatasetStatus` found.");
            _fileTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileType>("FileType") ?? throw new global::System.ArgumentException("No serializer for type `FileType` found.");
            _fileStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileStatus>("FileStatus") ?? throw new global::System.ArgumentException("No serializer for type `FileStatus` found.");
            _fileFailureTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.FileFailureType>("FileFailureType") ?? throw new global::System.ArgumentException("No serializer for type `FileFailureType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
        }

        public global::StrawberryShake.IOperationResult<IDatasetUploadStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDatasetUploadStatusResult Result, DatasetUploadStatusResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDatasetUploadStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDatasetUploadStatusResult, DatasetUploadStatusResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? datasetId = default !;
            _entityStore.Update(session =>
            {
                datasetId = UpdateIDatasetUploadStatus_DatasetEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dataset"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DatasetUploadStatusResultInfo(datasetId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIDatasetUploadStatus_DatasetEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.DatasetEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDatasetStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), UpdateIDatasetUploadStatus_Dataset_FilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "files"), entityIds), entity.Name, entity.RowCount, entity.NumModelGroups, entity.ModelGroups));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDatasetStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), UpdateIDatasetUploadStatus_Dataset_FilesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "files"), entityIds), default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::IndicoV2.StrawberryShake.DatasetStatus? DeserializeDatasetStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _datasetStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIDatasetUploadStatus_Dataset_FilesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var dataFiles = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                dataFiles.Add(UpdateIDatasetUploadStatus_Dataset_FilesEntity(session, child, entityIds));
            }

            return dataFiles;
        }

        private global::StrawberryShake.EntityId? UpdateIDatasetUploadStatus_Dataset_FilesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DataFile", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.DataFileEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DataFileEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileSize")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rainbowUrl")), DeserializeFileType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileHash")), DeserializeFileStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusMeta")), DeserializeFileFailureType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "failureType"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DataFileEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleted")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileSize")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rainbowUrl")), DeserializeFileType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileHash")), DeserializeFileStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusMeta")), DeserializeFileFailureType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "failureType"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::IndicoV2.StrawberryShake.FileType? DeserializeFileType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _fileTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.FileStatus? DeserializeFileStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _fileStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.FileFailureType? DeserializeFileFailureType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _fileFailureTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetAddFilesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetAddFilesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetAddFilesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.DatasetStatus> _datasetStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        public DataSetAddFilesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetAddFilesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _datasetStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.DatasetStatus>("DatasetStatus") ?? throw new global::System.ArgumentException("No serializer for type `DatasetStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
        }

        public global::StrawberryShake.IOperationResult<IDataSetAddFilesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDataSetAddFilesResult Result, DataSetAddFilesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDataSetAddFilesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDataSetAddFilesResult, DataSetAddFilesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? addDatasetFilesId = default !;
            _entityStore.Update(session =>
            {
                addDatasetFilesId = UpdateIDataSetAddFiles_AddDatasetFilesEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addDatasetFiles"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DataSetAddFilesResultInfo(addDatasetFilesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIDataSetAddFiles_AddDatasetFilesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.DatasetEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDatasetStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), entity.Files, entity.Name, entity.RowCount, entity.NumModelGroups, entity.ModelGroups));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDatasetStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::IndicoV2.StrawberryShake.DatasetStatus? DeserializeDatasetStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _datasetStatusParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessFilesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DataSetProcessFilesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDataSetProcessFilesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDataSetProcessFilesResult Result, DataSetProcessFilesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDataSetProcessFilesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDataSetProcessFilesResult, DataSetProcessFilesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? addDataFilesId = default !;
            _entityStore.Update(session =>
            {
                addDataFilesId = UpdateIDataSetProcessFiles_AddDataFilesEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addDataFiles"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DataSetProcessFilesResultInfo(addDataFilesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIDataSetProcessFiles_AddDataFilesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.DatasetEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Status, entity.Files, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.RowCount, entity.NumModelGroups, entity.ModelGroups));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetProcessCsvBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DataSetProcessCsvBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDataSetProcessCsvResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDataSetProcessCsvResult Result, DataSetProcessCsvResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDataSetProcessCsvResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDataSetProcessCsvResult, DataSetProcessCsvResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? addDataCsvId = default !;
            _entityStore.Update(session =>
            {
                addDataCsvId = UpdateIDataSetProcessCsv_AddDataCsvEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addDataCsv"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DataSetProcessCsvResultInfo(addDataCsvId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIDataSetProcessCsv_AddDataCsvEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.DatasetEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Status, entity.Files, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.RowCount, entity.NumModelGroups, entity.ModelGroups));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DataSetGetDatasetsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDataSetGetDatasetsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDataSetGetDatasetsResult Result, DataSetGetDatasetsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDataSetGetDatasetsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDataSetGetDatasetsResult, DataSetGetDatasetsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? datasetsId = default !;
            _entityStore.Update(session =>
            {
                datasetsId = UpdateIDataSetGetDatasets_DatasetsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasets"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DataSetGetDatasetsResultInfo(datasetsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIDataSetGetDatasets_DatasetsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var datasets = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                datasets.Add(UpdateIDataSetGetDatasets_DatasetsEntity(session, child, entityIds));
            }

            return datasets;
        }

        private global::StrawberryShake.EntityId? UpdateIDataSetGetDatasets_DatasetsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.DatasetEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Status, entity.Files, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.RowCount, entity.NumModelGroups, entity.ModelGroups));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DataSetGetDatasetsFullBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.DatasetStatus> _datasetStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DataSetGetDatasetsFullBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _datasetStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.DatasetStatus>("DatasetStatus") ?? throw new global::System.ArgumentException("No serializer for type `DatasetStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDataSetGetDatasetsFullResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDataSetGetDatasetsFullResult Result, DataSetGetDatasetsFullResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IDataSetGetDatasetsFullResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDataSetGetDatasetsFullResult, DataSetGetDatasetsFullResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.DatasetPageData? datasetsPageId = default !;
            _entityStore.Update(session =>
            {
                datasetsPageId = DeserializeIDataSetGetDatasetsFull_DatasetsPage(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetsPage"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DataSetGetDatasetsFullResultInfo(datasetsPageId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.DatasetPageData? DeserializeIDataSetGetDatasetsFull_DatasetsPage(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DatasetPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.DatasetPageData(typename, datasets: UpdateIDataSetGetDatasetsFull_DatasetsPage_DatasetsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasets"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIDataSetGetDatasetsFull_DatasetsPage_DatasetsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var datasets = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                datasets.Add(UpdateIDataSetGetDatasetsFull_DatasetsPage_DatasetsEntity(session, child, entityIds));
            }

            return datasets;
        }

        private global::StrawberryShake.EntityId? UpdateIDataSetGetDatasetsFull_DatasetsPage_DatasetsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Dataset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.DatasetEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDatasetStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), entity.Files, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rowCount")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numModelGroups")), UpdateIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelGroups"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.DatasetEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDatasetStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rowCount")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "numModelGroups")), UpdateIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelGroups"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.DatasetStatus? DeserializeDatasetStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _datasetStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var modelGroups = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                modelGroups.Add(UpdateIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsEntity(session, child, entityIds));
            }

            return modelGroups;
        }

        private global::StrawberryShake.EntityId? UpdateIDataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroupsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ModelGroup", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ModelGroupEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelGroupEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Name, entity.Status, entity.SelectedModel, entity.Models));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelGroupEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public SubmitReviewBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ISubmitReviewResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISubmitReviewResult Result, SubmitReviewResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ISubmitReviewResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISubmitReviewResult, SubmitReviewResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SubmitReviewResultInfo(DeserializeISubmitReview_SubmitAutoReview(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submitAutoReview")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? DeserializeISubmitReview_SubmitAutoReview(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubmitAutoReview", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData(typename, jobId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitReviewForceCompleteBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public SubmitReviewForceCompleteBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ISubmitReviewForceCompleteResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ISubmitReviewForceCompleteResult Result, SubmitReviewForceCompleteResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ISubmitReviewForceCompleteResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ISubmitReviewForceCompleteResult, SubmitReviewForceCompleteResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new SubmitReviewForceCompleteResultInfo(DeserializeISubmitReviewForceComplete_SubmitAutoReview(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submitAutoReview")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData? DeserializeISubmitReviewForceComplete_SubmitAutoReview(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubmitAutoReview", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.SubmitAutoReviewData(typename, jobId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetReviewsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetReviewsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetReviewsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ReviewType> _reviewTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONStringParser;
        public GetReviewsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetReviewsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _reviewTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ReviewType>("ReviewType") ?? throw new global::System.ArgumentException("No serializer for type `ReviewType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _jSONStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSONString") ?? throw new global::System.ArgumentException("No serializer for type `JSONString` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetReviewsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetReviewsResult Result, GetReviewsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetReviewsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetReviewsResult, GetReviewsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? submissionId = default !;
            _entityStore.Update(session =>
            {
                submissionId = UpdateIGetReviews_SubmissionEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submission"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetReviewsResultInfo(submissionId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetReviews_SubmissionEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Submission", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.SubmissionEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.DatasetId, entity.WorkflowId, entity.Status, entity.CreatedAt, entity.UpdatedAt, entity.CreatedBy, entity.UpdatedBy, entity.CompletedAt, entity.Errors, entity.FilesDeleted, entity.InputFiles, entity.InputFile, entity.InputFilename, entity.ResultFile, entity.OutputFiles, entity.Retrieved, entity.AutoReview, entity.Retries, UpdateIGetReviews_Submission_ReviewsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviews"), entityIds), entity.ReviewInProgress));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.SubmissionEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, UpdateIGetReviews_Submission_ReviewsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviews"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetReviews_Submission_ReviewsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var reviews = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                reviews.Add(UpdateIGetReviews_Submission_ReviewsEntity(session, child, entityIds));
            }

            return reviews;
        }

        private global::StrawberryShake.EntityId? UpdateIGetReviews_Submission_ReviewsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Review", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changes"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ReviewEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "submissionId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startedAt")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completedAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rejected")), DeserializeReviewType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "reviewType")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "notes")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changes"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::IndicoV2.StrawberryShake.ReviewType? DeserializeReviewType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _reviewTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupQueryBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupQueryResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ModelStatus> _modelStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ModelGroupQueryBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupQueryResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _modelStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ModelStatus>("ModelStatus") ?? throw new global::System.ArgumentException("No serializer for type `ModelStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IModelGroupQueryResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IModelGroupQueryResult Result, ModelGroupQueryResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IModelGroupQueryResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IModelGroupQueryResult, ModelGroupQueryResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.ModelGroupPageData? modelGroupsId = default !;
            _entityStore.Update(session =>
            {
                modelGroupsId = DeserializeIModelGroupQuery_ModelGroups(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelGroups"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ModelGroupQueryResultInfo(modelGroupsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.ModelGroupPageData? DeserializeIModelGroupQuery_ModelGroups(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ModelGroupPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.ModelGroupPageData(typename, modelGroups: UpdateIModelGroupQuery_ModelGroups_ModelGroupsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelGroups"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIModelGroupQuery_ModelGroups_ModelGroupsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var modelGroups = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                modelGroups.Add(UpdateIModelGroupQuery_ModelGroups_ModelGroupsEntity(session, child, entityIds));
            }

            return modelGroups;
        }

        private global::StrawberryShake.EntityId? UpdateIModelGroupQuery_ModelGroups_ModelGroupsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ModelGroup", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ModelGroupEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelGroupEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeModelStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), UpdateIModelGroupQuery_ModelGroups_ModelGroups_SelectedModelEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "selectedModel"), entityIds), entity.Models));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelGroupEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeModelStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), UpdateIModelGroupQuery_ModelGroups_ModelGroups_SelectedModelEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "selectedModel"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.ModelStatus? DeserializeModelStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _modelStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIModelGroupQuery_ModelGroups_ModelGroups_SelectedModelEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Model", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ModelEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeModelStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), entity.TrainingProgress));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeModelStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoadBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelLoadResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelLoadResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public ModelLoadBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelLoadResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IModelLoadResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IModelLoadResult Result, ModelLoadResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IModelLoadResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IModelLoadResult, ModelLoadResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ModelLoadResultInfo(DeserializeIModelLoad_ModelLoad(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelLoad")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.ModelLoadData? DeserializeIModelLoad_ModelLoad(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ModelLoad", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.ModelLoadData(typename, status: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PredictModelBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IPredictModelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IPredictModelResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public PredictModelBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IPredictModelResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IPredictModelResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPredictModelResult Result, PredictModelResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IPredictModelResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPredictModelResult, PredictModelResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PredictModelResultInfo(DeserializeIPredictModel_ModelPredict(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelPredict")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.ModelPredictData? DeserializeIPredictModel_ModelPredict(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ModelPredict", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.ModelPredictData(typename, jobId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupProgressQueryBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ModelStatus> _modelStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public ModelGroupProgressQueryBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _modelStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.ModelStatus>("ModelStatus") ?? throw new global::System.ArgumentException("No serializer for type `ModelStatus` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IModelGroupProgressQueryResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IModelGroupProgressQueryResult Result, ModelGroupProgressQueryResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IModelGroupProgressQueryResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IModelGroupProgressQueryResult, ModelGroupProgressQueryResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.ModelGroupPageData? modelGroupsId = default !;
            _entityStore.Update(session =>
            {
                modelGroupsId = DeserializeIModelGroupProgressQuery_ModelGroups(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelGroups"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ModelGroupProgressQueryResultInfo(modelGroupsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.ModelGroupPageData? DeserializeIModelGroupProgressQuery_ModelGroups(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ModelGroupPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.ModelGroupPageData(typename, modelGroups: UpdateIModelGroupProgressQuery_ModelGroups_ModelGroupsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modelGroups"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIModelGroupProgressQuery_ModelGroups_ModelGroupsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var modelGroups = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                modelGroups.Add(UpdateIModelGroupProgressQuery_ModelGroups_ModelGroupsEntity(session, child, entityIds));
            }

            return modelGroups;
        }

        private global::StrawberryShake.EntityId? UpdateIModelGroupProgressQuery_ModelGroups_ModelGroupsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ModelGroup", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ModelGroupEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelGroupEntity(entity.Id, entity.Name, entity.Status, entity.SelectedModel, UpdateIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "models"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelGroupEntity(default !, default !, default !, default !, UpdateIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "models"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var models = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                models.Add(UpdateIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsEntity(session, child, entityIds));
            }

            return models;
        }

        private global::StrawberryShake.EntityId? UpdateIModelGroupProgressQuery_ModelGroups_ModelGroups_ModelsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Model", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.ModelEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeModelStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeIModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "trainingProgress"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.ModelEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeModelStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeIModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "trainingProgress"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::IndicoV2.StrawberryShake.ModelStatus? DeserializeModelStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _modelStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.State.TrainingProgressData? DeserializeIModelGroupProgressQuery_ModelGroups_ModelGroups_Models_TrainingProgress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("TrainingProgress", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.TrainingProgressData(typename, percentComplete: DeserializeDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "percentComplete")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double? DeserializeDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummaryBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSummaryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSummaryResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.AppRole> _appRoleParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public UserSummaryBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSummaryResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _appRoleParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.AppRole>("AppRole") ?? throw new global::System.ArgumentException("No serializer for type `AppRole` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IUserSummaryResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUserSummaryResult Result, UserSummaryResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUserSummaryResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUserSummaryResult, UserSummaryResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UserSummaryResultInfo(DeserializeIUserSummary_UserSummary(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userSummary")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.UserSummaryData? DeserializeIUserSummary_UserSummary(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserSummary", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.UserSummaryData(typename, users: DeserializeIUserSummary_UserSummary_Users(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "users")), appRoles: DeserializeIUserSummary_UserSummary_AppRolesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "appRoles")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.State.EnabledCountData? DeserializeIUserSummary_UserSummary_Users(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("EnabledCount", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.EnabledCountData(typename, enabled: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), disabled: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "disabled")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.AppRoleCountData?>? DeserializeIUserSummary_UserSummary_AppRolesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var appRoleCounts = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.State.AppRoleCountData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                appRoleCounts.Add(DeserializeIUserSummary_UserSummary_AppRoles(child));
            }

            return appRoleCounts;
        }

        private global::IndicoV2.StrawberryShake.State.AppRoleCountData? DeserializeIUserSummary_UserSummary_AppRoles(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AppRoleCount", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.AppRoleCountData(typename, role: DeserializeAppRole(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role")), count: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.AppRole? DeserializeAppRole(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _appRoleParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.AppRole> _appRoleParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.Roles> _rolesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public UserSnapshotBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _appRoleParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.AppRole>("AppRole") ?? throw new global::System.ArgumentException("No serializer for type `AppRole` found.");
            _rolesParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.Roles>("Roles") ?? throw new global::System.ArgumentException("No serializer for type `Roles` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IUserSnapshotResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUserSnapshotResult Result, UserSnapshotResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUserSnapshotResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUserSnapshotResult, UserSnapshotResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.UserSnapshotPageData? userSnapshotId = default !;
            _entityStore.Update(session =>
            {
                userSnapshotId = DeserializeIUserSnapshot_UserSnapshot(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userSnapshot"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UserSnapshotResultInfo(userSnapshotId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.UserSnapshotPageData? DeserializeIUserSnapshot_UserSnapshot(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserSnapshotPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.UserSnapshotPageData(typename, results: UpdateIUserSnapshot_UserSnapshot_ResultsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "results"), entityIds), pageInfo: DeserializeIUserSnapshot_UserSnapshot_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIUserSnapshot_UserSnapshot_ResultsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var userSnapshots = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                userSnapshots.Add(UpdateIUserSnapshot_UserSnapshot_ResultsEntity(session, child, entityIds));
            }

            return userSnapshots;
        }

        private global::StrawberryShake.EntityId? UpdateIUserSnapshot_UserSnapshot_ResultsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("UserSnapshot", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.UserSnapshotEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.UserSnapshotEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeAppRoleArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roles")), DeserializeIUserSnapshot_UserSnapshot_Results_DatasetsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasets"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.UserSnapshotEntity(DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeAppRoleArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roles")), DeserializeIUserSnapshot_UserSnapshot_Results_DatasetsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasets"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.AppRole?>? DeserializeAppRoleArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var appRoles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.AppRole?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                appRoles.Add(DeserializeAppRole(child));
            }

            return appRoles;
        }

        private global::IndicoV2.StrawberryShake.AppRole? DeserializeAppRole(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _appRoleParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? DeserializeIUserSnapshot_UserSnapshot_Results_DatasetsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var datasetRoles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                datasetRoles.Add(DeserializeIUserSnapshot_UserSnapshot_Results_Datasets(child));
            }

            return datasetRoles;
        }

        private global::IndicoV2.StrawberryShake.State.DatasetRoleData? DeserializeIUserSnapshot_UserSnapshot_Results_Datasets(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DatasetRole", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.DatasetRoleData(typename, datasetId: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), role: DeserializeRoles(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::IndicoV2.StrawberryShake.Roles? DeserializeRoles(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _rolesParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.State.PageInfoData? DeserializeIUserSnapshot_UserSnapshot_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.PageInfoData(typename, aggregateCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "aggregateCount")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.Roles> _rolesParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.UserChangeType> _userChangeTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public UserChangelogBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _rolesParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.Roles>("Roles") ?? throw new global::System.ArgumentException("No serializer for type `Roles` found.");
            _userChangeTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::IndicoV2.StrawberryShake.UserChangeType>("UserChangeType") ?? throw new global::System.ArgumentException("No serializer for type `UserChangeType` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IUserChangelogResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUserChangelogResult Result, UserChangelogResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUserChangelogResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUserChangelogResult, UserChangelogResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::IndicoV2.StrawberryShake.State.UserChangelogPageData? userChangelogId = default !;
            _entityStore.Update(session =>
            {
                userChangelogId = DeserializeIUserChangelog_UserChangelog(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userChangelog"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UserChangelogResultInfo(userChangelogId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.UserChangelogPageData? DeserializeIUserChangelog_UserChangelog(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("UserChangelogPage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.UserChangelogPageData(typename, results: UpdateIUserChangelog_UserChangelog_ResultsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "results"), entityIds), pageInfo: DeserializeIUserChangelog_UserChangelog_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIUserChangelog_UserChangelog_ResultsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var userChangelogs = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                userChangelogs.Add(UpdateIUserChangelog_UserChangelog_ResultsEntity(session, child, entityIds));
            }

            return userChangelogs;
        }

        private global::StrawberryShake.EntityId? UpdateIUserChangelog_UserChangelog_ResultsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("UserChangelog", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::IndicoV2.StrawberryShake.State.UserChangelogEntity? entity))
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.UserChangelogEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "date")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userEmail")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updaterEmail")), DeserializeIUserChangelog_UserChangelog_Results_PreviousDatasetsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousDatasets")), DeserializeUserChangeTypeArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changesMade"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::IndicoV2.StrawberryShake.State.UserChangelogEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "date")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userEmail")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updaterEmail")), DeserializeIUserChangelog_UserChangelog_Results_PreviousDatasetsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previousDatasets")), DeserializeUserChangeTypeArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "changesMade"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>? DeserializeIUserChangelog_UserChangelog_Results_PreviousDatasetsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var datasetRoles = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.State.DatasetRoleData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                datasetRoles.Add(DeserializeIUserChangelog_UserChangelog_Results_PreviousDatasets(child));
            }

            return datasetRoles;
        }

        private global::IndicoV2.StrawberryShake.State.DatasetRoleData? DeserializeIUserChangelog_UserChangelog_Results_PreviousDatasets(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DatasetRole", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.DatasetRoleData(typename, datasetId: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "datasetId")), role: DeserializeRoles(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "role")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::IndicoV2.StrawberryShake.Roles? DeserializeRoles(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _rolesParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.UserChangeType?>? DeserializeUserChangeTypeArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var userChangeTypes = new global::System.Collections.Generic.List<global::IndicoV2.StrawberryShake.UserChangeType?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                userChangeTypes.Add(DeserializeUserChangeType(child));
            }

            return userChangeTypes;
        }

        private global::IndicoV2.StrawberryShake.UserChangeType? DeserializeUserChangeType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _userChangeTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::IndicoV2.StrawberryShake.State.PageInfoData? DeserializeIUserChangelog_UserChangelog_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.PageInfoData(typename, aggregateCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "aggregateCount")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotReportBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotReportResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotReportResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public UserSnapshotReportBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotReportResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IUserSnapshotReportResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUserSnapshotReportResult Result, UserSnapshotReportResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUserSnapshotReportResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUserSnapshotReportResult, UserSnapshotReportResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UserSnapshotReportResultInfo(DeserializeIUserSnapshotReport_UserSnapshotReport(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userSnapshotReport")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.GenerateUserSnapshotReportData? DeserializeIUserSnapshotReport_UserSnapshotReport(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GenerateUserSnapshotReport", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.GenerateUserSnapshotReportData(typename, jobId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogReportBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogReportResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogReportResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public UserChangelogReportBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogReportResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IUserChangelogReportResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUserChangelogReportResult Result, UserChangelogReportResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IUserChangelogReportResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUserChangelogReportResult, UserChangelogReportResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UserChangelogReportResultInfo(DeserializeIUserChangelogReport_UserChangelogReport(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "userChangelogReport")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::IndicoV2.StrawberryShake.State.GenerateUserChangelogReportData? DeserializeIUserChangelogReport_UserChangelogReport(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GenerateUserChangelogReport", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::IndicoV2.StrawberryShake.State.GenerateUserChangelogReportData(typename, jobId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    ///<summary>Extract text from a document using one of our OCR engine providers.Returns: List of ids of the document processing jobs kicked off by this mutation. Can be used to query for status and results.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DocumentExtractionData
    {
        public DocumentExtractionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? jobIds = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobIds = jobIds;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class WorkflowPageData
    {
        public WorkflowPageData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? workflows = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Workflows = workflows;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Workflows
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class AddDataToWorkflowData
    {
        public AddDataToWorkflowData(global::System.String __typename, global::StrawberryShake.EntityId? workflow = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Workflow = workflow;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::StrawberryShake.EntityId? Workflow
        {
            get;
        }
    }

    ///<summary>Server response object when submitting to a workflow containing idsto track the submissions and the submissions themselves if requested</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionResultData
    {
        public SubmissionResultData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::System.String?>? jobIds = default !, global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? submissionIds = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobIds = jobIds;
            SubmissionIds = submissionIds;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>Returned if submissions are not recorded</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? JobIds
        {
            get;
        }

        ///<summary>Returned if submissions are recorded</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.Int32?>? SubmissionIds
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionPageData
    {
        public SubmissionPageData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? submissions = default !, global::IndicoV2.StrawberryShake.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Submissions = submissions;
            PageInfo = pageInfo;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Submissions
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.State.PageInfoData? PageInfo
        {
            get;
        }
    }

    ///<summary>Representation for paginated results for a List queryUse `endCursor` as part of the `after` parameter to get the next pageor `startCursor` as part of the `before` parameter to get to the previous page</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.Int32? startCursor = default !, global::System.Int32? endCursor = default !, global::System.Boolean? hasNextPage = default !, global::System.Int32? aggregateCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            AggregateCount = aggregateCount;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>Cursor on the first result - from which the previous page can be acquired</summary>
        public global::System.Int32? StartCursor
        {
            get;
        }

        ///<summary>Cursor on the last result - from which the next page can be acquired</summary>
        public global::System.Int32? EndCursor
        {
            get;
        }

        ///<summary>Another page is available</summary>
        public global::System.Boolean? HasNextPage
        {
            get;
        }

        ///<summary>Total number of results for this query</summary>
        public global::System.Int32? AggregateCount
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmissionResultsData
    {
        public SubmissionResultsData(global::System.String __typename, global::System.String? jobId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobId = jobId;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? JobId
        {
            get;
        }
    }

    ///<summary>Paginated result object for listing datasets</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetPageData
    {
        public DatasetPageData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? datasets = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Datasets = datasets;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Datasets
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class SubmitAutoReviewData
    {
        public SubmitAutoReviewData(global::System.String __typename, global::System.String? jobId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobId = jobId;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelGroupPageData
    {
        public ModelGroupPageData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? modelGroups = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ModelGroups = modelGroups;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? ModelGroups
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelLoadData
    {
        public ModelLoadData(global::System.String __typename, global::System.String? status = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Status = status;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? Status
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ModelPredictData
    {
        public ModelPredictData(global::System.String __typename, global::System.String? jobId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobId = jobId;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class TrainingProgressData
    {
        public TrainingProgressData(global::System.String __typename, global::System.Double? percentComplete = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            PercentComplete = percentComplete;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Double? PercentComplete
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSummaryData
    {
        public UserSummaryData(global::System.String __typename, global::IndicoV2.StrawberryShake.State.EnabledCountData? users = default !, global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.AppRoleCountData?>? appRoles = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Users = users;
            AppRoles = appRoles;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.State.EnabledCountData? Users
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::IndicoV2.StrawberryShake.State.AppRoleCountData?>? AppRoles
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class EnabledCountData
    {
        public EnabledCountData(global::System.String __typename, global::System.Int32? enabled = default !, global::System.Int32? disabled = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Enabled = enabled;
            Disabled = disabled;
        }

        public global::System.String __typename
        {
            get;
        }

        ///<summary>Number of active users</summary>
        public global::System.Int32? Enabled
        {
            get;
        }

        ///<summary>Number of deactivated users</summary>
        public global::System.Int32? Disabled
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class AppRoleCountData
    {
        public AppRoleCountData(global::System.String __typename, global::IndicoV2.StrawberryShake.AppRole? role = default !, global::System.Int32? count = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Role = role;
            Count = count;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.AppRole? Role
        {
            get;
        }

        public global::System.Int32? Count
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserSnapshotPageData
    {
        public UserSnapshotPageData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? results = default !, global::IndicoV2.StrawberryShake.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Results = results;
            PageInfo = pageInfo;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Results
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.State.PageInfoData? PageInfo
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class DatasetRoleData
    {
        public DatasetRoleData(global::System.String __typename, global::System.Int32? datasetId = default !, global::IndicoV2.StrawberryShake.Roles? role = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DatasetId = datasetId;
            Role = role;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Int32? DatasetId
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.Roles? Role
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class UserChangelogPageData
    {
        public UserChangelogPageData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? results = default !, global::IndicoV2.StrawberryShake.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Results = results;
            PageInfo = pageInfo;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Results
        {
            get;
        }

        public global::IndicoV2.StrawberryShake.State.PageInfoData? PageInfo
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GenerateUserSnapshotReportData
    {
        public GenerateUserSnapshotReportData(global::System.String __typename, global::System.String? jobId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobId = jobId;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GenerateUserChangelogReportData
    {
        public GenerateUserChangelogReportData(global::System.String __typename, global::System.String? jobId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobId = jobId;
        }

        public global::System.String __typename
        {
            get;
        }

        public global::System.String? JobId
        {
            get;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class IndicoGqlClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "Workflow" => ParseWorkflowEntityId(obj, __typename), "Submission" => ParseSubmissionEntityId(obj, __typename), "SubmissionFile" => ParseSubmissionFileEntityId(obj, __typename), "SubmissionOutput" => ParseSubmissionOutputEntityId(obj, __typename), "Review" => ParseReviewEntityId(obj, __typename), "SubmissionRetry" => ParseSubmissionRetryEntityId(obj, __typename), "Job" => ParseJobEntityId(obj, __typename), "Dataset" => ParseDatasetEntityId(obj, __typename), "DataFile" => ParseDataFileEntityId(obj, __typename), "ModelGroup" => ParseModelGroupEntityId(obj, __typename), "Model" => ParseModelEntityId(obj, __typename), "UserSnapshot" => ParseUserSnapshotEntityId(obj, __typename), "UserChangelog" => ParseUserChangelogEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "Workflow" => FormatWorkflowEntityId(entityId), "Submission" => FormatSubmissionEntityId(entityId), "SubmissionFile" => FormatSubmissionFileEntityId(entityId), "SubmissionOutput" => FormatSubmissionOutputEntityId(entityId), "Review" => FormatReviewEntityId(entityId), "SubmissionRetry" => FormatSubmissionRetryEntityId(entityId), "Job" => FormatJobEntityId(entityId), "Dataset" => FormatDatasetEntityId(entityId), "DataFile" => FormatDataFileEntityId(entityId), "ModelGroup" => FormatModelGroupEntityId(entityId), "Model" => FormatModelEntityId(entityId), "UserSnapshot" => FormatUserSnapshotEntityId(entityId), "UserChangelog" => FormatUserChangelogEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseWorkflowEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatWorkflowEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSubmissionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatSubmissionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSubmissionFileEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatSubmissionFileEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSubmissionOutputEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatSubmissionOutputEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReviewEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatReviewEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSubmissionRetryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatSubmissionRetryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseJobEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatJobEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDatasetEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatDatasetEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDataFileEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatDataFileEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseModelGroupEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatModelGroupEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseModelEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatModelEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserSnapshotEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt32()!);
        }

        private global::System.String FormatUserSnapshotEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int32)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserChangelogEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserChangelogEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class IndicoGqlClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public IndicoGqlClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public static partial class IndicoGqlClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::IndicoV2.StrawberryShake.State.IndicoGqlClientStoreAccessor> AddIndicoGqlClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::IndicoV2.StrawberryShake.State.IndicoGqlClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DocumentExtractionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowGetStatusQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowAddDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ListWorkflowsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowSubmissionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowUrlSubmissionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ListSubmissionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UpdateSubmissionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.GetSubmissionQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.CreateSubmissionResultsMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.JobStatusQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DatasetUploadStatusQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetAddFilesMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetProcessFilesMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetProcessCsvMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetGetDatasetsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetGetDatasetsFullQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.SubmitReviewMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.SubmitReviewForceCompleteMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.GetReviewsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ModelGroupQueryQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ModelLoadMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.PredictModelMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ModelGroupProgressQueryQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserSummaryQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserSnapshotQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserChangelogQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserSnapshotReportMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserChangelogReportMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IndicoGqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IIndicoGqlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::IndicoV2.StrawberryShake.State.IndicoGqlClientStoreAccessor>("IndicoGqlClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("IndicoGqlClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, global::IndicoV2.StrawberryShake.WorkflowGetStatus_Workflows_Workflows_Workflow>, global::IndicoV2.StrawberryShake.State.WorkflowGetStatus_Workflows_Workflows_WorkflowFromWorkflowEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, global::IndicoV2.StrawberryShake.WorkflowAddData_AddDataToWorkflow_Workflow_Workflow>, global::IndicoV2.StrawberryShake.State.WorkflowAddData_AddDataToWorkflow_Workflow_WorkflowFromWorkflowEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.WorkflowEntity, global::IndicoV2.StrawberryShake.ListWorkflows_Workflows_Workflows_Workflow>, global::IndicoV2.StrawberryShake.State.ListWorkflows_Workflows_Workflows_WorkflowFromWorkflowEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, global::IndicoV2.StrawberryShake.ListSubmissions_Submissions_Submissions_Submission>, global::IndicoV2.StrawberryShake.State.ListSubmissions_Submissions_Submissions_SubmissionFromSubmissionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, global::IndicoV2.StrawberryShake.ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFile>, global::IndicoV2.StrawberryShake.State.ListSubmissions_Submissions_Submissions_InputFiles_SubmissionFileFromSubmissionFileEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, global::IndicoV2.StrawberryShake.ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutput>, global::IndicoV2.StrawberryShake.State.ListSubmissions_Submissions_Submissions_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, global::IndicoV2.StrawberryShake.ListSubmissions_Submissions_Submissions_AutoReview_Review>, global::IndicoV2.StrawberryShake.State.ListSubmissions_Submissions_Submissions_AutoReview_ReviewFromReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, global::IndicoV2.StrawberryShake.ListSubmissions_Submissions_Submissions_Retries_SubmissionRetry>, global::IndicoV2.StrawberryShake.State.ListSubmissions_Submissions_Submissions_Retries_SubmissionRetryFromSubmissionRetryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, global::IndicoV2.StrawberryShake.ListSubmissions_Submissions_Submissions_Reviews_Review>, global::IndicoV2.StrawberryShake.State.ListSubmissions_Submissions_Submissions_Reviews_ReviewFromReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, global::IndicoV2.StrawberryShake.UpdateSubmission_UpdateSubmission_Submission>, global::IndicoV2.StrawberryShake.State.UpdateSubmission_UpdateSubmission_SubmissionFromSubmissionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, global::IndicoV2.StrawberryShake.GetSubmission_Submission_Submission>, global::IndicoV2.StrawberryShake.State.GetSubmission_Submission_SubmissionFromSubmissionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionFileEntity, global::IndicoV2.StrawberryShake.GetSubmission_Submission_InputFiles_SubmissionFile>, global::IndicoV2.StrawberryShake.State.GetSubmission_Submission_InputFiles_SubmissionFileFromSubmissionFileEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionOutputEntity, global::IndicoV2.StrawberryShake.GetSubmission_Submission_OutputFiles_SubmissionOutput>, global::IndicoV2.StrawberryShake.State.GetSubmission_Submission_OutputFiles_SubmissionOutputFromSubmissionOutputEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, global::IndicoV2.StrawberryShake.GetSubmission_Submission_AutoReview_Review>, global::IndicoV2.StrawberryShake.State.GetSubmission_Submission_AutoReview_ReviewFromReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionRetryEntity, global::IndicoV2.StrawberryShake.GetSubmission_Submission_Retries_SubmissionRetry>, global::IndicoV2.StrawberryShake.State.GetSubmission_Submission_Retries_SubmissionRetryFromSubmissionRetryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, global::IndicoV2.StrawberryShake.GetSubmission_Submission_Reviews_Review>, global::IndicoV2.StrawberryShake.State.GetSubmission_Submission_Reviews_ReviewFromReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.JobEntity, global::IndicoV2.StrawberryShake.JobStatus_Job_Job>, global::IndicoV2.StrawberryShake.State.JobStatus_Job_JobFromJobEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, global::IndicoV2.StrawberryShake.DatasetUploadStatus_Dataset_Dataset>, global::IndicoV2.StrawberryShake.State.DatasetUploadStatus_Dataset_DatasetFromDatasetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DataFileEntity, global::IndicoV2.StrawberryShake.DatasetUploadStatus_Dataset_Files_DataFile>, global::IndicoV2.StrawberryShake.State.DatasetUploadStatus_Dataset_Files_DataFileFromDataFileEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, global::IndicoV2.StrawberryShake.DataSetAddFiles_AddDatasetFiles_Dataset>, global::IndicoV2.StrawberryShake.State.DataSetAddFiles_AddDatasetFiles_DatasetFromDatasetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, global::IndicoV2.StrawberryShake.DataSetProcessFiles_AddDataFiles_Dataset>, global::IndicoV2.StrawberryShake.State.DataSetProcessFiles_AddDataFiles_DatasetFromDatasetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, global::IndicoV2.StrawberryShake.DataSetProcessCsv_AddDataCsv_Dataset>, global::IndicoV2.StrawberryShake.State.DataSetProcessCsv_AddDataCsv_DatasetFromDatasetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, global::IndicoV2.StrawberryShake.DataSetGetDatasets_Datasets_Dataset>, global::IndicoV2.StrawberryShake.State.DataSetGetDatasets_Datasets_DatasetFromDatasetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.DatasetEntity, global::IndicoV2.StrawberryShake.DataSetGetDatasetsFull_DatasetsPage_Datasets_Dataset>, global::IndicoV2.StrawberryShake.State.DataSetGetDatasetsFull_DatasetsPage_Datasets_DatasetFromDatasetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, global::IndicoV2.StrawberryShake.DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroup>, global::IndicoV2.StrawberryShake.State.DataSetGetDatasetsFull_DatasetsPage_Datasets_ModelGroups_ModelGroupFromModelGroupEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.SubmissionEntity, global::IndicoV2.StrawberryShake.GetReviews_Submission_Submission>, global::IndicoV2.StrawberryShake.State.GetReviews_Submission_SubmissionFromSubmissionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ReviewEntity, global::IndicoV2.StrawberryShake.GetReviews_Submission_Reviews_Review>, global::IndicoV2.StrawberryShake.State.GetReviews_Submission_Reviews_ReviewFromReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, global::IndicoV2.StrawberryShake.ModelGroupQuery_ModelGroups_ModelGroups_ModelGroup>, global::IndicoV2.StrawberryShake.State.ModelGroupQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, global::IndicoV2.StrawberryShake.ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_Model>, global::IndicoV2.StrawberryShake.State.ModelGroupQuery_ModelGroups_ModelGroups_SelectedModel_ModelFromModelEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelGroupEntity, global::IndicoV2.StrawberryShake.ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroup>, global::IndicoV2.StrawberryShake.State.ModelGroupProgressQuery_ModelGroups_ModelGroups_ModelGroupFromModelGroupEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.ModelEntity, global::IndicoV2.StrawberryShake.ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_Model>, global::IndicoV2.StrawberryShake.State.ModelGroupProgressQuery_ModelGroups_ModelGroups_Models_ModelFromModelEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserSnapshotEntity, global::IndicoV2.StrawberryShake.UserSnapshot_UserSnapshot_Results_UserSnapshot>, global::IndicoV2.StrawberryShake.State.UserSnapshot_UserSnapshot_Results_UserSnapshotFromUserSnapshotEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::IndicoV2.StrawberryShake.State.UserChangelogEntity, global::IndicoV2.StrawberryShake.UserChangelog_UserChangelog_Results_UserChangelog>, global::IndicoV2.StrawberryShake.State.UserChangelog_UserChangelog_Results_UserChangelogFromUserChangelogEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.WorkflowStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.SubmissionResultVersionSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.FileTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.ReviewTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.SubmissionStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.SUBMISSION_COLUMN_ENUMSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.JobStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.DatasetStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.FileStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.FileFailureTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.ModelStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.AppRoleSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.RolesSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.UserChangeTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("JSONString"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("InputDate"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.FileInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.SubmissionFilterInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.DateRangeFilterInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.ReviewFilterInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::IndicoV2.StrawberryShake.UserReportFilterInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDocumentExtractionResult>, global::IndicoV2.StrawberryShake.State.DocumentExtractionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDocumentExtractionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IDocumentExtractionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDocumentExtractionResult>, global::IndicoV2.StrawberryShake.State.DocumentExtractionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IDocumentExtractionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDocumentExtractionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDocumentExtractionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.DocumentExtractionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IDocumentExtractionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DocumentExtractionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult>, global::IndicoV2.StrawberryShake.State.WorkflowGetStatusResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IWorkflowGetStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult>, global::IndicoV2.StrawberryShake.State.WorkflowGetStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowGetStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.WorkflowGetStatusQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IWorkflowGetStatusQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowGetStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowAddDataResult>, global::IndicoV2.StrawberryShake.State.WorkflowAddDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowAddDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IWorkflowAddDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowAddDataResult>, global::IndicoV2.StrawberryShake.State.WorkflowAddDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IWorkflowAddDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowAddDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowAddDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.WorkflowAddDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IWorkflowAddDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowAddDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListWorkflowsResult>, global::IndicoV2.StrawberryShake.State.ListWorkflowsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListWorkflowsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IListWorkflowsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListWorkflowsResult>, global::IndicoV2.StrawberryShake.State.ListWorkflowsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IListWorkflowsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListWorkflowsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListWorkflowsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ListWorkflowsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IListWorkflowsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ListWorkflowsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult>, global::IndicoV2.StrawberryShake.State.WorkflowSubmissionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IWorkflowSubmissionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult>, global::IndicoV2.StrawberryShake.State.WorkflowSubmissionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowSubmissionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.WorkflowSubmissionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IWorkflowSubmissionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowSubmissionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult>, global::IndicoV2.StrawberryShake.State.WorkflowUrlSubmissionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult>, global::IndicoV2.StrawberryShake.State.WorkflowUrlSubmissionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.WorkflowUrlSubmissionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IWorkflowUrlSubmissionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.WorkflowUrlSubmissionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListSubmissionsResult>, global::IndicoV2.StrawberryShake.State.ListSubmissionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IListSubmissionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IListSubmissionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListSubmissionsResult>, global::IndicoV2.StrawberryShake.State.ListSubmissionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IListSubmissionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListSubmissionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IListSubmissionsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ListSubmissionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IListSubmissionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ListSubmissionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUpdateSubmissionResult>, global::IndicoV2.StrawberryShake.State.UpdateSubmissionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUpdateSubmissionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IUpdateSubmissionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUpdateSubmissionResult>, global::IndicoV2.StrawberryShake.State.UpdateSubmissionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IUpdateSubmissionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUpdateSubmissionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUpdateSubmissionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.UpdateSubmissionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IUpdateSubmissionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UpdateSubmissionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetSubmissionResult>, global::IndicoV2.StrawberryShake.State.GetSubmissionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetSubmissionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IGetSubmissionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetSubmissionResult>, global::IndicoV2.StrawberryShake.State.GetSubmissionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IGetSubmissionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetSubmissionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetSubmissionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.GetSubmissionQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IGetSubmissionQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.GetSubmissionQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult>, global::IndicoV2.StrawberryShake.State.CreateSubmissionResultsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ICreateSubmissionResultsMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult>, global::IndicoV2.StrawberryShake.State.CreateSubmissionResultsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ICreateSubmissionResultsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.CreateSubmissionResultsMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ICreateSubmissionResultsMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.CreateSubmissionResultsMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IJobStatusResult>, global::IndicoV2.StrawberryShake.State.JobStatus_1ResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IJobStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IJobStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IJobStatusResult>, global::IndicoV2.StrawberryShake.State.JobStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IJobStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IJobStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IJobStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.JobStatusQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IJobStatusQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.JobStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult>, global::IndicoV2.StrawberryShake.State.DatasetUploadStatusResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IDatasetUploadStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult>, global::IndicoV2.StrawberryShake.State.DatasetUploadStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDatasetUploadStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.DatasetUploadStatusQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IDatasetUploadStatusQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DatasetUploadStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetAddFilesResult>, global::IndicoV2.StrawberryShake.State.DataSetAddFilesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetAddFilesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IDataSetAddFilesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetAddFilesResult>, global::IndicoV2.StrawberryShake.State.DataSetAddFilesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IDataSetAddFilesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetAddFilesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetAddFilesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.DataSetAddFilesMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IDataSetAddFilesMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetAddFilesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult>, global::IndicoV2.StrawberryShake.State.DataSetProcessFilesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IDataSetProcessFilesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult>, global::IndicoV2.StrawberryShake.State.DataSetProcessFilesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessFilesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.DataSetProcessFilesMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IDataSetProcessFilesMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetProcessFilesMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult>, global::IndicoV2.StrawberryShake.State.DataSetProcessCsvResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IDataSetProcessCsvMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult>, global::IndicoV2.StrawberryShake.State.DataSetProcessCsvBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetProcessCsvResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.DataSetProcessCsvMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IDataSetProcessCsvMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetProcessCsvMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult>, global::IndicoV2.StrawberryShake.State.DataSetGetDatasetsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult>, global::IndicoV2.StrawberryShake.State.DataSetGetDatasetsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.DataSetGetDatasetsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetGetDatasetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult>, global::IndicoV2.StrawberryShake.State.DataSetGetDatasetsFullResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult>, global::IndicoV2.StrawberryShake.State.DataSetGetDatasetsFullBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.DataSetGetDatasetsFullQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IDataSetGetDatasetsFullQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.DataSetGetDatasetsFullQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewResult>, global::IndicoV2.StrawberryShake.State.SubmitReviewResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ISubmitReviewMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewResult>, global::IndicoV2.StrawberryShake.State.SubmitReviewBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.ISubmitReviewResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.SubmitReviewMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ISubmitReviewMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.SubmitReviewMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult>, global::IndicoV2.StrawberryShake.State.SubmitReviewForceCompleteResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult>, global::IndicoV2.StrawberryShake.State.SubmitReviewForceCompleteBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.SubmitReviewForceCompleteMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ISubmitReviewForceCompleteMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.SubmitReviewForceCompleteMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetReviewsResult>, global::IndicoV2.StrawberryShake.State.GetReviewsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IGetReviewsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IGetReviewsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetReviewsResult>, global::IndicoV2.StrawberryShake.State.GetReviewsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IGetReviewsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetReviewsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IGetReviewsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.GetReviewsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IGetReviewsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.GetReviewsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupQueryResult>, global::IndicoV2.StrawberryShake.State.ModelGroupQueryResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupQueryResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IModelGroupQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupQueryResult>, global::IndicoV2.StrawberryShake.State.ModelGroupQueryBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IModelGroupQueryResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupQueryResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupQueryResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ModelGroupQueryQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IModelGroupQueryQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ModelGroupQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelLoadResult>, global::IndicoV2.StrawberryShake.State.ModelLoadResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelLoadResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IModelLoadMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelLoadResult>, global::IndicoV2.StrawberryShake.State.ModelLoadBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IModelLoadResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelLoadResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelLoadResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ModelLoadMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IModelLoadMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ModelLoadMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IPredictModelResult>, global::IndicoV2.StrawberryShake.State.PredictModelResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IPredictModelResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IPredictModelMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IPredictModelResult>, global::IndicoV2.StrawberryShake.State.PredictModelBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IPredictModelResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IPredictModelResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IPredictModelResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.PredictModelMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IPredictModelMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.PredictModelMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult>, global::IndicoV2.StrawberryShake.State.ModelGroupProgressQueryResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IModelGroupProgressQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult>, global::IndicoV2.StrawberryShake.State.ModelGroupProgressQueryBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IModelGroupProgressQueryResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.ModelGroupProgressQueryQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IModelGroupProgressQueryQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.ModelGroupProgressQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSummaryResult>, global::IndicoV2.StrawberryShake.State.UserSummaryResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSummaryResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IUserSummaryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSummaryResult>, global::IndicoV2.StrawberryShake.State.UserSummaryBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IUserSummaryResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSummaryResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSummaryResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.UserSummaryQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IUserSummaryQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserSummaryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotResult>, global::IndicoV2.StrawberryShake.State.UserSnapshotResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IUserSnapshotQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotResult>, global::IndicoV2.StrawberryShake.State.UserSnapshotBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IUserSnapshotResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.UserSnapshotQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IUserSnapshotQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserSnapshotQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogResult>, global::IndicoV2.StrawberryShake.State.UserChangelogResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IUserChangelogQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogResult>, global::IndicoV2.StrawberryShake.State.UserChangelogBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IUserChangelogResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.UserChangelogQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IUserChangelogQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserChangelogQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotReportResult>, global::IndicoV2.StrawberryShake.State.UserSnapshotReportResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserSnapshotReportResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IUserSnapshotReportMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotReportResult>, global::IndicoV2.StrawberryShake.State.UserSnapshotReportBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IUserSnapshotReportResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotReportResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserSnapshotReportResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.UserSnapshotReportMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IUserSnapshotReportMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserSnapshotReportMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogReportResult>, global::IndicoV2.StrawberryShake.State.UserChangelogReportResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::IndicoV2.StrawberryShake.IUserChangelogReportResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IUserChangelogReportMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogReportResult>, global::IndicoV2.StrawberryShake.State.UserChangelogReportBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::IndicoV2.StrawberryShake.IUserChangelogReportResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogReportResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::IndicoV2.StrawberryShake.IUserChangelogReportResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.UserChangelogReportMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IUserChangelogReportMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.UserChangelogReportMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::IndicoV2.StrawberryShake.State.IndicoGqlClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IndicoGqlClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::IndicoV2.StrawberryShake.IIndicoGqlClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::IndicoV2.StrawberryShake.IndicoGqlClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
