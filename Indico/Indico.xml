<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Indico</name>
    </assembly>
    <members>
        <member name="P:Indico.Entity.Model.Id">
            <summary>
            Gets the Model identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Indico.Entity.Model.Status">
            <summary>
            Gets the Model status.
            </summary>
            <value>The model status.</value>
        </member>
        <member name="P:Indico.Entity.ModelGroup.Id">
            <summary>
            Gets the ModelGroup identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Indico.Entity.ModelGroup.Name">
            <summary>
            Gets the ModelGroup name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Indico.Entity.ModelGroup.Status">
            <summary>
            Gets the ModelGroup status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Indico.Entity.ModelGroup.SelectedModel">
            <summary>
            Gets the selected model.
            </summary>
            <value>The selected model.</value>
        </member>
        <member name="T:Indico.IndicoClient">
            <summary>
            Indico client with all available top level query and mutations
            </summary>
        </member>
        <member name="M:Indico.IndicoClient.GraphQLRequest">
            <summary>
            Create a new GraphQL request
            </summary>
            <returns>GraphQLRequest</returns>
        </member>
        <member name="M:Indico.IndicoClient.ModelGroupQuery">
            <summary>
            Create a new Query for ModelGroup
            </summary>
            <returns>ModelGroupQuery</returns>
        </member>
        <member name="M:Indico.IndicoClient.TrainingModelWithProgressQuery">
            <summary>
            Create a new Query for TrainingModelWithProgress.
            </summary>
            <returns>TrainingModelWithProgressQuery</returns>
        </member>
        <member name="M:Indico.IndicoClient.ModelGroupLoad">
            <summary>
            Create a new Mutation to load model in ModelGroup
            </summary>
            <returns>ModelGroupLoad</returns>
        </member>
        <member name="M:Indico.IndicoClient.ModelGroupPredict">
            <summary>
            Create a new Mutation to predict data
            </summary>
            <returns>ModelGroupPredict</returns>
        </member>
        <member name="M:Indico.IndicoClient.DocumentExtraction">
            <summary>
            Create a new mutation to submit document for extraction
            </summary>
            <returns>DocumentExtraction</returns>
        </member>
        <member name="M:Indico.IndicoClient.JobQuery">
            <summary>
            Create a query to retrieve async job info
            </summary>
            <returns>JobQuery</returns>
        </member>
        <member name="M:Indico.IndicoClient.RetrieveBlob">
            <summary>
            Retrieve a blob from indico blob storage
            </summary>
            <returns>RetrieveBlob</returns>
        </member>
        <member name="M:Indico.IndicoClient.UploadFile">
            <summary>
            Uploads files
            </summary>
            <returns>UploadFile</returns>
        </member>
        <member name="T:Indico.IndicoConfig">
            <summary>
            Indico client configuration
            </summary>
            <remarks>
            Use the builder to modify the config and pass this object to the IndicoClient constructor
            </remarks>
        </member>
        <member name="P:Indico.IndicoConfig.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Indico.IndicoConfig.Protocol">
            <summary>
            Gets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:Indico.IndicoConfig.ApiToken">
            <summary>
            Gets the API token.
            </summary>
            <value>The API token.</value>
        </member>
        <member name="T:Indico.Jobs.Job">
            <summary>
            Async Job information
            </summary>
        </member>
        <member name="M:Indico.Jobs.Job.Status">
            <summary>
            Retrieve job status
            </summary>
            <returns>JobStatus</returns>
        </member>
        <member name="M:Indico.Jobs.Job.Result">
            <summary>
            Retrieve result. Status must be success or an error will be thrown.
            </summary>
            <returns>JSON Object</returns>
        </member>
        <member name="M:Indico.Jobs.Job.Results">
            <summary>
            Retrieve results. Status must be success or an error will be thrown.
            </summary>
            <returns>JSON Array</returns>
        </member>
        <member name="M:Indico.Jobs.Job.Errors">
            <summary>
            If job status is FAILURE returns the list of errors encoutered
            </summary>
            <returns>List of errors</returns>
        </member>
        <member name="T:Indico.Jobs.JobOptions">
            <summary>
            Configuration parameters to modify how async jobs are handled
            </summary>
        </member>
        <member name="P:Indico.Jobs.JobOptions.Priority">
            <summary>
            Gets the job priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Indico.Jobs.JobQuery.Id(System.String)">
            <summary>
            Use to query job by id
            </summary>
            <returns>JobQuery</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Indico.Jobs.JobQuery.Query">
            <summary>
            Returns Job
            </summary>
            <returns>Job</returns>
        </member>
        <member name="M:Indico.Jobs.JobQuery.Refresh(Indico.Jobs.Job)">
            <summary>
            Refreshes the Job Object
            </summary>
            <returns>Job</returns>
            <param name="obj">Job</param>
        </member>
        <member name="M:Indico.Mutation`1.Execute">
            <summary>
            Execute the graphql query and returns the results as a specific type
            </summary>
            <returns>result of query of type T</returns>
        </member>
        <member name="M:Indico.Mutation.DocumentExtraction.Files(System.Collections.Generic.List{System.String})">
            <summary>
            Files to extract
            </summary>
            <returns>DocumentExtraction</returns>
            <param name="files">Files</param>
        </member>
        <member name="M:Indico.Mutation.DocumentExtraction.JsonConfig(Newtonsoft.Json.Linq.JObject)">
            <summary>
            JSON configuration for extraction
            </summary>
            <returns>DocumentExtraction</returns>
            <param name="jsonConfig">JSON config</param>
        </member>
        <member name="M:Indico.Mutation.DocumentExtraction.Execute">
            <summary>
            Executes request and returns Jobs
            </summary>
            <returns>Job Array</returns>
        </member>
        <member name="M:Indico.Mutation.ModelGroupLoad.ModelGroup(Indico.Entity.ModelGroup)">
            <summary>
            Use to load ModelGroup
            </summary>
            <returns>ModelGroupLoad</returns>
            <param name="modelGroup">Model group.</param>
        </member>
        <member name="M:Indico.Mutation.ModelGroupLoad.ModelId(System.Int32)">
            <summary>
            Use to load ModelGroup by id
            </summary>
            <returns>ModelGroupLoad</returns>
            <param name="modelId">Model identifier.</param>
        </member>
        <member name="M:Indico.Mutation.ModelGroupLoad.Execute">
            <summary>
            Executes request and returns load status  
            </summary>
            <returns>Load status</returns>
        </member>
        <member name="M:Indico.Mutation.ModelGroupPredict.ModelGroup(Indico.Entity.ModelGroup)">
            <summary>
            Use to predict ModelGroup
            </summary>
            <returns>ModelGroupPredict</returns>
            <param name="modelGroup">Model group.</param>
        </member>
        <member name="M:Indico.Mutation.ModelGroupPredict.ModelId(System.Int32)">
            <summary>
            Use to predict ModelGroup by id
            </summary>
            <returns>ModelGroupPredict</returns>
            <param name="modelId">Model identifier.</param>
        </member>
        <member name="M:Indico.Mutation.ModelGroupPredict.Data(System.Collections.Generic.List{System.String})">
            <summary>
            Data to predict
            </summary>
            <returns>ModelGroupPredict</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Indico.Mutation.ModelGroupPredict.JobOptions(Indico.Jobs.JobOptions)">
            <summary>
            Job Options for Job
            </summary>
            <returns>ModeGroupPredict</returns>
            <param name="jobOptions">Job options.</param>
        </member>
        <member name="M:Indico.Mutation.ModelGroupPredict.Execute">
            <summary>
            Executes request and returns job 
            </summary>
            <returns>Job</returns>
        </member>
        <member name="M:Indico.Query`1.Query">
            <summary>
            Execute the graphql query and retunrs the results as a specific type
            </summary>
            <returns>result of query of type T</returns>
        </member>
        <member name="M:Indico.Query.ModelGroupQuery.Id(System.Int32)">
            <summary>
            Use to query ModelGroup by id
            </summary>
            <returns>ModelGroupQuery</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Indico.Query.ModelGroupQuery.Name(System.String)">
            <summary>
            Use to query ModelGroup by name
            </summary>
            <returns>ModelGroupQuery</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Indico.Query.ModelGroupQuery.Query">
            <summary>
            Queries the server and returns ModelGroup
            </summary>
            <returns>ModelGroup</returns>
        </member>
        <member name="M:Indico.Query.ModelGroupQuery.Refresh(Indico.Entity.ModelGroup)">
            <summary>
            Refreshes the ModelGroup Object
            </summary>
            <returns>ModelGroup</returns>
            <param name="obj">ModelGroup</param>
        </member>
        <member name="M:Indico.Query.TrainingModelWithProgressQuery.Id(System.Int32)">
            <summary>
            Use to query TrainingModelWithProgress by id
            </summary>
            <returns>TrainingModelWithProgressQuery</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Indico.Query.TrainingModelWithProgressQuery.Name(System.String)">
            <summary>
            Use to query TrainingModelWithProgress by name
            </summary>
            <returns>TrainingModelWithProgressQuery</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Indico.Storage.Blob.AsStream">
            <summary>
            Returns Blob as Stream
            </summary>
            <returns>Stream</returns>
        </member>
        <member name="M:Indico.Storage.Blob.AsString">
            <summary>
            Returns Blob as string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Indico.Storage.Blob.AsJSONObject">
            <summary>
            Returns Blob as JSONObject
            </summary>
            <returns>JObject</returns>
        </member>
        <member name="M:Indico.Storage.Blob.AsJSONArray">
            <summary>
            Returns Blob as JSONArray
            </summary>
            <returns>JArray</returns>
        </member>
        <member name="M:Indico.Storage.RetrieveBlob.GZipDecompress(System.IO.Stream)">
            <summary>
            Decompresses Gzip Stream
            </summary>
            <returns>Async String</returns>
            <param name="compressed">Compressed Stream</param>
        </member>
        <member name="M:Indico.Storage.RetrieveBlob.Url(System.String)">
            <summary>
            Blob Url
            </summary>
            <returns>RetrieveBlob</returns>
            <param name="url">Bolb Url</param>
        </member>
        <member name="M:Indico.Storage.RetrieveBlob.Execute">
            <summary>
            Retrieves Blob
            </summary>
            <returns>Blob</returns>
        </member>
        <member name="M:Indico.Storage.UploadFile.FilePaths(System.Collections.Generic.List{System.String})">
            <summary>
            Files to upload
            </summary>
            <returns>UploadFile</returns>
            <param name="filePaths">File paths</param>
        </member>
        <member name="M:Indico.Storage.UploadFile.Call">
            <summary>
            Upload files and return metadata
            </summary>
            <returns>JArray</returns>
        </member>
        <member name="F:Indico.Types.JobStatus.PENDING">
            <summary>
            Task state is unknown (assumed pending since you know the id).
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.RECEIVED">
            <summary>
            Task was received by a worker (only used in events).
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.STARTED">
            <summary>
            Task was started by a worker (:setting:task_track_started).
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.SUCCESS">
            <summary>
            Task succeeded
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.FAILURE">
            <summary>
            Task failed
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.REVOKED">
            <summary>
            Task was revoked.
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.REJECTED">
            <summary>
            Task was rejected (only used in events).
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.RETRY">
            <summary>
            Task is waiting for retry.
            </summary>
        </member>
        <member name="F:Indico.Types.JobStatus.IGNORED">
            <summary>
            Job Status IGNORED
            </summary>
        </member>
        <member name="F:Indico.Types.PurgeBlobStatus.SUCCESS">
            <summary>
            Successfully removed blob
            </summary>
        </member>
        <member name="F:Indico.Types.PurgeBlobStatus.FAILED">
            <summary>
            Purge failed
            </summary>
        </member>
    </members>
</doc>
